
Standalone_Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a950  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800aae0  0800aae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acc0  0800acc0  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800acc0  0800acc0  0000bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc8  0800acc8  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc8  0800acc8  0000bcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800accc  0800accc  0000bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800acd0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  20000070  0800ad40  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ac  0800ad40  0000c1ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213d7  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e5  00000000  00000000  0002d477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00031960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001513  00000000  00000000  000334a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a716  00000000  00000000  000349b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea8c  00000000  00000000  0005f0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b516  00000000  00000000  0007db55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018906b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007650  00000000  00000000  001890b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00190700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aac8 	.word	0x0800aac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800aac8 	.word	0x0800aac8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b08b      	sub	sp, #44	@ 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	fa93 f3a3 	rbit	r3, r3
 80004da:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80004e6:	2320      	movs	r3, #32
 80004e8:	e003      	b.n	80004f2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	fab3 f383 	clz	r3, r3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	2103      	movs	r1, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	401a      	ands	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000502:	6a3b      	ldr	r3, [r7, #32]
 8000504:	fa93 f3a3 	rbit	r3, r3
 8000508:	61fb      	str	r3, [r7, #28]
  return result;
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	2b00      	cmp	r3, #0
 8000512:	d101      	bne.n	8000518 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000514:	2320      	movs	r3, #32
 8000516:	e003      	b.n	8000520 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051a:	fab3 f383 	clz	r3, r3
 800051e:	b2db      	uxtb	r3, r3
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	431a      	orrs	r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	bf00      	nop
 8000530:	372c      	adds	r7, #44	@ 0x2c
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800053a:	b480      	push	{r7}
 800053c:	b085      	sub	sp, #20
 800053e:	af00      	add	r7, sp, #0
 8000540:	60f8      	str	r0, [r7, #12]
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	43db      	mvns	r3, r3
 800054e:	401a      	ands	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	fb01 f303 	mul.w	r3, r1, r3
 8000558:	431a      	orrs	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	605a      	str	r2, [r3, #4]
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <LL_GPIO_GetPinOutputType>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  */
__STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
 800056a:	b480      	push	{r7}
 800056c:	b087      	sub	sp, #28
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	4013      	ands	r3, r2
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	fa92 f2a2 	rbit	r2, r2
 8000586:	60fa      	str	r2, [r7, #12]
  return result;
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	617a      	str	r2, [r7, #20]
  if (value == 0U)
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	2a00      	cmp	r2, #0
 8000590:	d101      	bne.n	8000596 <LL_GPIO_GetPinOutputType+0x2c>
    return 32U;
 8000592:	2220      	movs	r2, #32
 8000594:	e003      	b.n	800059e <LL_GPIO_GetPinOutputType+0x34>
  return __builtin_clz(value);
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	fab2 f282 	clz	r2, r2
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	40d3      	lsrs	r3, r2
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	371c      	adds	r7, #28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	4013      	ands	r3, r2
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d101      	bne.n	80005c8 <LL_GPIO_IsOutputPinSet+0x1c>
 80005c4:	2301      	movs	r3, #1
 80005c6:	e000      	b.n	80005ca <LL_GPIO_IsOutputPinSet+0x1e>
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	619a      	str	r2, [r3, #24]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <Init_Stepper_Motor>:
														.driver_enable = DRIVER_ENABLE,
														.standstill_pwr_down = STANDSTILL_ON}
									 };

void Init_Stepper_Motor(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	Update_Stepper_Motor_Operation();
 8000612:	f000 f809 	bl	8000628 <Update_Stepper_Motor_Operation>
	LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);	// LED off
 8000616:	2120      	movs	r1, #32
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f7ff ffe9 	bl	80005f2 <LL_GPIO_ResetOutputPin>
	
	Update_Standalone_Configuration();
 8000620:	f000 f958 	bl	80008d4 <Update_Standalone_Configuration>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <Update_Stepper_Motor_Operation>:

void Update_Stepper_Motor_Operation(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	Update_Motor_Speed();
 800062c:	f000 f8cc 	bl	80007c8 <Update_Motor_Speed>
	Update_Motor_Current_Scale();
 8000630:	f000 f86a 	bl	8000708 <Update_Motor_Current_Scale>
	
	switch(hstepmtr.direction){
 8000634:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <Update_Stepper_Motor_Operation+0xd4>)
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <Update_Stepper_Motor_Operation+0x1a>
 800063c:	2b01      	cmp	r3, #1
 800063e:	d010      	beq.n	8000662 <Update_Stepper_Motor_Operation+0x3a>
		if(LL_GPIO_IsOutputPinSet(DIR_GPIO_Port, DIR_Pin) == 0){
			LL_GPIO_SetOutputPin(DIR_GPIO_Port, DIR_Pin);
		}// else pin already in set state
		break;
	default:
		break;
 8000640:	e022      	b.n	8000688 <Update_Stepper_Motor_Operation+0x60>
		if(LL_GPIO_IsOutputPinSet(DIR_GPIO_Port, DIR_Pin) == 1){
 8000642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f7ff ffaf 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d116      	bne.n	8000682 <Update_Stepper_Motor_Operation+0x5a>
			LL_GPIO_ResetOutputPin(DIR_GPIO_Port, DIR_Pin);
 8000654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f7ff ffc9 	bl	80005f2 <LL_GPIO_ResetOutputPin>
		break;
 8000660:	e00f      	b.n	8000682 <Update_Stepper_Motor_Operation+0x5a>
		if(LL_GPIO_IsOutputPinSet(DIR_GPIO_Port, DIR_Pin) == 0){
 8000662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f7ff ff9f 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d108      	bne.n	8000686 <Update_Stepper_Motor_Operation+0x5e>
			LL_GPIO_SetOutputPin(DIR_GPIO_Port, DIR_Pin);
 8000674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067c:	f7ff ffab 	bl	80005d6 <LL_GPIO_SetOutputPin>
		break;
 8000680:	e001      	b.n	8000686 <Update_Stepper_Motor_Operation+0x5e>
		break;
 8000682:	bf00      	nop
 8000684:	e000      	b.n	8000688 <Update_Stepper_Motor_Operation+0x60>
		break;
 8000686:	bf00      	nop
	}
	
	switch(hstepmtr.run_state){
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <Update_Stepper_Motor_Operation+0xd4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <Update_Stepper_Motor_Operation+0x6e>
 8000690:	2b01      	cmp	r3, #1
 8000692:	d017      	beq.n	80006c4 <Update_Stepper_Motor_Operation+0x9c>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);		// start generating PWM on motor STEP pin
			LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);	// LED on
		}// else if not STATE_READY that means the PWM already started assumed
		break;
	default:
		break;
 8000694:	e030      	b.n	80006f8 <Update_Stepper_Motor_Operation+0xd0>
		if(HAL_TIM_GetChannelState(&htim2, TIM_CHANNEL_3) == HAL_TIM_CHANNEL_STATE_BUSY){
 8000696:	2108      	movs	r1, #8
 8000698:	4819      	ldr	r0, [pc, #100]	@ (8000700 <Update_Stepper_Motor_Operation+0xd8>)
 800069a:	f004 fff2 	bl	8005682 <HAL_TIM_GetChannelState>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d126      	bne.n	80006f2 <Update_Stepper_Motor_Operation+0xca>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);		// stop the PWM on motor STEP pin
 80006a4:	2108      	movs	r1, #8
 80006a6:	4816      	ldr	r0, [pc, #88]	@ (8000700 <Update_Stepper_Motor_Operation+0xd8>)
 80006a8:	f004 fc4e 	bl	8004f48 <HAL_TIM_PWM_Stop>
			LL_GPIO_SetPinMode(STEP_GPIO_Port, STEP_Pin, LL_GPIO_MODE_OUTPUT);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <Update_Stepper_Motor_Operation+0xdc>)
 80006b4:	f7ff ff04 	bl	80004c0 <LL_GPIO_SetPinMode>
			LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);	// LED off
 80006b8:	2120      	movs	r1, #32
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f7ff ff98 	bl	80005f2 <LL_GPIO_ResetOutputPin>
		break;
 80006c2:	e016      	b.n	80006f2 <Update_Stepper_Motor_Operation+0xca>
		if(HAL_TIM_GetChannelState(&htim2, TIM_CHANNEL_3) == HAL_TIM_CHANNEL_STATE_READY){
 80006c4:	2108      	movs	r1, #8
 80006c6:	480e      	ldr	r0, [pc, #56]	@ (8000700 <Update_Stepper_Motor_Operation+0xd8>)
 80006c8:	f004 ffdb 	bl	8005682 <HAL_TIM_GetChannelState>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d111      	bne.n	80006f6 <Update_Stepper_Motor_Operation+0xce>
			LL_GPIO_SetPinMode(STEP_GPIO_Port, STEP_Pin, LL_GPIO_MODE_ALTERNATE);
 80006d2:	2202      	movs	r2, #2
 80006d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <Update_Stepper_Motor_Operation+0xdc>)
 80006da:	f7ff fef1 	bl	80004c0 <LL_GPIO_SetPinMode>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);		// start generating PWM on motor STEP pin
 80006de:	2108      	movs	r1, #8
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <Update_Stepper_Motor_Operation+0xd8>)
 80006e2:	f004 fb2b 	bl	8004d3c <HAL_TIM_PWM_Start>
			LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);	// LED on
 80006e6:	2120      	movs	r1, #32
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ec:	f7ff ff73 	bl	80005d6 <LL_GPIO_SetOutputPin>
		break;
 80006f0:	e001      	b.n	80006f6 <Update_Stepper_Motor_Operation+0xce>
		break;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <Update_Stepper_Motor_Operation+0xd0>
		break;
 80006f6:	bf00      	nop
	}
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000104 	.word	0x20000104
 8000704:	48000400 	.word	0x48000400

08000708 <Update_Motor_Current_Scale>:

void Update_Motor_Current_Scale(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
	// DACout = Vref x DOR / 4096
	// DOR = DACout/Vref * 4096
	float upper_dac_val = UPPER_DAC_OUTPUT / 3.3f * 4096.0f;
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <Update_Motor_Current_Scale+0xa8>)
 8000710:	613b      	str	r3, [r7, #16]
	float lower_dac_val = LOWER_DAC_OUTPUT / 3.3f * 4096.0f;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <Update_Motor_Current_Scale+0xac>)
 8000714:	60fb      	str	r3, [r7, #12]
	float slope = (upper_dac_val - lower_dac_val) / ((float)MAX_CURRENT_SCALE - (float)MIN_CURRENT_SCALE);
 8000716:	ed97 7a04 	vldr	s14, [r7, #16]
 800071a:	edd7 7a03 	vldr	s15, [r7, #12]
 800071e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000722:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80007b8 <Update_Motor_Current_Scale+0xb0>
 8000726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072a:	edc7 7a02 	vstr	s15, [r7, #8]
	float offset = lower_dac_val - (slope * (float)MIN_CURRENT_SCALE);
 800072e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000732:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80007bc <Update_Motor_Current_Scale+0xb4>
 8000736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073a:	ed97 7a03 	vldr	s14, [r7, #12]
 800073e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000742:	edc7 7a01 	vstr	s15, [r7, #4]
	
	int8_t new_current_scale = (int8_t)hstepmtr.current_scale;
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <Update_Motor_Current_Scale+0xb8>)
 8000748:	789b      	ldrb	r3, [r3, #2]
 800074a:	75fb      	strb	r3, [r7, #23]
	if(new_current_scale > MAX_CURRENT_SCALE){	new_current_scale = MAX_CURRENT_SCALE;	}// filter max percentage
 800074c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000750:	2b64      	cmp	r3, #100	@ 0x64
 8000752:	dd01      	ble.n	8000758 <Update_Motor_Current_Scale+0x50>
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	75fb      	strb	r3, [r7, #23]
	if(new_current_scale < MIN_CURRENT_SCALE){	new_current_scale = MIN_CURRENT_SCALE;	}// filter min percentage
 8000758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800075c:	2b00      	cmp	r3, #0
 800075e:	da01      	bge.n	8000764 <Update_Motor_Current_Scale+0x5c>
 8000760:	2300      	movs	r3, #0
 8000762:	75fb      	strb	r3, [r7, #23]
	
	uint16_t new_dac_val = (uint16_t)((float)new_current_scale * slope + offset);
 8000764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000770:	edd7 7a02 	vldr	s15, [r7, #8]
 8000774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000778:	edd7 7a01 	vldr	s15, [r7, #4]
 800077c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000784:	ee17 3a90 	vmov	r3, s15
 8000788:	807b      	strh	r3, [r7, #2]
	if(HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1) == (uint32_t)new_dac_val){
 800078a:	2100      	movs	r1, #0
 800078c:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <Update_Motor_Current_Scale+0xbc>)
 800078e:	f002 fb53 	bl	8002e38 <HAL_DAC_GetValue>
 8000792:	4602      	mov	r2, r0
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	429a      	cmp	r2, r3
 8000798:	d006      	beq.n	80007a8 <Update_Motor_Current_Scale+0xa0>
		return;	// not necessary to update
	}
	// proceed with updating DAC
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, new_dac_val);
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <Update_Motor_Current_Scale+0xbc>)
 80007a2:	f002 fb24 	bl	8002dee <HAL_DAC_SetValue>
 80007a6:	e000      	b.n	80007aa <Update_Motor_Current_Scale+0xa2>
		return;	// not necessary to update
 80007a8:	bf00      	nop
}
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	4541f07c 	.word	0x4541f07c
 80007b4:	441b26ca 	.word	0x441b26ca
 80007b8:	42c80000 	.word	0x42c80000
 80007bc:	00000000 	.word	0x00000000
 80007c0:	20000000 	.word	0x20000000
 80007c4:	200000f0 	.word	0x200000f0

080007c8 <Update_Motor_Speed>:

void Update_Motor_Speed(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
	float step_freq;
	// step freq = (rpm) rev/min * 1 min/60sec * 360 deg/rev * 1 pulse/1.8 deg * (microstep resolution)
	step_freq = (float)hstepmtr.speed / 60.0f * 360.0f / 1.8f * (float)hstepmtr.standalone_cfg.microstep_res;
 80007ce:	4b3a      	ldr	r3, [pc, #232]	@ (80008b8 <Update_Motor_Speed+0xf0>)
 80007d0:	78db      	ldrb	r3, [r3, #3]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80008bc <Update_Motor_Speed+0xf4>
 80007de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007e2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80008c0 <Update_Motor_Speed+0xf8>
 80007e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ea:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80008c4 <Update_Motor_Speed+0xfc>
 80007ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <Update_Motor_Speed+0xf0>)
 80007f4:	795b      	ldrb	r3, [r3, #5]
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000802:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	uint32_t tim_period;
	// SystemCoreClock = 80000000U
	tim_period = (uint32_t)((float)SystemCoreClock / (float)(htim2.Init.Prescaler + 1) / step_freq);
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <Update_Motor_Speed+0x100>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <Update_Motor_Speed+0x104>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	3301      	adds	r3, #1
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000820:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000824:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000830:	ee17 3a90 	vmov	r3, s15
 8000834:	623b      	str	r3, [r7, #32]
	
	if(htim2.Init.Period == (tim_period - 1)){
 8000836:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <Update_Motor_Speed+0x104>)
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	3b01      	subs	r3, #1
 800083e:	429a      	cmp	r2, r3
 8000840:	d036      	beq.n	80008b0 <Update_Motor_Speed+0xe8>
		return;	// not necessary to update period & duty (pulse)
	}
	// proceed with updating PWM parameters below
	if(HAL_TIM_GetChannelState(&htim2, TIM_CHANNEL_3) == HAL_TIM_CHANNEL_STATE_BUSY){// check if PWM is currently active
 8000842:	2108      	movs	r1, #8
 8000844:	4821      	ldr	r0, [pc, #132]	@ (80008cc <Update_Motor_Speed+0x104>)
 8000846:	f004 ff1c 	bl	8005682 <HAL_TIM_GetChannelState>
 800084a:	4603      	mov	r3, r0
 800084c:	2b02      	cmp	r3, #2
 800084e:	d10e      	bne.n	800086e <Update_Motor_Speed+0xa6>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);		// stop the PWM because we want to update its parameters
 8000850:	2108      	movs	r1, #8
 8000852:	481e      	ldr	r0, [pc, #120]	@ (80008cc <Update_Motor_Speed+0x104>)
 8000854:	f004 fb78 	bl	8004f48 <HAL_TIM_PWM_Stop>
		LL_GPIO_SetPinMode(STEP_GPIO_Port, STEP_Pin, LL_GPIO_MODE_OUTPUT);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800085e:	481c      	ldr	r0, [pc, #112]	@ (80008d0 <Update_Motor_Speed+0x108>)
 8000860:	f7ff fe2e 	bl	80004c0 <LL_GPIO_SetPinMode>
		LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);	// LED off, if there'll be a glitch on the LED, I don't mind since less risk
 8000864:	2120      	movs	r1, #32
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f7ff fec2 	bl	80005f2 <LL_GPIO_ResetOutputPin>
	}// else if not STATE_BUSY that means the PWM already stopped assumed
	
	htim2.Init.Period = tim_period - 1;	// only period need to be changed
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	3b01      	subs	r3, #1
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <Update_Motor_Speed+0x104>)
 8000874:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Init(&htim2);
 8000876:	4815      	ldr	r0, [pc, #84]	@ (80008cc <Update_Motor_Speed+0x104>)
 8000878:	f004 f9fe 	bl	8004c78 <HAL_TIM_PWM_Init>
	
	TIM_OC_InitTypeDef sConfigOC = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088e:	2360      	movs	r3, #96	@ 0x60
 8000890:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = (tim_period / 2) - 1;
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	3b01      	subs	r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2208      	movs	r2, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	4808      	ldr	r0, [pc, #32]	@ (80008cc <Update_Motor_Speed+0x104>)
 80008aa:	f004 fce5 	bl	8005278 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	e000      	b.n	80008b2 <Update_Motor_Speed+0xea>
		return;	// not necessary to update period & duty (pulse)
 80008b0:	bf00      	nop
	
	// if hstepmtr.run_state == STEPPER_MOTOR_START, then PWM will be started again during run_state check after this function execution done
}
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	42700000 	.word	0x42700000
 80008c0:	43b40000 	.word	0x43b40000
 80008c4:	3fe66666 	.word	0x3fe66666
 80008c8:	20000010 	.word	0x20000010
 80008cc:	20000104 	.word	0x20000104
 80008d0:	48000400 	.word	0x48000400

080008d4 <Update_Standalone_Configuration>:

void Update_Standalone_Configuration(void)
{// Refer to TMC2130 datasheet Ch 24 Standalone Operation (table for CFG0-CFG6)
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	/* CFG0 */
	if(hstepmtr.standalone_cfg.chopper_off_time == TOFF_332TCLK){
 80008d8:	4ba0      	ldr	r3, [pc, #640]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d10e      	bne.n	80008fe <Update_Standalone_Configuration+0x2a>
		if(LL_GPIO_GetPinOutputType(CFG0_GPIO_Port, CFG0_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 80008e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e4:	489e      	ldr	r0, [pc, #632]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 80008e6:	f7ff fe40 	bl	800056a <LL_GPIO_GetPinOutputType>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d114      	bne.n	800091a <Update_Standalone_Configuration+0x46>
			LL_GPIO_SetPinOutputType(CFG0_GPIO_Port, CFG0_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f6:	489a      	ldr	r0, [pc, #616]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 80008f8:	f7ff fe1f 	bl	800053a <LL_GPIO_SetPinOutputType>
 80008fc:	e00d      	b.n	800091a <Update_Standalone_Configuration+0x46>
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG0_GPIO_Port, CFG0_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 80008fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000902:	4897      	ldr	r0, [pc, #604]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000904:	f7ff fe31 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d105      	bne.n	800091a <Update_Standalone_Configuration+0x46>
			LL_GPIO_SetPinOutputType(CFG0_GPIO_Port, CFG0_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000914:	4892      	ldr	r0, [pc, #584]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000916:	f7ff fe10 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if(hstepmtr.standalone_cfg.chopper_off_time == TOFF_140TCLK){
 800091a:	4b90      	ldr	r3, [pc, #576]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10d      	bne.n	800093e <Update_Standalone_Configuration+0x6a>
		if(LL_GPIO_IsOutputPinSet(CFG0_GPIO_Port, CFG0_Pin) == 1){
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	488e      	ldr	r0, [pc, #568]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000928:	f7ff fe40 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d112      	bne.n	8000958 <Update_Standalone_Configuration+0x84>
			LL_GPIO_ResetOutputPin(CFG0_GPIO_Port, CFG0_Pin);	// set to output level low
 8000932:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000936:	488a      	ldr	r0, [pc, #552]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000938:	f7ff fe5b 	bl	80005f2 <LL_GPIO_ResetOutputPin>
 800093c:	e00c      	b.n	8000958 <Update_Standalone_Configuration+0x84>
		}
	} else {	// TOFF_236TCLK and also for TOFF_332TCLK (open)
		if(LL_GPIO_IsOutputPinSet(CFG0_GPIO_Port, CFG0_Pin) == 0){
 800093e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000942:	4887      	ldr	r0, [pc, #540]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000944:	f7ff fe32 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d104      	bne.n	8000958 <Update_Standalone_Configuration+0x84>
			LL_GPIO_SetOutputPin(CFG0_GPIO_Port, CFG0_Pin);	// set to output level high
 800094e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000952:	4883      	ldr	r0, [pc, #524]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000954:	f7ff fe3f 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
	/* CFG1 */
	if((hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && 
 8000958:	4b80      	ldr	r3, [pc, #512]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	2b20      	cmp	r3, #32
 800095e:	d122      	bne.n	80009a6 <Update_Standalone_Configuration+0xd2>
	   ((hstepmtr.standalone_cfg.microstep_res == HALFSTEP_2) || 
 8000960:	4b7e      	ldr	r3, [pc, #504]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000962:	795b      	ldrb	r3, [r3, #5]
	if((hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && 
 8000964:	2b02      	cmp	r3, #2
 8000966:	d00f      	beq.n	8000988 <Update_Standalone_Configuration+0xb4>
	    ((hstepmtr.standalone_cfg.microstep_res == QUARTERSTEP_4) && (hstepmtr.standalone_cfg.chopper_mode == MODE_SPREADCYCLE)) || 
 8000968:	4b7c      	ldr	r3, [pc, #496]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 800096a:	795b      	ldrb	r3, [r3, #5]
	   ((hstepmtr.standalone_cfg.microstep_res == HALFSTEP_2) || 
 800096c:	2b04      	cmp	r3, #4
 800096e:	d103      	bne.n	8000978 <Update_Standalone_Configuration+0xa4>
	    ((hstepmtr.standalone_cfg.microstep_res == QUARTERSTEP_4) && (hstepmtr.standalone_cfg.chopper_mode == MODE_SPREADCYCLE)) || 
 8000970:	4b7a      	ldr	r3, [pc, #488]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <Update_Standalone_Configuration+0xb4>
		((hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16) && (hstepmtr.standalone_cfg.chopper_mode == MODE_STEALTHCHOP))
 8000978:	4b78      	ldr	r3, [pc, #480]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 800097a:	795b      	ldrb	r3, [r3, #5]
	    ((hstepmtr.standalone_cfg.microstep_res == QUARTERSTEP_4) && (hstepmtr.standalone_cfg.chopper_mode == MODE_SPREADCYCLE)) || 
 800097c:	2b10      	cmp	r3, #16
 800097e:	d112      	bne.n	80009a6 <Update_Standalone_Configuration+0xd2>
		((hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16) && (hstepmtr.standalone_cfg.chopper_mode == MODE_STEALTHCHOP))
 8000980:	4b76      	ldr	r3, [pc, #472]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000982:	79db      	ldrb	r3, [r3, #7]
 8000984:	2b40      	cmp	r3, #64	@ 0x40
 8000986:	d10e      	bne.n	80009a6 <Update_Standalone_Configuration+0xd2>
	    ))
	{
		if(LL_GPIO_GetPinOutputType(CFG1_GPIO_Port, CFG1_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000988:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800098c:	4874      	ldr	r0, [pc, #464]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 800098e:	f7ff fdec 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d114      	bne.n	80009c2 <Update_Standalone_Configuration+0xee>
			LL_GPIO_SetPinOutputType(CFG1_GPIO_Port, CFG1_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099e:	4870      	ldr	r0, [pc, #448]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 80009a0:	f7ff fdcb 	bl	800053a <LL_GPIO_SetPinOutputType>
		if(LL_GPIO_GetPinOutputType(CFG1_GPIO_Port, CFG1_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 80009a4:	e00d      	b.n	80009c2 <Update_Standalone_Configuration+0xee>
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG1_GPIO_Port, CFG1_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 80009a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009aa:	486d      	ldr	r0, [pc, #436]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 80009ac:	f7ff fddd 	bl	800056a <LL_GPIO_GetPinOutputType>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d105      	bne.n	80009c2 <Update_Standalone_Configuration+0xee>
			LL_GPIO_SetPinOutputType(CFG1_GPIO_Port, CFG1_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009bc:	4868      	ldr	r0, [pc, #416]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 80009be:	f7ff fdbc 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if((hstepmtr.standalone_cfg.microstep_res == FULLSTEP_1) || 
 80009c2:	4b66      	ldr	r3, [pc, #408]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d013      	beq.n	80009f2 <Update_Standalone_Configuration+0x11e>
	   ((hstepmtr.standalone_cfg.microstep_res == QUARTERSTEP_4) && (hstepmtr.standalone_cfg.interpolation == NO_INTERPOLATION)) || 
 80009ca:	4b64      	ldr	r3, [pc, #400]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80009cc:	795b      	ldrb	r3, [r3, #5]
	if((hstepmtr.standalone_cfg.microstep_res == FULLSTEP_1) || 
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d103      	bne.n	80009da <Update_Standalone_Configuration+0x106>
	   ((hstepmtr.standalone_cfg.microstep_res == QUARTERSTEP_4) && (hstepmtr.standalone_cfg.interpolation == NO_INTERPOLATION)) || 
 80009d2:	4b62      	ldr	r3, [pc, #392]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80009d4:	799b      	ldrb	r3, [r3, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00b      	beq.n	80009f2 <Update_Standalone_Configuration+0x11e>
	   ((hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16) && (hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && 
 80009da:	4b60      	ldr	r3, [pc, #384]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80009dc:	795b      	ldrb	r3, [r3, #5]
	   ((hstepmtr.standalone_cfg.microstep_res == QUARTERSTEP_4) && (hstepmtr.standalone_cfg.interpolation == NO_INTERPOLATION)) || 
 80009de:	2b10      	cmp	r3, #16
 80009e0:	d115      	bne.n	8000a0e <Update_Standalone_Configuration+0x13a>
	   ((hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16) && (hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && 
 80009e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80009e4:	799b      	ldrb	r3, [r3, #6]
 80009e6:	2b20      	cmp	r3, #32
 80009e8:	d111      	bne.n	8000a0e <Update_Standalone_Configuration+0x13a>
	    (hstepmtr.standalone_cfg.chopper_mode == MODE_SPREADCYCLE))
 80009ea:	4b5c      	ldr	r3, [pc, #368]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 80009ec:	79db      	ldrb	r3, [r3, #7]
	   ((hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16) && (hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && 
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10d      	bne.n	8000a0e <Update_Standalone_Configuration+0x13a>
	   )
	{
		if(LL_GPIO_IsOutputPinSet(CFG1_GPIO_Port, CFG1_Pin) == 1){
 80009f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009f6:	485a      	ldr	r0, [pc, #360]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 80009f8:	f7ff fdd8 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d112      	bne.n	8000a28 <Update_Standalone_Configuration+0x154>
			LL_GPIO_ResetOutputPin(CFG1_GPIO_Port, CFG1_Pin);	// set to output level low
 8000a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a06:	4856      	ldr	r0, [pc, #344]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a08:	f7ff fdf3 	bl	80005f2 <LL_GPIO_ResetOutputPin>
		if(LL_GPIO_IsOutputPinSet(CFG1_GPIO_Port, CFG1_Pin) == 1){
 8000a0c:	e00c      	b.n	8000a28 <Update_Standalone_Configuration+0x154>
		}
	} else {
		if(LL_GPIO_IsOutputPinSet(CFG1_GPIO_Port, CFG1_Pin) == 0){
 8000a0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a12:	4853      	ldr	r0, [pc, #332]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a14:	f7ff fdca 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <Update_Standalone_Configuration+0x154>
			LL_GPIO_SetOutputPin(CFG1_GPIO_Port, CFG1_Pin);	// set to output level high
 8000a1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a22:	484f      	ldr	r0, [pc, #316]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a24:	f7ff fdd7 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
	/* CFG2 */
	if((hstepmtr.standalone_cfg.chopper_mode == MODE_STEALTHCHOP) || 
 8000a28:	4b4c      	ldr	r3, [pc, #304]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000a2a:	79db      	ldrb	r3, [r3, #7]
 8000a2c:	2b40      	cmp	r3, #64	@ 0x40
 8000a2e:	d007      	beq.n	8000a40 <Update_Standalone_Configuration+0x16c>
	   ((hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && (hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16)))
 8000a30:	4b4a      	ldr	r3, [pc, #296]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000a32:	799b      	ldrb	r3, [r3, #6]
	if((hstepmtr.standalone_cfg.chopper_mode == MODE_STEALTHCHOP) || 
 8000a34:	2b20      	cmp	r3, #32
 8000a36:	d112      	bne.n	8000a5e <Update_Standalone_Configuration+0x18a>
	   ((hstepmtr.standalone_cfg.interpolation == USE_INTERPOLATION) && (hstepmtr.standalone_cfg.microstep_res == MICROSTEP_16)))
 8000a38:	4b48      	ldr	r3, [pc, #288]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000a3a:	795b      	ldrb	r3, [r3, #5]
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	d10e      	bne.n	8000a5e <Update_Standalone_Configuration+0x18a>
	{
		if(LL_GPIO_GetPinOutputType(CFG2_GPIO_Port, CFG2_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000a40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a44:	4846      	ldr	r0, [pc, #280]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a46:	f7ff fd90 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d114      	bne.n	8000a7a <Update_Standalone_Configuration+0x1a6>
			LL_GPIO_SetPinOutputType(CFG2_GPIO_Port, CFG2_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a56:	4842      	ldr	r0, [pc, #264]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a58:	f7ff fd6f 	bl	800053a <LL_GPIO_SetPinOutputType>
		if(LL_GPIO_GetPinOutputType(CFG2_GPIO_Port, CFG2_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000a5c:	e00d      	b.n	8000a7a <Update_Standalone_Configuration+0x1a6>
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG2_GPIO_Port, CFG2_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 8000a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a62:	483f      	ldr	r0, [pc, #252]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a64:	f7ff fd81 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d105      	bne.n	8000a7a <Update_Standalone_Configuration+0x1a6>
			LL_GPIO_SetPinOutputType(CFG2_GPIO_Port, CFG2_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a74:	483a      	ldr	r0, [pc, #232]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a76:	f7ff fd60 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if(hstepmtr.standalone_cfg.microstep_res <= HALFSTEP_2){	// fullstep(1) or halfstep(2)
 8000a7a:	4b38      	ldr	r3, [pc, #224]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d80d      	bhi.n	8000a9e <Update_Standalone_Configuration+0x1ca>
		if(LL_GPIO_IsOutputPinSet(CFG2_GPIO_Port, CFG2_Pin) == 1){
 8000a82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a86:	4836      	ldr	r0, [pc, #216]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a88:	f7ff fd90 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d112      	bne.n	8000ab8 <Update_Standalone_Configuration+0x1e4>
			LL_GPIO_ResetOutputPin(CFG2_GPIO_Port, CFG2_Pin);	// set to output level low
 8000a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a96:	4832      	ldr	r0, [pc, #200]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000a98:	f7ff fdab 	bl	80005f2 <LL_GPIO_ResetOutputPin>
 8000a9c:	e00c      	b.n	8000ab8 <Update_Standalone_Configuration+0x1e4>
		}
	} else {
		if(LL_GPIO_IsOutputPinSet(CFG2_GPIO_Port, CFG2_Pin) == 0){
 8000a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa2:	482f      	ldr	r0, [pc, #188]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000aa4:	f7ff fd82 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d104      	bne.n	8000ab8 <Update_Standalone_Configuration+0x1e4>
			LL_GPIO_SetOutputPin(CFG2_GPIO_Port, CFG2_Pin);		// set to output level high
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	482b      	ldr	r0, [pc, #172]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000ab4:	f7ff fd8f 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
	/* CFG3 */
	if(hstepmtr.standalone_cfg.current_setting == EXT_SENSE_RES_SCALED_AIN){
 8000ab8:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000aba:	7a1b      	ldrb	r3, [r3, #8]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d10e      	bne.n	8000ade <Update_Standalone_Configuration+0x20a>
		if(LL_GPIO_GetPinOutputType(CFG3_GPIO_Port, CFG3_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac4:	4826      	ldr	r0, [pc, #152]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000ac6:	f7ff fd50 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d114      	bne.n	8000afa <Update_Standalone_Configuration+0x226>
			LL_GPIO_SetPinOutputType(CFG3_GPIO_Port, CFG3_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad6:	4822      	ldr	r0, [pc, #136]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000ad8:	f7ff fd2f 	bl	800053a <LL_GPIO_SetPinOutputType>
 8000adc:	e00d      	b.n	8000afa <Update_Standalone_Configuration+0x226>
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG3_GPIO_Port, CFG3_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 8000ade:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae2:	481f      	ldr	r0, [pc, #124]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000ae4:	f7ff fd41 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d105      	bne.n	8000afa <Update_Standalone_Configuration+0x226>
			LL_GPIO_SetPinOutputType(CFG3_GPIO_Port, CFG3_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af4:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000af6:	f7ff fd20 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if(hstepmtr.standalone_cfg.current_setting == EXT_SENSE_RES){
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000afc:	7a1b      	ldrb	r3, [r3, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10d      	bne.n	8000b1e <Update_Standalone_Configuration+0x24a>
		if(LL_GPIO_IsOutputPinSet(CFG3_GPIO_Port, CFG3_Pin) == 1){
 8000b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b06:	4816      	ldr	r0, [pc, #88]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000b08:	f7ff fd50 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d112      	bne.n	8000b38 <Update_Standalone_Configuration+0x264>
			LL_GPIO_ResetOutputPin(CFG3_GPIO_Port, CFG3_Pin);	// set to output level low
 8000b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b16:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000b18:	f7ff fd6b 	bl	80005f2 <LL_GPIO_ResetOutputPin>
 8000b1c:	e00c      	b.n	8000b38 <Update_Standalone_Configuration+0x264>
		}
	} else {	// INT_SENSE_RES and also for EXT_SENSE_RES_SCALED_AIN (open)
		if(LL_GPIO_IsOutputPinSet(CFG3_GPIO_Port, CFG3_Pin) == 0){
 8000b1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b22:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000b24:	f7ff fd42 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <Update_Standalone_Configuration+0x264>
			LL_GPIO_SetOutputPin(CFG3_GPIO_Port, CFG3_Pin);	// set to output level high
 8000b2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b32:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000b34:	f7ff fd4f 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
	/* CFG4 */
	if(hstepmtr.standalone_cfg.chopper_hysteresis == HYSTERESIS_END_13){
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <Update_Standalone_Configuration+0x288>)
 8000b3a:	7a5b      	ldrb	r3, [r3, #9]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d111      	bne.n	8000b64 <Update_Standalone_Configuration+0x290>
		if(LL_GPIO_GetPinOutputType(CFG4_GPIO_Port, CFG4_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000b40:	2101      	movs	r1, #1
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000b44:	f7ff fd11 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d116      	bne.n	8000b7c <Update_Standalone_Configuration+0x2a8>
			LL_GPIO_SetPinOutputType(CFG4_GPIO_Port, CFG4_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2101      	movs	r1, #1
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <Update_Standalone_Configuration+0x28c>)
 8000b54:	f7ff fcf1 	bl	800053a <LL_GPIO_SetPinOutputType>
 8000b58:	e010      	b.n	8000b7c <Update_Standalone_Configuration+0x2a8>
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	48000400 	.word	0x48000400
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG4_GPIO_Port, CFG4_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 8000b64:	2101      	movs	r1, #1
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <Update_Standalone_Configuration+0x3f4>)
 8000b68:	f7ff fcff 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d104      	bne.n	8000b7c <Update_Standalone_Configuration+0x2a8>
			LL_GPIO_SetPinOutputType(CFG4_GPIO_Port, CFG4_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	4854      	ldr	r0, [pc, #336]	@ (8000cc8 <Update_Standalone_Configuration+0x3f4>)
 8000b78:	f7ff fcdf 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if(hstepmtr.standalone_cfg.chopper_hysteresis == HYSTERESIS_END_5){
 8000b7c:	4b53      	ldr	r3, [pc, #332]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000b7e:	7a5b      	ldrb	r3, [r3, #9]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10b      	bne.n	8000b9c <Update_Standalone_Configuration+0x2c8>
		if(LL_GPIO_IsOutputPinSet(CFG4_GPIO_Port, CFG4_Pin) == 1){
 8000b84:	2101      	movs	r1, #1
 8000b86:	4850      	ldr	r0, [pc, #320]	@ (8000cc8 <Update_Standalone_Configuration+0x3f4>)
 8000b88:	f7ff fd10 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d10f      	bne.n	8000bb2 <Update_Standalone_Configuration+0x2de>
			LL_GPIO_ResetOutputPin(CFG4_GPIO_Port, CFG4_Pin);	// set to output level low
 8000b92:	2101      	movs	r1, #1
 8000b94:	484c      	ldr	r0, [pc, #304]	@ (8000cc8 <Update_Standalone_Configuration+0x3f4>)
 8000b96:	f7ff fd2c 	bl	80005f2 <LL_GPIO_ResetOutputPin>
 8000b9a:	e00a      	b.n	8000bb2 <Update_Standalone_Configuration+0x2de>
		}
	} else {	// HYSTERESIS_END_9 and also for HYSTERESIS_END_13 (open)
		if(LL_GPIO_IsOutputPinSet(CFG4_GPIO_Port, CFG4_Pin) == 0){
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	484a      	ldr	r0, [pc, #296]	@ (8000cc8 <Update_Standalone_Configuration+0x3f4>)
 8000ba0:	f7ff fd04 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <Update_Standalone_Configuration+0x2de>
			LL_GPIO_SetOutputPin(CFG4_GPIO_Port, CFG4_Pin);	// set to output level high
 8000baa:	2101      	movs	r1, #1
 8000bac:	4846      	ldr	r0, [pc, #280]	@ (8000cc8 <Update_Standalone_Configuration+0x3f4>)
 8000bae:	f7ff fd12 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
	/* CFG5 */
	if(hstepmtr.standalone_cfg.chopper_blank_time == BLANK_TIME_36){
 8000bb2:	4b46      	ldr	r3, [pc, #280]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000bb4:	7a9b      	ldrb	r3, [r3, #10]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d10e      	bne.n	8000bd8 <Update_Standalone_Configuration+0x304>
		if(LL_GPIO_GetPinOutputType(CFG5_GPIO_Port, CFG5_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000bba:	2101      	movs	r1, #1
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f7ff fcd3 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d114      	bne.n	8000bf4 <Update_Standalone_Configuration+0x320>
			LL_GPIO_SetPinOutputType(CFG5_GPIO_Port, CFG5_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2101      	movs	r1, #1
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f7ff fcb2 	bl	800053a <LL_GPIO_SetPinOutputType>
 8000bd6:	e00d      	b.n	8000bf4 <Update_Standalone_Configuration+0x320>
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG5_GPIO_Port, CFG5_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 8000bd8:	2101      	movs	r1, #1
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f7ff fcc4 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <Update_Standalone_Configuration+0x320>
			LL_GPIO_SetPinOutputType(CFG5_GPIO_Port, CFG5_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f7ff fca3 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if(hstepmtr.standalone_cfg.chopper_blank_time == BLANK_TIME_16){
 8000bf4:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000bf6:	7a9b      	ldrb	r3, [r3, #10]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10d      	bne.n	8000c18 <Update_Standalone_Configuration+0x344>
		if(LL_GPIO_IsOutputPinSet(CFG5_GPIO_Port, CFG5_Pin) == 1){
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c02:	f7ff fcd3 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d112      	bne.n	8000c32 <Update_Standalone_Configuration+0x35e>
			LL_GPIO_ResetOutputPin(CFG5_GPIO_Port, CFG5_Pin);	// set to output level low
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c12:	f7ff fcee 	bl	80005f2 <LL_GPIO_ResetOutputPin>
 8000c16:	e00c      	b.n	8000c32 <Update_Standalone_Configuration+0x35e>
		}
	} else {	// BLANK_TIME_24 and also for BLANK_TIME_36 (open)
		if(LL_GPIO_IsOutputPinSet(CFG5_GPIO_Port, CFG5_Pin) == 0){
 8000c18:	2101      	movs	r1, #1
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f7ff fcc5 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <Update_Standalone_Configuration+0x35e>
			LL_GPIO_SetOutputPin(CFG5_GPIO_Port, CFG5_Pin);	// set to output level high
 8000c28:	2101      	movs	r1, #1
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f7ff fcd2 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
	/* CFG6 */
	if((hstepmtr.standalone_cfg.driver_enable == DRIVER_ENABLE) && (hstepmtr.standalone_cfg.standstill_pwr_down == STANDSTILL_ON)){
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000c34:	7adb      	ldrb	r3, [r3, #11]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d112      	bne.n	8000c60 <Update_Standalone_Configuration+0x38c>
 8000c3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000c3c:	7b1b      	ldrb	r3, [r3, #12]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d10e      	bne.n	8000c60 <Update_Standalone_Configuration+0x38c>
		if(LL_GPIO_GetPinOutputType(CFG6_EN_GPIO_Port, CFG6_EN_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000c42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c46:	4822      	ldr	r0, [pc, #136]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000c48:	f7ff fc8f 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d114      	bne.n	8000c7c <Update_Standalone_Configuration+0x3a8>
			LL_GPIO_SetPinOutputType(CFG6_EN_GPIO_Port, CFG6_EN_Pin, LL_GPIO_OUTPUT_OPENDRAIN);	// set open drain type
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c58:	481d      	ldr	r0, [pc, #116]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000c5a:	f7ff fc6e 	bl	800053a <LL_GPIO_SetPinOutputType>
		if(LL_GPIO_GetPinOutputType(CFG6_EN_GPIO_Port, CFG6_EN_Pin) == LL_GPIO_OUTPUT_PUSHPULL){
 8000c5e:	e00d      	b.n	8000c7c <Update_Standalone_Configuration+0x3a8>
		}
	} else {
		if(LL_GPIO_GetPinOutputType(CFG6_EN_GPIO_Port, CFG6_EN_Pin) == LL_GPIO_OUTPUT_OPENDRAIN){
 8000c60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c64:	481a      	ldr	r0, [pc, #104]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000c66:	f7ff fc80 	bl	800056a <LL_GPIO_GetPinOutputType>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <Update_Standalone_Configuration+0x3a8>
			LL_GPIO_SetPinOutputType(CFG6_EN_GPIO_Port, CFG6_EN_Pin, LL_GPIO_OUTPUT_PUSHPULL);	// set to output push-pull
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c76:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000c78:	f7ff fc5f 	bl	800053a <LL_GPIO_SetPinOutputType>
		}
	}
	if((hstepmtr.standalone_cfg.driver_enable == DRIVER_ENABLE) && (hstepmtr.standalone_cfg.standstill_pwr_down == STANDSTILL_OFF)){
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000c7e:	7adb      	ldrb	r3, [r3, #11]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <Update_Standalone_Configuration+0x3d4>
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <Update_Standalone_Configuration+0x3f8>)
 8000c86:	7b1b      	ldrb	r3, [r3, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10d      	bne.n	8000ca8 <Update_Standalone_Configuration+0x3d4>
		if(LL_GPIO_IsOutputPinSet(CFG6_EN_GPIO_Port, CFG6_EN_Pin) == 1){
 8000c8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c90:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000c92:	f7ff fc8b 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d113      	bne.n	8000cc4 <Update_Standalone_Configuration+0x3f0>
			LL_GPIO_ResetOutputPin(CFG6_EN_GPIO_Port, CFG6_EN_Pin);	// set to output level low
 8000c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000ca2:	f7ff fca6 	bl	80005f2 <LL_GPIO_ResetOutputPin>
		if(LL_GPIO_IsOutputPinSet(CFG6_EN_GPIO_Port, CFG6_EN_Pin) == 1){
 8000ca6:	e00d      	b.n	8000cc4 <Update_Standalone_Configuration+0x3f0>
		}
	} else {	// DRIVER_DISABLE and also for STANDSTILL_ON (open)
		if(LL_GPIO_IsOutputPinSet(CFG6_EN_GPIO_Port, CFG6_EN_Pin) == 0){
 8000ca8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000cae:	f7ff fc7d 	bl	80005ac <LL_GPIO_IsOutputPinSet>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d105      	bne.n	8000cc4 <Update_Standalone_Configuration+0x3f0>
			LL_GPIO_SetOutputPin(CFG6_EN_GPIO_Port, CFG6_EN_Pin);	// set to output level high
 8000cb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <Update_Standalone_Configuration+0x3fc>)
 8000cbe:	f7ff fc8a 	bl	80005d6 <LL_GPIO_SetOutputPin>
		}
	}
}
 8000cc2:	e7ff      	b.n	8000cc4 <Update_Standalone_Configuration+0x3f0>
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	48000800 	.word	0x48000800

08000cd4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <LL_SYSCFG_SetEXTISource+0x68>)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	0c1b      	lsrs	r3, r3, #16
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	ea02 0103 	and.w	r1, r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	60fb      	str	r3, [r7, #12]
  return result;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8000d0c:	2320      	movs	r3, #32
 8000d0e:	e003      	b.n	8000d18 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	fa03 f202 	lsl.w	r2, r3, r2
 8000d20:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <LL_SYSCFG_SetEXTISource+0x68>)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	430a      	orrs	r2, r1
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40010000 	.word	0x40010000

08000d40 <LL_GPIO_SetPinMode>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b08b      	sub	sp, #44	@ 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	613b      	str	r3, [r7, #16]
  return result;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d66:	2320      	movs	r3, #32
 8000d68:	e003      	b.n	8000d72 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	fab3 f383 	clz	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2103      	movs	r1, #3
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	61fb      	str	r3, [r7, #28]
  return result;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d94:	2320      	movs	r3, #32
 8000d96:	e003      	b.n	8000da0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	431a      	orrs	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	601a      	str	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	372c      	adds	r7, #44	@ 0x2c
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_GPIO_SetPinOutputType>:
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	401a      	ands	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	fb01 f303 	mul.w	r3, r1, r3
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	605a      	str	r2, [r3, #4]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_GPIO_SetPinPull>:
{
 8000dea:	b480      	push	{r7}
 8000dec:	b08b      	sub	sp, #44	@ 0x2c
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	613b      	str	r3, [r7, #16]
  return result;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000e10:	2320      	movs	r3, #32
 8000e12:	e003      	b.n	8000e1c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2103      	movs	r1, #3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	401a      	ands	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	61fb      	str	r3, [r7, #28]
  return result;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000e3e:	2320      	movs	r3, #32
 8000e40:	e003      	b.n	8000e4a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	431a      	orrs	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	60da      	str	r2, [r3, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	372c      	adds	r7, #44	@ 0x2c
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_GPIO_SetOutputPin>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	619a      	str	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_GPIO_ResetOutputPin>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea8:	4907      	ldr	r1, [pc, #28]	@ (8000ec8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 ff44 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f894 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fa7c 	bl	80013d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000edc:	f000 fa4a 	bl	8001374 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ee0:	f000 f9d0 	bl	8001284 <MX_TIM2_Init>
  MX_CAN1_Init();
 8000ee4:	f000 f8ee 	bl	80010c4 <MX_CAN1_Init>
  MX_DAC1_Init();
 8000ee8:	f000 f99a 	bl	8001220 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000eec:	482b      	ldr	r0, [pc, #172]	@ (8000f9c <main+0xd0>)
 8000eee:	f001 fa59 	bl	80023a4 <HAL_CAN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	482a      	ldr	r0, [pc, #168]	@ (8000fa0 <main+0xd4>)
 8000ef6:	f001 ff2d 	bl	8002d54 <HAL_DAC_Start>
  Init_Stepper_Motor();
 8000efa:	f7ff fb88 	bl	800060e <Init_Stepper_Motor>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000efe:	f006 fa0d 	bl	800731c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000f02:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <main+0xd8>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	f006 faff 	bl	800750a <osSemaphoreNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a26      	ldr	r2, [pc, #152]	@ (8000fa8 <main+0xdc>)
 8000f10:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 0, &myBinarySem02_attributes);
 8000f12:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <main+0xe0>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	2001      	movs	r0, #1
 8000f18:	f006 faf7 	bl	800750a <osSemaphoreNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a24      	ldr	r2, [pc, #144]	@ (8000fb0 <main+0xe4>)
 8000f20:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem03 */
  myBinarySem03Handle = osSemaphoreNew(1, 0, &myBinarySem03_attributes);
 8000f22:	4a24      	ldr	r2, [pc, #144]	@ (8000fb4 <main+0xe8>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	2001      	movs	r0, #1
 8000f28:	f006 faef 	bl	800750a <osSemaphoreNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a22      	ldr	r2, [pc, #136]	@ (8000fb8 <main+0xec>)
 8000f30:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem04 */
  myBinarySem04Handle = osSemaphoreNew(1, 0, &myBinarySem04_attributes);
 8000f32:	4a22      	ldr	r2, [pc, #136]	@ (8000fbc <main+0xf0>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	2001      	movs	r0, #1
 8000f38:	f006 fae7 	bl	800750a <osSemaphoreNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a20      	ldr	r2, [pc, #128]	@ (8000fc0 <main+0xf4>)
 8000f40:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f42:	4a20      	ldr	r2, [pc, #128]	@ (8000fc4 <main+0xf8>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <main+0xfc>)
 8000f48:	f006 fa32 	bl	80073b0 <osThreadNew>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <main+0x100>)
 8000f50:	6013      	str	r3, [r2, #0]

  /* creation of DeferredTask1 */
  DeferredTask1Handle = osThreadNew(Interpret_CAN_Msg_Id1, NULL, &DeferredTask1_attributes);
 8000f52:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <main+0x104>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	481f      	ldr	r0, [pc, #124]	@ (8000fd4 <main+0x108>)
 8000f58:	f006 fa2a 	bl	80073b0 <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <main+0x10c>)
 8000f60:	6013      	str	r3, [r2, #0]

  /* creation of DeferredTask2 */
  DeferredTask2Handle = osThreadNew(Update_Stepper_Motor_Task, NULL, &DeferredTask2_attributes);
 8000f62:	4a1e      	ldr	r2, [pc, #120]	@ (8000fdc <main+0x110>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <main+0x114>)
 8000f68:	f006 fa22 	bl	80073b0 <osThreadNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <main+0x118>)
 8000f70:	6013      	str	r3, [r2, #0]

  /* creation of DeferredTask3 */
  DeferredTask3Handle = osThreadNew(Interpret_CAN_Msg_Id2, NULL, &DeferredTask3_attributes);
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <main+0x11c>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	481d      	ldr	r0, [pc, #116]	@ (8000fec <main+0x120>)
 8000f78:	f006 fa1a 	bl	80073b0 <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <main+0x124>)
 8000f80:	6013      	str	r3, [r2, #0]

  /* creation of DeferredTask4 */
  DeferredTask4Handle = osThreadNew(Update_Standalone_Op_Task, NULL, &DeferredTask4_attributes);
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <main+0x128>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <main+0x12c>)
 8000f88:	f006 fa12 	bl	80073b0 <osThreadNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <main+0x130>)
 8000f90:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f92:	f006 f9e7 	bl	8007364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f96:	bf00      	nop
 8000f98:	e7fd      	b.n	8000f96 <main+0xca>
 8000f9a:	bf00      	nop
 8000f9c:	2000008c 	.word	0x2000008c
 8000fa0:	200000f0 	.word	0x200000f0
 8000fa4:	0800ac38 	.word	0x0800ac38
 8000fa8:	200001ec 	.word	0x200001ec
 8000fac:	0800ac48 	.word	0x0800ac48
 8000fb0:	200001f0 	.word	0x200001f0
 8000fb4:	0800ac58 	.word	0x0800ac58
 8000fb8:	200001f4 	.word	0x200001f4
 8000fbc:	0800ac68 	.word	0x0800ac68
 8000fc0:	200001f8 	.word	0x200001f8
 8000fc4:	0800ab84 	.word	0x0800ab84
 8000fc8:	080015e1 	.word	0x080015e1
 8000fcc:	200001d8 	.word	0x200001d8
 8000fd0:	0800aba8 	.word	0x0800aba8
 8000fd4:	080015f5 	.word	0x080015f5
 8000fd8:	200001dc 	.word	0x200001dc
 8000fdc:	0800abcc 	.word	0x0800abcc
 8000fe0:	080016a1 	.word	0x080016a1
 8000fe4:	200001e0 	.word	0x200001e0
 8000fe8:	0800abf0 	.word	0x0800abf0
 8000fec:	080016c5 	.word	0x080016c5
 8000ff0:	200001e4 	.word	0x200001e4
 8000ff4:	0800ac14 	.word	0x0800ac14
 8000ff8:	080017cd 	.word	0x080017cd
 8000ffc:	200001e8 	.word	0x200001e8

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b096      	sub	sp, #88	@ 0x58
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2244      	movs	r2, #68	@ 0x44
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f009 fc72 	bl	800a8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001022:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001026:	f002 fa0b 	bl	8003440 <HAL_PWREx_ControlVoltageScaling>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001030:	f000 fbf0 	bl	8001814 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001034:	f002 f9e6 	bl	8003404 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <SystemClock_Config+0xc0>)
 800103a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800103e:	4a20      	ldr	r2, [pc, #128]	@ (80010c0 <SystemClock_Config+0xc0>)
 8001040:	f023 0318 	bic.w	r3, r3, #24
 8001044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001048:	2314      	movs	r3, #20
 800104a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001058:	2360      	movs	r3, #96	@ 0x60
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105c:	2302      	movs	r3, #2
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001060:	2301      	movs	r3, #1
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001068:	2328      	movs	r3, #40	@ 0x28
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800106c:	2307      	movs	r3, #7
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f002 fa35 	bl	80034ec <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001088:	f000 fbc4 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2303      	movs	r3, #3
 8001092:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	2104      	movs	r1, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fdfd 	bl	8003ca4 <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010b0:	f000 fbb0 	bl	8001814 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010b4:	f003 fb36 	bl	8004724 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010b8:	bf00      	nop
 80010ba:	3758      	adds	r7, #88	@ 0x58
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <MX_CAN1_Init+0x140>)
 80010cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80010ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010d0:	2228      	movs	r2, #40	@ 0x28
 80010d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010da:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80010e0:	4b47      	ldr	r3, [pc, #284]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010e2:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80010e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80010e8:	4b45      	ldr	r3, [pc, #276]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010ea:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80010ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010f0:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f6:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001102:	4b3f      	ldr	r3, [pc, #252]	@ (8001200 <MX_CAN1_Init+0x13c>)
 8001104:	2200      	movs	r2, #0
 8001106:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001108:	4b3d      	ldr	r3, [pc, #244]	@ (8001200 <MX_CAN1_Init+0x13c>)
 800110a:	2200      	movs	r2, #0
 800110c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110e:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <MX_CAN1_Init+0x13c>)
 8001110:	2200      	movs	r2, #0
 8001112:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001114:	483a      	ldr	r0, [pc, #232]	@ (8001200 <MX_CAN1_Init+0x13c>)
 8001116:	f000 fe85 	bl	8001e24 <HAL_CAN_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 fb78 	bl	8001814 <Error_Handler>
  // psc x (tBS1 + tBS2 + 1) = fpclk1 / baud
  // psc x (tBS1 + tBS2 + 1) = 80MHz / 125kHz = 640
  // psc x (8 + 7 + 1) = 640
  // psc = 640 / 16 = 40

  CAN_Rx_Header_Id1.StdId = 0;
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <MX_CAN1_Init+0x144>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
  CAN_Rx_Header_Id1.IDE = CAN_ID_STD;
 800112a:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <MX_CAN1_Init+0x144>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  CAN_Rx_Header_Id1.RTR = CAN_RTR_DATA;
 8001130:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <MX_CAN1_Init+0x144>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  CAN_Rx_Header_Id1.DLC = 0;
 8001136:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <MX_CAN1_Init+0x144>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  
  CAN_Rx_Header_Id2.StdId = 0;
 800113c:	4b33      	ldr	r3, [pc, #204]	@ (800120c <MX_CAN1_Init+0x148>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  CAN_Rx_Header_Id2.IDE = CAN_ID_STD;
 8001142:	4b32      	ldr	r3, [pc, #200]	@ (800120c <MX_CAN1_Init+0x148>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  CAN_Rx_Header_Id2.RTR = CAN_RTR_DATA;
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <MX_CAN1_Init+0x148>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  CAN_Rx_Header_Id2.DLC = 0;
 800114e:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <MX_CAN1_Init+0x148>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]

  Rx_Filter_0.FilterIdHigh = ((uint32_t)0x1C0) << 5;
 8001154:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <MX_CAN1_Init+0x14c>)
 8001156:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800115a:	601a      	str	r2, [r3, #0]
  Rx_Filter_0.FilterIdLow = 0x0000;
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <MX_CAN1_Init+0x14c>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  Rx_Filter_0.FilterMaskIdHigh = ((uint32_t)0x7FF) << 5;
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <MX_CAN1_Init+0x14c>)
 8001164:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001168:	609a      	str	r2, [r3, #8]
  Rx_Filter_0.FilterMaskIdLow = 0x0000;
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_CAN1_Init+0x14c>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  Rx_Filter_0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <MX_CAN1_Init+0x14c>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  Rx_Filter_0.FilterBank = 0;	// Bank 0
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <MX_CAN1_Init+0x14c>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  Rx_Filter_0.FilterMode = CAN_FILTERMODE_IDMASK;
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_CAN1_Init+0x14c>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  Rx_Filter_0.FilterScale = CAN_FILTERSCALE_32BIT;
 8001182:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <MX_CAN1_Init+0x14c>)
 8001184:	2201      	movs	r2, #1
 8001186:	61da      	str	r2, [r3, #28]
  Rx_Filter_0.FilterActivation = CAN_FILTER_ENABLE;
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_CAN1_Init+0x14c>)
 800118a:	2201      	movs	r2, #1
 800118c:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &Rx_Filter_0);
 800118e:	4920      	ldr	r1, [pc, #128]	@ (8001210 <MX_CAN1_Init+0x14c>)
 8001190:	481b      	ldr	r0, [pc, #108]	@ (8001200 <MX_CAN1_Init+0x13c>)
 8001192:	f001 f83d 	bl	8002210 <HAL_CAN_ConfigFilter>
  
  Rx_Filter_1.FilterIdHigh = ((uint32_t)0x1C1) << 5;
 8001196:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <MX_CAN1_Init+0x150>)
 8001198:	f643 0220 	movw	r2, #14368	@ 0x3820
 800119c:	601a      	str	r2, [r3, #0]
  Rx_Filter_1.FilterIdLow = 0x0000;
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  Rx_Filter_1.FilterMaskIdHigh = ((uint32_t)0x7FF) << 5;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011a6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80011aa:	609a      	str	r2, [r3, #8]
  Rx_Filter_1.FilterMaskIdLow = 0x0000;
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  Rx_Filter_1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	611a      	str	r2, [r3, #16]
  Rx_Filter_1.FilterBank = 1;	// Bank 1
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	615a      	str	r2, [r3, #20]
  Rx_Filter_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  Rx_Filter_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  Rx_Filter_1.FilterActivation = CAN_FILTER_ENABLE;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &Rx_Filter_1);
 80011d0:	4910      	ldr	r1, [pc, #64]	@ (8001214 <MX_CAN1_Init+0x150>)
 80011d2:	480b      	ldr	r0, [pc, #44]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80011d4:	f001 f81c 	bl	8002210 <HAL_CAN_ConfigFilter>
  
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011d8:	2102      	movs	r1, #2
 80011da:	4809      	ldr	r0, [pc, #36]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80011dc:	f001 fa48 	bl	8002670 <HAL_CAN_ActivateNotification>
  HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, Read_CAN_Frame_From_FIFO0);
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <MX_CAN1_Init+0x154>)
 80011e2:	2106      	movs	r1, #6
 80011e4:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80011e6:	f000 ff63 	bl	80020b0 <HAL_CAN_RegisterCallback>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 80011ea:	2110      	movs	r1, #16
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80011ee:	f001 fa3f 	bl	8002670 <HAL_CAN_ActivateNotification>
  HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID, Read_CAN_Frame_From_FIFO1);
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <MX_CAN1_Init+0x158>)
 80011f4:	2108      	movs	r1, #8
 80011f6:	4802      	ldr	r0, [pc, #8]	@ (8001200 <MX_CAN1_Init+0x13c>)
 80011f8:	f000 ff5a 	bl	80020b0 <HAL_CAN_RegisterCallback>
  /* USER CODE END CAN1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000008c 	.word	0x2000008c
 8001204:	40006400 	.word	0x40006400
 8001208:	2000024c 	.word	0x2000024c
 800120c:	20000268 	.word	0x20000268
 8001210:	200001fc 	.word	0x200001fc
 8001214:	20000224 	.word	0x20000224
 8001218:	08001561 	.word	0x08001561
 800121c:	080015a1 	.word	0x080015a1

08001220 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2224      	movs	r2, #36	@ 0x24
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f009 fb63 	bl	800a8f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_DAC1_Init+0x5c>)
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <MX_DAC1_Init+0x60>)
 8001236:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001238:	4810      	ldr	r0, [pc, #64]	@ (800127c <MX_DAC1_Init+0x5c>)
 800123a:	f001 fd69 	bl	8002d10 <HAL_DAC_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001244:	f000 fae6 	bl	8001814 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_DAC1_Init+0x5c>)
 8001264:	f001 fdfd 	bl	8002e62 <HAL_DAC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800126e:	f000 fad1 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000f0 	.word	0x200000f0
 8001280:	40007400 	.word	0x40007400

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	@ 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80012be:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012ce:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80012d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e0:	4823      	ldr	r0, [pc, #140]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012e2:	f003 fc01 	bl	8004ae8 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80012ec:	f000 fa92 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	@ (8001370 <MX_TIM2_Init+0xec>)
 80012fe:	f004 f8cf 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001308:	f000 fa84 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800130c:	4818      	ldr	r0, [pc, #96]	@ (8001370 <MX_TIM2_Init+0xec>)
 800130e:	f003 fcb3 	bl	8004c78 <HAL_TIM_PWM_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001318:	f000 fa7c 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4811      	ldr	r0, [pc, #68]	@ (8001370 <MX_TIM2_Init+0xec>)
 800132c:	f004 fe12 	bl	8005f54 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001336:	f000 fa6d 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133a:	2360      	movs	r3, #96	@ 0x60
 800133c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1499;
 800133e:	f240 53db 	movw	r3, #1499	@ 0x5db
 8001342:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2208      	movs	r2, #8
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM2_Init+0xec>)
 8001354:	f003 ff90 	bl	8005278 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800135e:	f000 fa59 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM2_Init+0xec>)
 8001364:	f000 fb72 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	@ 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000104 	.word	0x20000104

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 800137a:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <MX_USART2_UART_Init+0x5c>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_USART2_UART_Init+0x58>)
 80013b8:	f004 fe72 	bl	80060a0 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 fa27 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000150 	.word	0x20000150
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80013f6:	2004      	movs	r0, #4
 80013f8:	f7ff fd50 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80013fc:	2080      	movs	r0, #128	@ 0x80
 80013fe:	f7ff fd4d 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fd4a 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff fd47 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(CFG5_GPIO_Port, CFG5_Pin);
 800140e:	2101      	movs	r1, #1
 8001410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001414:	f7ff fd26 	bl	8000e64 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, CFG3_Pin|CFG2_Pin|CFG1_Pin);
 8001418:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 800141c:	484d      	ldr	r0, [pc, #308]	@ (8001554 <MX_GPIO_Init+0x180>)
 800141e:	f7ff fd21 	bl	8000e64 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CFG6_EN_GPIO_Port, CFG6_EN_Pin);
 8001422:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001426:	484c      	ldr	r0, [pc, #304]	@ (8001558 <MX_GPIO_Init+0x184>)
 8001428:	f7ff fd1c 	bl	8000e64 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|DIR_Pin);
 800142c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001434:	f7ff fd24 	bl	8000e80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, CFG4_Pin|CFG0_Pin);
 8001438:	f244 0101 	movw	r1, #16385	@ 0x4001
 800143c:	4845      	ldr	r0, [pc, #276]	@ (8001554 <MX_GPIO_Init+0x180>)
 800143e:	f7ff fd1f 	bl	8000e80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001442:	4946      	ldr	r1, [pc, #280]	@ (800155c <MX_GPIO_Init+0x188>)
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff fc45 	bl	8000cd4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800144a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001454:	2301      	movs	r3, #1
 8001456:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001460:	2302      	movs	r3, #2
 8001462:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4618      	mov	r0, r3
 800146c:	f005 fc64 	bl	8006d38 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001476:	4838      	ldr	r0, [pc, #224]	@ (8001558 <MX_GPIO_Init+0x184>)
 8001478:	f7ff fcb7 	bl	8000dea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001482:	4835      	ldr	r0, [pc, #212]	@ (8001558 <MX_GPIO_Init+0x184>)
 8001484:	f7ff fc5c 	bl	8000d40 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = CFG5_Pin|DIR_Pin;
 8001488:	f240 1301 	movw	r3, #257	@ 0x101
 800148c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800148e:	2301      	movs	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001492:	2301      	movs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f005 fe86 	bl	80071b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80014aa:	2320      	movs	r3, #32
 80014ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ae:	2301      	movs	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f005 fe76 	bl	80071b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CFG4_Pin|CFG2_Pin|CFG0_Pin;
 80014ca:	f246 0301 	movw	r3, #24577	@ 0x6001
 80014ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	@ (8001554 <MX_GPIO_Init+0x180>)
 80014e6:	f005 fe66 	bl	80071b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CFG3_Pin|CFG1_Pin;
 80014ea:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80014ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4813      	ldr	r0, [pc, #76]	@ (8001554 <MX_GPIO_Init+0x180>)
 8001506:	f005 fe56 	bl	80071b6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CFG6_EN_Pin;
 800150a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001514:	2301      	movs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CFG6_EN_GPIO_Port, &GPIO_InitStruct);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_GPIO_Init+0x184>)
 8001526:	f005 fe46 	bl	80071b6 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
LL_GPIO_SetPinMode(STEP_GPIO_Port, STEP_Pin, LL_GPIO_MODE_OUTPUT);// if I don't set STEP pin to output a low(0), motor will start moving initially
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001530:	4808      	ldr	r0, [pc, #32]	@ (8001554 <MX_GPIO_Init+0x180>)
 8001532:	f7ff fc05 	bl	8000d40 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType(STEP_GPIO_Port, STEP_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_GPIO_Init+0x180>)
 800153e:	f7ff fc3c 	bl	8000dba <LL_GPIO_SetPinOutputType>
LL_GPIO_ResetOutputPin(STEP_GPIO_Port, STEP_Pin);
 8001542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001546:	4803      	ldr	r0, [pc, #12]	@ (8001554 <MX_GPIO_Init+0x180>)
 8001548:	f7ff fc9a 	bl	8000e80 <LL_GPIO_ResetOutputPin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	48000400 	.word	0x48000400
 8001558:	48000800 	.word	0x48000800
 800155c:	00f00003 	.word	0x00f00003

08001560 <Read_CAN_Frame_From_FIFO0>:

/* USER CODE BEGIN 4 */
void Read_CAN_Frame_From_FIFO0(CAN_HandleTypeDef *hcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN_Rx_Header_Id1, CAN_Rx_Data_Id1);
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <Read_CAN_Frame_From_FIFO0+0x30>)
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <Read_CAN_Frame_From_FIFO0+0x34>)
 800156c:	2100      	movs	r1, #0
 800156e:	480a      	ldr	r0, [pc, #40]	@ (8001598 <Read_CAN_Frame_From_FIFO0+0x38>)
 8001570:	f000 ff5c 	bl	800242c <HAL_CAN_GetRxMessage>
	if(CAN_Rx_Header_Id1.DLC >= 4){
 8001574:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <Read_CAN_Frame_From_FIFO0+0x34>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d904      	bls.n	8001586 <Read_CAN_Frame_From_FIFO0+0x26>
		osSemaphoreRelease(myBinarySem01Handle);
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <Read_CAN_Frame_From_FIFO0+0x3c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f006 f89d 	bl	80076c0 <osSemaphoreRelease>
	}// else something is wrong, don't proceed with interpreting message
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000284 	.word	0x20000284
 8001594:	2000024c 	.word	0x2000024c
 8001598:	2000008c 	.word	0x2000008c
 800159c:	200001ec 	.word	0x200001ec

080015a0 <Read_CAN_Frame_From_FIFO1>:

void Read_CAN_Frame_From_FIFO1(CAN_HandleTypeDef *hcan)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &CAN_Rx_Header_Id2, CAN_Rx_Data_Id2);
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <Read_CAN_Frame_From_FIFO1+0x30>)
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <Read_CAN_Frame_From_FIFO1+0x34>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <Read_CAN_Frame_From_FIFO1+0x38>)
 80015b0:	f000 ff3c 	bl	800242c <HAL_CAN_GetRxMessage>
	if(CAN_Rx_Header_Id2.DLC >= 6){
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <Read_CAN_Frame_From_FIFO1+0x34>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d904      	bls.n	80015c6 <Read_CAN_Frame_From_FIFO1+0x26>
		osSemaphoreRelease(myBinarySem03Handle);
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <Read_CAN_Frame_From_FIFO1+0x3c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f006 f87d 	bl	80076c0 <osSemaphoreRelease>
	}// else something is wrong, don't proceed with interpreting message
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000028c 	.word	0x2000028c
 80015d4:	20000268 	.word	0x20000268
 80015d8:	2000008c 	.word	0x2000008c
 80015dc:	200001f4 	.word	0x200001f4

080015e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(osWaitForever);
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f005 ff72 	bl	80074d4 <osDelay>
 80015f0:	e7fa      	b.n	80015e8 <StartDefaultTask+0x8>
	...

080015f4 <Interpret_CAN_Msg_Id1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interpret_CAN_Msg_Id1 */
void Interpret_CAN_Msg_Id1(void *argument)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interpret_CAN_Msg_Id1 */
  uint8_t msg_correct_cnt;	// if more message need to be processed I think better use bitwise masking than count
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <Interpret_CAN_Msg_Id1+0x9c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	4618      	mov	r0, r3
 8001606:	f006 f809 	bl	800761c <osSemaphoreAcquire>
	  // interpret here and fill up hstepmtr
	  msg_correct_cnt = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
	  if((CAN_Rx_Data_Id1[0] == STEPPER_MOTOR_STOP) || (CAN_Rx_Data_Id1[0] == STEPPER_MOTOR_START)){
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <Interpret_CAN_Msg_Id1+0x2a>
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <Interpret_CAN_Msg_Id1+0x38>
		  msg_correct_cnt++;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	3301      	adds	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
		  hstepmtr.run_state = CAN_Rx_Data_Id1[0];
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <Interpret_CAN_Msg_Id1+0xa4>)
 800162a:	701a      	strb	r2, [r3, #0]
	  }
	  if((CAN_Rx_Data_Id1[1] == MOTOR_DIRECTION_CCW) || (CAN_Rx_Data_Id1[1] == MOTOR_DIRECTION_CW)){
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <Interpret_CAN_Msg_Id1+0x48>
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001636:	785b      	ldrb	r3, [r3, #1]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <Interpret_CAN_Msg_Id1+0x56>
		  msg_correct_cnt++;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
		  hstepmtr.direction = CAN_Rx_Data_Id1[1];
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001644:	785a      	ldrb	r2, [r3, #1]
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <Interpret_CAN_Msg_Id1+0xa4>)
 8001648:	705a      	strb	r2, [r3, #1]
	  }
	  if((CAN_Rx_Data_Id1[2] >= MIN_CURRENT_SCALE) && (CAN_Rx_Data_Id1[2] <= MAX_CURRENT_SCALE)){
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	2b64      	cmp	r3, #100	@ 0x64
 8001650:	d806      	bhi.n	8001660 <Interpret_CAN_Msg_Id1+0x6c>
		  msg_correct_cnt++;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	3301      	adds	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
		  hstepmtr.current_scale = CAN_Rx_Data_Id1[2];
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 800165a:	789a      	ldrb	r2, [r3, #2]
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <Interpret_CAN_Msg_Id1+0xa4>)
 800165e:	709a      	strb	r2, [r3, #2]
	  }
	  if((CAN_Rx_Data_Id1[3] >= MIN_MOTOR_SPEED_RPM) && (CAN_Rx_Data_Id1[3] <= MAX_MOTOR_SPEED_RPM)){
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001662:	78db      	ldrb	r3, [r3, #3]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00a      	beq.n	800167e <Interpret_CAN_Msg_Id1+0x8a>
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 800166a:	78db      	ldrb	r3, [r3, #3]
 800166c:	2b32      	cmp	r3, #50	@ 0x32
 800166e:	d806      	bhi.n	800167e <Interpret_CAN_Msg_Id1+0x8a>
		  msg_correct_cnt++;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	3301      	adds	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
		  hstepmtr.speed = CAN_Rx_Data_Id1[3];
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <Interpret_CAN_Msg_Id1+0xa0>)
 8001678:	78da      	ldrb	r2, [r3, #3]
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <Interpret_CAN_Msg_Id1+0xa4>)
 800167c:	70da      	strb	r2, [r3, #3]
	  }
	  if(msg_correct_cnt > 0){
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0bb      	beq.n	80015fc <Interpret_CAN_Msg_Id1+0x8>
		  osSemaphoreRelease(myBinarySem02Handle);	// pass to the next task
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <Interpret_CAN_Msg_Id1+0xa8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f006 f819 	bl	80076c0 <osSemaphoreRelease>
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800168e:	e7b5      	b.n	80015fc <Interpret_CAN_Msg_Id1+0x8>
 8001690:	200001ec 	.word	0x200001ec
 8001694:	20000284 	.word	0x20000284
 8001698:	20000000 	.word	0x20000000
 800169c:	200001f0 	.word	0x200001f0

080016a0 <Update_Stepper_Motor_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Stepper_Motor_Task */
void Update_Stepper_Motor_Task(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Stepper_Motor_Task */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem02Handle, osWaitForever);
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <Update_Stepper_Motor_Task+0x20>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 ffb3 	bl	800761c <osSemaphoreAcquire>
	  Update_Stepper_Motor_Operation();
 80016b6:	f7fe ffb7 	bl	8000628 <Update_Stepper_Motor_Operation>
	  osSemaphoreAcquire(myBinarySem02Handle, osWaitForever);
 80016ba:	bf00      	nop
 80016bc:	e7f4      	b.n	80016a8 <Update_Stepper_Motor_Task+0x8>
 80016be:	bf00      	nop
 80016c0:	200001f0 	.word	0x200001f0

080016c4 <Interpret_CAN_Msg_Id2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interpret_CAN_Msg_Id2 */
void Interpret_CAN_Msg_Id2(void *argument)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interpret_CAN_Msg_Id2 */
  uint8_t msg_correct_cnt;
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem03Handle, osWaitForever);
 80016cc:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <Interpret_CAN_Msg_Id2+0xf8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 ffa1 	bl	800761c <osSemaphoreAcquire>
	  // interpret here and fill up hstepmtr
	  msg_correct_cnt = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
	  
	  if(CAN_Rx_Data_Id2[0] <= TOFF_332TCLK)
 80016de:	4b38      	ldr	r3, [pc, #224]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d806      	bhi.n	80016f4 <Interpret_CAN_Msg_Id2+0x30>
	  {		msg_correct_cnt++; hstepmtr.standalone_cfg.chopper_off_time = CAN_Rx_Data_Id2[0];	}
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	3301      	adds	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	4b34      	ldr	r3, [pc, #208]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 80016f2:	711a      	strb	r2, [r3, #4]
	  
	  hstepmtr.standalone_cfg.chopper_mode = CAN_Rx_Data_Id2[1] & MODE_STEALTHCHOP;
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 8001700:	71da      	strb	r2, [r3, #7]
	  hstepmtr.standalone_cfg.interpolation = CAN_Rx_Data_Id2[1] & USE_INTERPOLATION;
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 800170e:	719a      	strb	r2, [r3, #6]
	  CAN_Rx_Data_Id2[1] &= (MICROSTEP_16 | QUARTERSTEP_4 | HALFSTEP_2 | FULLSTEP_1);
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	f003 0317 	and.w	r3, r3, #23
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 800171c:	705a      	strb	r2, [r3, #1]
	  if((CAN_Rx_Data_Id2[1] == MICROSTEP_16) || (CAN_Rx_Data_Id2[1] == QUARTERSTEP_4) || 
 800171e:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d00b      	beq.n	800173e <Interpret_CAN_Msg_Id2+0x7a>
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d007      	beq.n	800173e <Interpret_CAN_Msg_Id2+0x7a>
		 (CAN_Rx_Data_Id2[1] == HALFSTEP_2) || (CAN_Rx_Data_Id2[1] == FULLSTEP_1))
 800172e:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001730:	785b      	ldrb	r3, [r3, #1]
	  if((CAN_Rx_Data_Id2[1] == MICROSTEP_16) || (CAN_Rx_Data_Id2[1] == QUARTERSTEP_4) || 
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <Interpret_CAN_Msg_Id2+0x7a>
		 (CAN_Rx_Data_Id2[1] == HALFSTEP_2) || (CAN_Rx_Data_Id2[1] == FULLSTEP_1))
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001738:	785b      	ldrb	r3, [r3, #1]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d106      	bne.n	800174c <Interpret_CAN_Msg_Id2+0x88>
	  {		msg_correct_cnt++; hstepmtr.standalone_cfg.microstep_res = CAN_Rx_Data_Id2[1];	}
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	3301      	adds	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001746:	785a      	ldrb	r2, [r3, #1]
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 800174a:	715a      	strb	r2, [r3, #5]
	  
	  if(CAN_Rx_Data_Id2[2] <= EXT_SENSE_RES_SCALED_AIN)
 800174c:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d806      	bhi.n	8001762 <Interpret_CAN_Msg_Id2+0x9e>
	  {		msg_correct_cnt++; hstepmtr.standalone_cfg.current_setting = CAN_Rx_Data_Id2[2];	}
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3301      	adds	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 800175c:	789a      	ldrb	r2, [r3, #2]
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 8001760:	721a      	strb	r2, [r3, #8]
	  
	  if(CAN_Rx_Data_Id2[3] <= HYSTERESIS_END_13)
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d806      	bhi.n	8001778 <Interpret_CAN_Msg_Id2+0xb4>
	  {		msg_correct_cnt++; hstepmtr.standalone_cfg.chopper_hysteresis = CAN_Rx_Data_Id2[3];	}
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3301      	adds	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001772:	78da      	ldrb	r2, [r3, #3]
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 8001776:	725a      	strb	r2, [r3, #9]
	  
	  if(CAN_Rx_Data_Id2[4] <= BLANK_TIME_36)
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d806      	bhi.n	800178e <Interpret_CAN_Msg_Id2+0xca>
	  {		msg_correct_cnt++; hstepmtr.standalone_cfg.chopper_blank_time = CAN_Rx_Data_Id2[4];	}
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	3301      	adds	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001788:	791a      	ldrb	r2, [r3, #4]
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 800178c:	729a      	strb	r2, [r3, #10]
	  
	  hstepmtr.standalone_cfg.driver_enable = CAN_Rx_Data_Id2[5] & DRIVER_DISABLE;
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 8001790:	795b      	ldrb	r3, [r3, #5]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 800179a:	72da      	strb	r2, [r3, #11]
	  hstepmtr.standalone_cfg.standstill_pwr_down = CAN_Rx_Data_Id2[5] & STANDSTILL_ON;
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <Interpret_CAN_Msg_Id2+0xfc>)
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <Interpret_CAN_Msg_Id2+0x100>)
 80017a8:	731a      	strb	r2, [r3, #12]
	  
	  if(msg_correct_cnt > 0){
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d08d      	beq.n	80016cc <Interpret_CAN_Msg_Id2+0x8>
		  osSemaphoreRelease(myBinarySem04Handle);	// pass to the next task
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <Interpret_CAN_Msg_Id2+0x104>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 ff83 	bl	80076c0 <osSemaphoreRelease>
	  osSemaphoreAcquire(myBinarySem03Handle, osWaitForever);
 80017ba:	e787      	b.n	80016cc <Interpret_CAN_Msg_Id2+0x8>
 80017bc:	200001f4 	.word	0x200001f4
 80017c0:	2000028c 	.word	0x2000028c
 80017c4:	20000000 	.word	0x20000000
 80017c8:	200001f8 	.word	0x200001f8

080017cc <Update_Standalone_Op_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Standalone_Op_Task */
void Update_Standalone_Op_Task(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Standalone_Op_Task */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem04Handle, osWaitForever);
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <Update_Standalone_Op_Task+0x20>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 ff1d 	bl	800761c <osSemaphoreAcquire>
	  Update_Standalone_Configuration();
 80017e2:	f7ff f877 	bl	80008d4 <Update_Standalone_Configuration>
	  osSemaphoreAcquire(myBinarySem04Handle, osWaitForever);
 80017e6:	bf00      	nop
 80017e8:	e7f4      	b.n	80017d4 <Update_Standalone_Op_Task+0x8>
 80017ea:	bf00      	nop
 80017ec:	200001f8 	.word	0x200001f8

080017f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001802:	f000 facb 	bl	8001d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40001400 	.word	0x40001400

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <LL_GPIO_SetPinMode>:
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	@ 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	613b      	str	r3, [r7, #16]
  return result;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001846:	2320      	movs	r3, #32
 8001848:	e003      	b.n	8001852 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2103      	movs	r1, #3
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	401a      	ands	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	61fb      	str	r3, [r7, #28]
  return result;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001874:	2320      	movs	r3, #32
 8001876:	e003      	b.n	8001880 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	372c      	adds	r7, #44	@ 0x2c
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a6:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_MspInit+0x4c>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	210f      	movs	r1, #15
 80018d6:	f06f 0001 	mvn.w	r0, #1
 80018da:	f001 f9ef 	bl	8002cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a20      	ldr	r2, [pc, #128]	@ (800198c <HAL_CAN_MspInit+0xa0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d139      	bne.n	8001982 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_CAN_MspInit+0xa4>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <HAL_CAN_MspInit+0xa4>)
 8001914:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001918:	6593      	str	r3, [r2, #88]	@ 0x58
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_CAN_MspInit+0xa4>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_CAN_MspInit+0xa4>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_CAN_MspInit+0xa4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <HAL_CAN_MspInit+0xa4>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800193e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001950:	2309      	movs	r3, #9
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195e:	f001 fba7 	bl	80030b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2106      	movs	r1, #6
 8001966:	2014      	movs	r0, #20
 8001968:	f001 f9a8 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800196c:	2014      	movs	r0, #20
 800196e:	f001 f9c1 	bl	8002cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2106      	movs	r1, #6
 8001976:	2015      	movs	r0, #21
 8001978:	f001 f9a0 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800197c:	2015      	movs	r0, #21
 800197e:	f001 f9b9 	bl	8002cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	@ 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40006400 	.word	0x40006400
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a15      	ldr	r2, [pc, #84]	@ (8001a08 <HAL_DAC_MspInit+0x74>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d124      	bne.n	8001a00 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_DAC_MspInit+0x78>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_DAC_MspInit+0x78>)
 80019bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_DAC_MspInit+0x78>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_DAC_MspInit+0x78>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <HAL_DAC_MspInit+0x78>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <HAL_DAC_MspInit+0x78>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019e6:	2310      	movs	r3, #16
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ea:	2303      	movs	r3, #3
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fc:	f001 fb58 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40007400 	.word	0x40007400
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a20:	d10b      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_TIM_Base_MspInit+0x38>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_TIM_Base_MspInit+0x38>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_TIM_Base_MspInit+0x38>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a6c:	d122      	bne.n	8001ab4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_TIM_MspPostInit+0x70>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <HAL_TIM_MspPostInit+0x70>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <HAL_TIM_MspPostInit+0x70>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <HAL_TIM_MspPostInit+0x74>)
 8001aa4:	f001 fb04 	bl	80030b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */
	LL_GPIO_SetPinMode(STEP_GPIO_Port, STEP_Pin, LL_GPIO_MODE_OUTPUT);	// to make it initially output a 0 (because PWM hasn't started yet)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aae:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <HAL_TIM_MspPostInit+0x74>)
 8001ab0:	f7ff feb6 	bl	8001820 <LL_GPIO_SetPinMode>
  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000400 	.word	0x48000400

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2288      	movs	r2, #136	@ 0x88
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f008 ff07 	bl	800a8f8 <memset>
  if(huart->Instance==USART2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <HAL_UART_MspInit+0xb0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d13b      	bne.n	8001b6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fb25 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b0c:	f7ff fe82 	bl	8001814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_UART_MspInit+0xb4>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_UART_MspInit+0xb4>)
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_UART_MspInit+0xb4>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_UART_MspInit+0xb4>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <HAL_UART_MspInit+0xb4>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_UART_MspInit+0xb4>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b40:	230c      	movs	r3, #12
 8001b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b68:	f001 faa2 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	37b0      	adds	r7, #176	@ 0xb0
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40004400 	.word	0x40004400
 8001b78:	40021000 	.word	0x40021000

08001b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	@ 0x38
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <HAL_InitTick+0xe0>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	4a33      	ldr	r2, [pc, #204]	@ (8001c5c <HAL_InitTick+0xe0>)
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b96:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_InitTick+0xe0>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ba2:	f107 0210 	add.w	r2, r7, #16
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fa3d 	bl	800402c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bbc:	f002 fa0a 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8001bc2:	e004      	b.n	8001bce <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bc4:	f002 fa06 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd0:	4a23      	ldr	r2, [pc, #140]	@ (8001c60 <HAL_InitTick+0xe4>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001bde:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_InitTick+0xec>)
 8001be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001be2:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001be4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001be8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001bea:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001c02:	4818      	ldr	r0, [pc, #96]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001c04:	f002 ff70 	bl	8004ae8 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11b      	bne.n	8001c4e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001c16:	4813      	ldr	r0, [pc, #76]	@ (8001c64 <HAL_InitTick+0xe8>)
 8001c18:	f002 ffbe 	bl	8004b98 <HAL_TIM_Base_Start_IT>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d111      	bne.n	8001c4e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c2a:	2037      	movs	r0, #55	@ 0x37
 8001c2c:	f001 f862 	bl	8002cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	d808      	bhi.n	8001c48 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001c36:	2200      	movs	r2, #0
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	2037      	movs	r0, #55	@ 0x37
 8001c3c:	f001 f83e 	bl	8002cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_InitTick+0xf0>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e002      	b.n	8001c4e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3738      	adds	r7, #56	@ 0x38
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	431bde83 	.word	0x431bde83
 8001c64:	20000294 	.word	0x20000294
 8001c68:	40001400 	.word	0x40001400
 8001c6c:	20000014 	.word	0x20000014

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <NMI_Handler+0x4>

08001c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <MemManage_Handler+0x4>

08001c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <CAN1_RX0_IRQHandler+0x10>)
 8001cae:	f000 fd05 	bl	80026bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000008c 	.word	0x2000008c

08001cbc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <CAN1_RX1_IRQHandler+0x10>)
 8001cc2:	f000 fcfb 	bl	80026bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000008c 	.word	0x2000008c

08001cd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <TIM7_IRQHandler+0x10>)
 8001cd6:	f003 f9cd 	bl	8005074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000294 	.word	0x20000294

08001ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	@ (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d36:	f008 fe3d 	bl	800a9b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff f8c7 	bl	8000ecc <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d4c:	0800acd0 	.word	0x0800acd0
  ldr r2, =_sbss
 8001d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d54:	200021ac 	.word	0x200021ac

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_Init+0x3c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <HAL_Init+0x3c>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d72:	2003      	movs	r0, #3
 8001d74:	f000 ff97 	bl	8002ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f7ff feff 	bl	8001b7c <HAL_InitTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	e001      	b.n	8001d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8a:	f7ff fd87 	bl	800189c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000018 	.word	0x20000018
 8001dc0:	200002e0 	.word	0x200002e0

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200002e0 	.word	0x200002e0

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000018 	.word	0x20000018

08001e24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e11c      	b.n	8002070 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d131      	bne.n	8001ea6 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a8c      	ldr	r2, [pc, #560]	@ (8002078 <HAL_CAN_Init+0x254>)
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a8c      	ldr	r2, [pc, #560]	@ (800207c <HAL_CAN_Init+0x258>)
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a8b      	ldr	r2, [pc, #556]	@ (8002080 <HAL_CAN_Init+0x25c>)
 8001e52:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a8b      	ldr	r2, [pc, #556]	@ (8002084 <HAL_CAN_Init+0x260>)
 8001e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a8a      	ldr	r2, [pc, #552]	@ (8002088 <HAL_CAN_Init+0x264>)
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a8a      	ldr	r2, [pc, #552]	@ (800208c <HAL_CAN_Init+0x268>)
 8001e64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a89      	ldr	r2, [pc, #548]	@ (8002090 <HAL_CAN_Init+0x26c>)
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a89      	ldr	r2, [pc, #548]	@ (8002094 <HAL_CAN_Init+0x270>)
 8001e70:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a88      	ldr	r2, [pc, #544]	@ (8002098 <HAL_CAN_Init+0x274>)
 8001e76:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a88      	ldr	r2, [pc, #544]	@ (800209c <HAL_CAN_Init+0x278>)
 8001e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a87      	ldr	r2, [pc, #540]	@ (80020a0 <HAL_CAN_Init+0x27c>)
 8001e82:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a87      	ldr	r2, [pc, #540]	@ (80020a4 <HAL_CAN_Init+0x280>)
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a86      	ldr	r2, [pc, #536]	@ (80020a8 <HAL_CAN_Init+0x284>)
 8001e8e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a84      	ldr	r2, [pc, #528]	@ (80020ac <HAL_CAN_Init+0x288>)
 8001e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb6:	f7ff ff85 	bl	8001dc4 <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ebc:	e012      	b.n	8001ee4 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ebe:	f7ff ff81 	bl	8001dc4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b0a      	cmp	r3, #10
 8001eca:	d90b      	bls.n	8001ee4 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2205      	movs	r2, #5
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0c5      	b.n	8002070 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0e5      	beq.n	8001ebe <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0202 	bic.w	r2, r2, #2
 8001f00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7ff ff5f 	bl	8001dc4 <HAL_GetTick>
 8001f06:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f08:	e012      	b.n	8001f30 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f0a:	f7ff ff5b 	bl	8001dc4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b0a      	cmp	r3, #10
 8001f16:	d90b      	bls.n	8001f30 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2205      	movs	r2, #5
 8001f28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e09f      	b.n	8002070 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1e5      	bne.n	8001f0a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e007      	b.n	8001f68 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7e5b      	ldrb	r3, [r3, #25]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d108      	bne.n	8001f82 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e007      	b.n	8001f92 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7e9b      	ldrb	r3, [r3, #26]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d108      	bne.n	8001fac <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0220 	orr.w	r2, r2, #32
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e007      	b.n	8001fbc <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0220 	bic.w	r2, r2, #32
 8001fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7edb      	ldrb	r3, [r3, #27]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d108      	bne.n	8001fd6 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0210 	bic.w	r2, r2, #16
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e007      	b.n	8001fe6 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0210 	orr.w	r2, r2, #16
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7f1b      	ldrb	r3, [r3, #28]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e007      	b.n	8002010 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0208 	bic.w	r2, r2, #8
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7f5b      	ldrb	r3, [r3, #29]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d108      	bne.n	800202a <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0204 	orr.w	r2, r2, #4
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e007      	b.n	800203a <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0204 	bic.w	r2, r2, #4
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	ea42 0103 	orr.w	r1, r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	08002abf 	.word	0x08002abf
 800207c:	08002ad3 	.word	0x08002ad3
 8002080:	08002ae7 	.word	0x08002ae7
 8002084:	08002afb 	.word	0x08002afb
 8002088:	08002a47 	.word	0x08002a47
 800208c:	08002a5b 	.word	0x08002a5b
 8002090:	08002a6f 	.word	0x08002a6f
 8002094:	08002a83 	.word	0x08002a83
 8002098:	08002a97 	.word	0x08002a97
 800209c:	08002aab 	.word	0x08002aab
 80020a0:	08002b0f 	.word	0x08002b0f
 80020a4:	08002b23 	.word	0x08002b23
 80020a8:	08002b37 	.word	0x08002b37
 80020ac:	080018ed 	.word	0x080018ed

080020b0 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	460b      	mov	r3, r1
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e094      	b.n	8002202 <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d168      	bne.n	80021b6 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	2b0e      	cmp	r3, #14
 80020e8:	d85c      	bhi.n	80021a4 <HAL_CAN_RegisterCallback+0xf4>
 80020ea:	a201      	add	r2, pc, #4	@ (adr r2, 80020f0 <HAL_CAN_RegisterCallback+0x40>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	0800212d 	.word	0x0800212d
 80020f4:	08002135 	.word	0x08002135
 80020f8:	0800213d 	.word	0x0800213d
 80020fc:	08002145 	.word	0x08002145
 8002100:	0800214d 	.word	0x0800214d
 8002104:	08002155 	.word	0x08002155
 8002108:	0800215d 	.word	0x0800215d
 800210c:	08002165 	.word	0x08002165
 8002110:	0800216d 	.word	0x0800216d
 8002114:	08002175 	.word	0x08002175
 8002118:	0800217d 	.word	0x0800217d
 800211c:	08002185 	.word	0x08002185
 8002120:	0800218d 	.word	0x0800218d
 8002124:	08002195 	.word	0x08002195
 8002128:	0800219d 	.word	0x0800219d
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8002132:	e065      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800213a:	e061      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8002142:	e05d      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800214a:	e059      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8002152:	e055      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800215a:	e051      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8002162:	e04d      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 800216a:	e049      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8002172:	e045      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800217a:	e041      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8002182:	e03d      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800218a:	e039      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8002192:	e035      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800219a:	e031      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80021a2:	e02d      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
        break;
 80021b4:	e024      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	2b0d      	cmp	r3, #13
 80021c6:	d002      	beq.n	80021ce <HAL_CAN_RegisterCallback+0x11e>
 80021c8:	2b0e      	cmp	r3, #14
 80021ca:	d004      	beq.n	80021d6 <HAL_CAN_RegisterCallback+0x126>
 80021cc:	e007      	b.n	80021de <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80021d4:	e014      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80021dc:	e010      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
        break;
 80021ee:	e007      	b.n	8002200 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status =  HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002200:	7dfb      	ldrb	r3, [r7, #23]
}
 8002202:	4618      	mov	r0, r3
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop

08002210 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002226:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d003      	beq.n	8002236 <HAL_CAN_ConfigFilter+0x26>
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f040 80aa 	bne.w	800238a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2201      	movs	r2, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	401a      	ands	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d123      	bne.n	80022b8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002292:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3248      	adds	r2, #72	@ 0x48
 8002298:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	3348      	adds	r3, #72	@ 0x48
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d122      	bne.n	8002306 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3248      	adds	r2, #72	@ 0x48
 80022e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022fc:	6979      	ldr	r1, [r7, #20]
 80022fe:	3348      	adds	r3, #72	@ 0x48
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002320:	e007      	b.n	8002332 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	431a      	orrs	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	401a      	ands	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800234c:	e007      	b.n	800235e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	431a      	orrs	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	431a      	orrs	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800237c:	f023 0201 	bic.w	r2, r3, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e006      	b.n	8002398 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d12e      	bne.n	8002416 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023d0:	f7ff fcf8 	bl	8001dc4 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023d6:	e012      	b.n	80023fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d8:	f7ff fcf4 	bl	8001dc4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b0a      	cmp	r3, #10
 80023e4:	d90b      	bls.n	80023fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2205      	movs	r2, #5
 80023f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e012      	b.n	8002424 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e5      	bne.n	80023d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e006      	b.n	8002424 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002440:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d003      	beq.n	8002450 <HAL_CAN_GetRxMessage+0x24>
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b02      	cmp	r3, #2
 800244c:	f040 8103 	bne.w	8002656 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d116      	bne.n	8002492 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0f7      	b.n	8002664 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0e8      	b.n	8002664 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	331b      	adds	r3, #27
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	4413      	add	r3, r2
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0204 	and.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10c      	bne.n	80024ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	331b      	adds	r3, #27
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	4413      	add	r3, r2
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0d5b      	lsrs	r3, r3, #21
 80024c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e00b      	b.n	80024e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	331b      	adds	r3, #27
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	331b      	adds	r3, #27
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0202 	and.w	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	331b      	adds	r3, #27
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2208      	movs	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e00b      	b.n	8002530 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	331b      	adds	r3, #27
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	331b      	adds	r3, #27
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	b2da      	uxtb	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	331b      	adds	r3, #27
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0a1a      	lsrs	r2, r3, #8
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4413      	add	r3, r2
 800259a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0c1a      	lsrs	r2, r3, #16
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	3302      	adds	r3, #2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e1a      	lsrs	r2, r3, #24
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3303      	adds	r3, #3
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3304      	adds	r3, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0a1a      	lsrs	r2, r3, #8
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3305      	adds	r3, #5
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	4413      	add	r3, r2
 8002600:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0c1a      	lsrs	r2, r3, #16
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	3306      	adds	r3, #6
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e1a      	lsrs	r2, r3, #24
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3307      	adds	r3, #7
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	e007      	b.n	8002652 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e006      	b.n	8002664 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d002      	beq.n	800268e <HAL_CAN_ActivateNotification+0x1e>
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d109      	bne.n	80026a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6959      	ldr	r1, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e006      	b.n	80026b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	@ 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8083 	beq.w	800280a <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d025      	beq.n	800275a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
 8002728:	e017      	b.n	800275a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
 800273c:	e00d      	b.n	800275a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002750:	e003      	b.n	800275a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d026      	beq.n	80027b2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800276c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e017      	b.n	80027b2 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
 8002794:	e00d      	b.n	80027b2 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027a8:	e003      	b.n	80027b2 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d026      	beq.n	800280a <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
 80027d8:	e017      	b.n	800280a <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ec:	e00d      	b.n	800280a <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002800:	e003      	b.n	800280a <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2210      	movs	r2, #16
 800282c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00c      	beq.n	8002852 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2210      	movs	r2, #16
 8002894:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2208      	movs	r2, #8
 80028b0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2208      	movs	r2, #8
 8002918:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d07b      	beq.n	8002a24 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d072      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002990:	2b00      	cmp	r3, #0
 8002992:	d043      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03e      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029a4:	2b60      	cmp	r3, #96	@ 0x60
 80029a6:	d02b      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x344>
 80029a8:	2b60      	cmp	r3, #96	@ 0x60
 80029aa:	d82e      	bhi.n	8002a0a <HAL_CAN_IRQHandler+0x34e>
 80029ac:	2b50      	cmp	r3, #80	@ 0x50
 80029ae:	d022      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x33a>
 80029b0:	2b50      	cmp	r3, #80	@ 0x50
 80029b2:	d82a      	bhi.n	8002a0a <HAL_CAN_IRQHandler+0x34e>
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d019      	beq.n	80029ec <HAL_CAN_IRQHandler+0x330>
 80029b8:	2b40      	cmp	r3, #64	@ 0x40
 80029ba:	d826      	bhi.n	8002a0a <HAL_CAN_IRQHandler+0x34e>
 80029bc:	2b30      	cmp	r3, #48	@ 0x30
 80029be:	d010      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x326>
 80029c0:	2b30      	cmp	r3, #48	@ 0x30
 80029c2:	d822      	bhi.n	8002a0a <HAL_CAN_IRQHandler+0x34e>
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d002      	beq.n	80029ce <HAL_CAN_IRQHandler+0x312>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d005      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029cc:	e01d      	b.n	8002a0a <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	f043 0308 	orr.w	r3, r3, #8
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029d6:	e019      	b.n	8002a0c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	f043 0310 	orr.w	r3, r3, #16
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029e0:	e014      	b.n	8002a0c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f043 0320 	orr.w	r3, r3, #32
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ea:	e00f      	b.n	8002a0c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029f4:	e00a      	b.n	8002a0c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029fe:	e005      	b.n	8002a0c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a08:	e000      	b.n	8002a0c <HAL_CAN_IRQHandler+0x350>
            break;
 8002a0a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a1a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2204      	movs	r2, #4
 8002a22:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	@ 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	@ (8002be8 <__NVIC_EnableIRQ+0x38>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	@ (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	@ (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
         );
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	@ 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff4c 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cce:	f7ff ff61 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f7ff ffb1 	bl	8002c40 <NVIC_EncodePriority>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff80 	bl	8002bec <__NVIC_SetPriority>
}
 8002cec:	bf00      	nop
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff54 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e014      	b.n	8002d4c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fe2e 	bl	8001994 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	795b      	ldrb	r3, [r3, #5]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_DAC_Start+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e03b      	b.n	8002de2 <HAL_DAC_Start+0x8e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d118      	bne.n	8002dd4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e00f      	b.n	8002dd4 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002dbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0202 	orr.w	r2, r2, #2
 8002dd2:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b087      	sub	sp, #28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	3308      	adds	r3, #8
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e004      	b.n	8002e22 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3314      	adds	r3, #20
 8002e20:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	e002      	b.n	8002e56 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	795b      	ldrb	r3, [r3, #5]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_DAC_ConfigChannel+0x1c>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e114      	b.n	80030a8 <HAL_DAC_ConfigChannel+0x246>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	f040 8081 	bne.w	8002f96 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e94:	f7fe ff96 	bl	8001dc4 <HAL_GetTick>
 8002e98:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d140      	bne.n	8002f22 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ea0:	e018      	b.n	8002ed4 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ea2:	f7fe ff8f 	bl	8001dc4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d911      	bls.n	8002ed4 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f043 0208 	orr.w	r2, r3, #8
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0e9      	b.n	80030a8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1df      	bne.n	8002ea2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7fe ff7a 	bl	8001ddc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	6992      	ldr	r2, [r2, #24]
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ef2:	e023      	b.n	8002f3c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ef4:	f7fe ff66 	bl	8001dc4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d90f      	bls.n	8002f22 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da0a      	bge.n	8002f22 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f043 0208 	orr.w	r2, r3, #8
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0c2      	b.n	80030a8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	dbe3      	blt.n	8002ef4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f7fe ff55 	bl	8001ddc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	6992      	ldr	r2, [r2, #24]
 8002f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	ea02 0103 	and.w	r1, r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	21ff      	movs	r1, #255	@ 0xff
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	ea02 0103 	and.w	r1, r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d11d      	bne.n	8002fda <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	221f      	movs	r2, #31
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2207      	movs	r2, #7
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	400a      	ands	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	22c0      	movs	r2, #192	@ 0xc0
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43da      	mvns	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030be:	e17f      	b.n	80033c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8171 	beq.w	80033ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d005      	beq.n	80030f0 <HAL_GPIO_Init+0x40>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d130      	bne.n	8003152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003126:	2201      	movs	r2, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0201 	and.w	r2, r3, #1
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b03      	cmp	r3, #3
 800315c:	d118      	bne.n	8003190 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003164:	2201      	movs	r2, #1
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	f003 0201 	and.w	r2, r3, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b03      	cmp	r3, #3
 800319a:	d017      	beq.n	80031cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d123      	bne.n	8003220 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	6939      	ldr	r1, [r7, #16]
 800321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80ac 	beq.w	80033ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	4b5f      	ldr	r3, [pc, #380]	@ (80033e0 <HAL_GPIO_Init+0x330>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003266:	4a5e      	ldr	r2, [pc, #376]	@ (80033e0 <HAL_GPIO_Init+0x330>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6613      	str	r3, [r2, #96]	@ 0x60
 800326e:	4b5c      	ldr	r3, [pc, #368]	@ (80033e0 <HAL_GPIO_Init+0x330>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800327a:	4a5a      	ldr	r2, [pc, #360]	@ (80033e4 <HAL_GPIO_Init+0x334>)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	3302      	adds	r3, #2
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032a4:	d025      	beq.n	80032f2 <HAL_GPIO_Init+0x242>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	@ (80033e8 <HAL_GPIO_Init+0x338>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01f      	beq.n	80032ee <HAL_GPIO_Init+0x23e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <HAL_GPIO_Init+0x33c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4d      	ldr	r2, [pc, #308]	@ (80033f0 <HAL_GPIO_Init+0x340>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x236>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	@ (80033f4 <HAL_GPIO_Init+0x344>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x232>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	@ (80033f8 <HAL_GPIO_Init+0x348>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x22e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4a      	ldr	r2, [pc, #296]	@ (80033fc <HAL_GPIO_Init+0x34c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x22a>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e00c      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032da:	2307      	movs	r3, #7
 80032dc:	e00a      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032de:	2305      	movs	r3, #5
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x244>
 80032f2:	2300      	movs	r3, #0
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003304:	4937      	ldr	r1, [pc, #220]	@ (80033e4 <HAL_GPIO_Init+0x334>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_GPIO_Init+0x350>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003336:	4a32      	ldr	r2, [pc, #200]	@ (8003400 <HAL_GPIO_Init+0x350>)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800333c:	4b30      	ldr	r3, [pc, #192]	@ (8003400 <HAL_GPIO_Init+0x350>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003360:	4a27      	ldr	r2, [pc, #156]	@ (8003400 <HAL_GPIO_Init+0x350>)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003366:	4b26      	ldr	r3, [pc, #152]	@ (8003400 <HAL_GPIO_Init+0x350>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_GPIO_Init+0x350>)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003390:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_GPIO_Init+0x350>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <HAL_GPIO_Init+0x350>)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f47f ae78 	bne.w	80030c0 <HAL_GPIO_Init+0x10>
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40010000 	.word	0x40010000
 80033e8:	48000400 	.word	0x48000400
 80033ec:	48000800 	.word	0x48000800
 80033f0:	48000c00 	.word	0x48000c00
 80033f4:	48001000 	.word	0x48001000
 80033f8:	48001400 	.word	0x48001400
 80033fc:	48001800 	.word	0x48001800
 8003400:	40010400 	.word	0x40010400

08003404 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40007000 	.word	0x40007000

08003424 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <HAL_PWREx_GetVoltageRange+0x18>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40007000 	.word	0x40007000

08003440 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344e:	d130      	bne.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003450:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800345c:	d038      	beq.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003466:	4a1e      	ldr	r2, [pc, #120]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003468:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800346e:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2232      	movs	r2, #50	@ 0x32
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	4a1b      	ldr	r2, [pc, #108]	@ (80034e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0c9b      	lsrs	r3, r3, #18
 8003480:	3301      	adds	r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003484:	e002      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b01      	subs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348c:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003498:	d102      	bne.n	80034a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f2      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ac:	d110      	bne.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e00f      	b.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034be:	d007      	beq.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034c0:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034c8:	4a05      	ldr	r2, [pc, #20]	@ (80034e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000
 80034e4:	20000010 	.word	0x20000010
 80034e8:	431bde83 	.word	0x431bde83

080034ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e3ca      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fe:	4b97      	ldr	r3, [pc, #604]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003508:	4b94      	ldr	r3, [pc, #592]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80e4 	beq.w	80036e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_RCC_OscConfig+0x4a>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	f040 808b 	bne.w	8003644 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b01      	cmp	r3, #1
 8003532:	f040 8087 	bne.w	8003644 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003536:	4b89      	ldr	r3, [pc, #548]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_RCC_OscConfig+0x62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e3a2      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	4b82      	ldr	r3, [pc, #520]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_RCC_OscConfig+0x7c>
 800355e:	4b7f      	ldr	r3, [pc, #508]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003566:	e005      	b.n	8003574 <HAL_RCC_OscConfig+0x88>
 8003568:	4b7c      	ldr	r3, [pc, #496]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003574:	4293      	cmp	r3, r2
 8003576:	d223      	bcs.n	80035c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fd87 	bl	8004090 <RCC_SetFlashLatencyFromMSIRange>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e383      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800358c:	4b73      	ldr	r3, [pc, #460]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a72      	ldr	r2, [pc, #456]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b70      	ldr	r3, [pc, #448]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	496d      	ldr	r1, [pc, #436]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035aa:	4b6c      	ldr	r3, [pc, #432]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4968      	ldr	r1, [pc, #416]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
 80035be:	e025      	b.n	800360c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c0:	4b66      	ldr	r3, [pc, #408]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a65      	ldr	r2, [pc, #404]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b63      	ldr	r3, [pc, #396]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4960      	ldr	r1, [pc, #384]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035de:	4b5f      	ldr	r3, [pc, #380]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	495b      	ldr	r1, [pc, #364]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fd47 	bl	8004090 <RCC_SetFlashLatencyFromMSIRange>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e343      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800360c:	f000 fc4a 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b52      	ldr	r3, [pc, #328]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	4950      	ldr	r1, [pc, #320]	@ (8003760 <HAL_RCC_OscConfig+0x274>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	4a4e      	ldr	r2, [pc, #312]	@ (8003764 <HAL_RCC_OscConfig+0x278>)
 800362a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800362c:	4b4e      	ldr	r3, [pc, #312]	@ (8003768 <HAL_RCC_OscConfig+0x27c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe faa3 	bl	8001b7c <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d052      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	e327      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d032      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a42      	ldr	r2, [pc, #264]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003658:	f7fe fbb4 	bl	8001dc4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003660:	f7fe fbb0 	bl	8001dc4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e310      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003672:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800367e:	4b37      	ldr	r3, [pc, #220]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a36      	ldr	r2, [pc, #216]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b34      	ldr	r3, [pc, #208]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4931      	ldr	r1, [pc, #196]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369c:	4b2f      	ldr	r3, [pc, #188]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	492c      	ldr	r1, [pc, #176]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
 80036b0:	e01a      	b.n	80036e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036b2:	4b2a      	ldr	r3, [pc, #168]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036be:	f7fe fb81 	bl	8001dc4 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036c6:	f7fe fb7d 	bl	8001dc4 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e2dd      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036d8:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x1da>
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d074      	beq.n	80037de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x21a>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d10e      	bne.n	800371e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d10b      	bne.n	800371e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003706:	4b15      	ldr	r3, [pc, #84]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d064      	beq.n	80037dc <HAL_RCC_OscConfig+0x2f0>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d160      	bne.n	80037dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e2ba      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x24a>
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e026      	b.n	8003784 <HAL_RCC_OscConfig+0x298>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373e:	d115      	bne.n	800376c <HAL_RCC_OscConfig+0x280>
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a05      	ldr	r2, [pc, #20]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003746:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b03      	ldr	r3, [pc, #12]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a02      	ldr	r2, [pc, #8]	@ (800375c <HAL_RCC_OscConfig+0x270>)
 8003752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	e014      	b.n	8003784 <HAL_RCC_OscConfig+0x298>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	0800ac78 	.word	0x0800ac78
 8003764:	20000010 	.word	0x20000010
 8003768:	20000014 	.word	0x20000014
 800376c:	4ba0      	ldr	r3, [pc, #640]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a9f      	ldr	r2, [pc, #636]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b9d      	ldr	r3, [pc, #628]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a9c      	ldr	r2, [pc, #624]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 800377e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fb1a 	bl	8001dc4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003794:	f7fe fb16 	bl	8001dc4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	@ 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e276      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a6:	4b92      	ldr	r3, [pc, #584]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x2a8>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fb06 	bl	8001dc4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe fb02 	bl	8001dc4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	@ 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e262      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ce:	4b88      	ldr	r3, [pc, #544]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x2d0>
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d060      	beq.n	80038ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_OscConfig+0x310>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d119      	bne.n	800382a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d116      	bne.n	800382a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fc:	4b7c      	ldr	r3, [pc, #496]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_OscConfig+0x328>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e23f      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	4973      	ldr	r1, [pc, #460]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003828:	e040      	b.n	80038ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d023      	beq.n	800387a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003832:	4b6f      	ldr	r3, [pc, #444]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6e      	ldr	r2, [pc, #440]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fac1 	bl	8001dc4 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003846:	f7fe fabd 	bl	8001dc4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e21d      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003858:	4b65      	ldr	r3, [pc, #404]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003864:	4b62      	ldr	r3, [pc, #392]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	495f      	ldr	r1, [pc, #380]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
 8003878:	e018      	b.n	80038ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387a:	4b5d      	ldr	r3, [pc, #372]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5c      	ldr	r2, [pc, #368]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe fa9d 	bl	8001dc4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fe fa99 	bl	8001dc4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1f9      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a0:	4b53      	ldr	r3, [pc, #332]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d03c      	beq.n	8003932 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01c      	beq.n	80038fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c0:	4b4b      	ldr	r3, [pc, #300]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c6:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fe fa78 	bl	8001dc4 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fe fa74 	bl	8001dc4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1d4      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ea:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ef      	beq.n	80038d8 <HAL_RCC_OscConfig+0x3ec>
 80038f8:	e01b      	b.n	8003932 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fa:	4b3d      	ldr	r3, [pc, #244]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003900:	4a3b      	ldr	r2, [pc, #236]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fe fa5b 	bl	8001dc4 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003912:	f7fe fa57 	bl	8001dc4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1b7      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003924:	4b32      	ldr	r3, [pc, #200]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ef      	bne.n	8003912 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a6 	beq.w	8003a8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003944:	4b2a      	ldr	r3, [pc, #168]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	4a26      	ldr	r2, [pc, #152]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395a:	6593      	str	r3, [r2, #88]	@ 0x58
 800395c:	4b24      	ldr	r3, [pc, #144]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003968:	2301      	movs	r3, #1
 800396a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <HAL_RCC_OscConfig+0x508>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d118      	bne.n	80039aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003978:	4b1e      	ldr	r3, [pc, #120]	@ (80039f4 <HAL_RCC_OscConfig+0x508>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <HAL_RCC_OscConfig+0x508>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003984:	f7fe fa1e 	bl	8001dc4 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fe fa1a 	bl	8001dc4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e17a      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <HAL_RCC_OscConfig+0x508>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d108      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4d8>
 80039b2:	4b0f      	ldr	r3, [pc, #60]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b8:	4a0d      	ldr	r2, [pc, #52]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039c2:	e029      	b.n	8003a18 <HAL_RCC_OscConfig+0x52c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d115      	bne.n	80039f8 <HAL_RCC_OscConfig+0x50c>
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a07      	ldr	r2, [pc, #28]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e2:	4a03      	ldr	r2, [pc, #12]	@ (80039f0 <HAL_RCC_OscConfig+0x504>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ec:	e014      	b.n	8003a18 <HAL_RCC_OscConfig+0x52c>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
 80039f8:	4b9c      	ldr	r3, [pc, #624]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	4a9b      	ldr	r2, [pc, #620]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a08:	4b98      	ldr	r3, [pc, #608]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	4a97      	ldr	r2, [pc, #604]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d016      	beq.n	8003a4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe f9d0 	bl	8001dc4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fe f9cc 	bl	8001dc4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e12a      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ed      	beq.n	8003a28 <HAL_RCC_OscConfig+0x53c>
 8003a4c:	e015      	b.n	8003a7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe f9b9 	bl	8001dc4 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe f9b5 	bl	8001dc4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e113      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ed      	bne.n	8003a56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b7a      	ldr	r3, [pc, #488]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	4a79      	ldr	r2, [pc, #484]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80fe 	beq.w	8003c92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	f040 80d0 	bne.w	8003c40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003aa0:	4b72      	ldr	r3, [pc, #456]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d130      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d127      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11f      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ae0:	2a07      	cmp	r2, #7
 8003ae2:	bf14      	ite	ne
 8003ae4:	2201      	movne	r2, #1
 8003ae6:	2200      	moveq	r2, #0
 8003ae8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d113      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d06e      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d069      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b1c:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b28:	4b50      	ldr	r3, [pc, #320]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0ad      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b38:	4b4c      	ldr	r3, [pc, #304]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b44:	f7fe f93e 	bl	8001dc4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fe f93a 	bl	8001dc4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e09a      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5e:	4b43      	ldr	r3, [pc, #268]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6a:	4b40      	ldr	r3, [pc, #256]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4b40      	ldr	r3, [pc, #256]	@ (8003c70 <HAL_RCC_OscConfig+0x784>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b84:	0212      	lsls	r2, r2, #8
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b8c:	0852      	lsrs	r2, r2, #1
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	0552      	lsls	r2, r2, #21
 8003b92:	4311      	orrs	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b98:	0852      	lsrs	r2, r2, #1
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0652      	lsls	r2, r2, #25
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ba4:	0912      	lsrs	r2, r2, #4
 8003ba6:	0452      	lsls	r2, r2, #17
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	4930      	ldr	r1, [pc, #192]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc8:	f7fe f8fc 	bl	8001dc4 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe f8f8 	bl	8001dc4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e058      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	4b22      	ldr	r3, [pc, #136]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bee:	e050      	b.n	8003c92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e04f      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d148      	bne.n	8003c92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c18:	f7fe f8d4 	bl	8001dc4 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fe f8d0 	bl	8001dc4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e030      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c32:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x734>
 8003c3e:	e028      	b.n	8003c92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d023      	beq.n	8003c8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_RCC_OscConfig+0x780>)
 8003c4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fe f8b7 	bl	8001dc4 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	e00c      	b.n	8003c74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe f8b3 	bl	8001dc4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d905      	bls.n	8003c74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e013      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_OscConfig+0x7b0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ec      	bne.n	8003c5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c80:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <HAL_RCC_OscConfig+0x7b0>)
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	4905      	ldr	r1, [pc, #20]	@ (8003c9c <HAL_RCC_OscConfig+0x7b0>)
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCC_OscConfig+0x7b4>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
 8003c8c:	e001      	b.n	8003c92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	feeefffc 	.word	0xfeeefffc

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0e7      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b75      	ldr	r3, [pc, #468]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d910      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b72      	ldr	r3, [pc, #456]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4970      	ldr	r1, [pc, #448]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0cf      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d908      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b63      	ldr	r3, [pc, #396]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4960      	ldr	r1, [pc, #384]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d04c      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d121      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0a6      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d42:	4b54      	ldr	r3, [pc, #336]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e09a      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e08e      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e086      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b46      	ldr	r3, [pc, #280]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4943      	ldr	r1, [pc, #268]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d8c:	f7fe f81a 	bl	8001dc4 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fe f816 	bl	8001dc4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e06e      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b3a      	ldr	r3, [pc, #232]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d208      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	492b      	ldr	r1, [pc, #172]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dea:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d210      	bcs.n	8003e1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df8:	4b25      	ldr	r3, [pc, #148]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 0207 	bic.w	r2, r3, #7
 8003e00:	4923      	ldr	r1, [pc, #140]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e08:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e036      	b.n	8003e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e26:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4918      	ldr	r1, [pc, #96]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4910      	ldr	r1, [pc, #64]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e58:	f000 f824 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	490b      	ldr	r1, [pc, #44]	@ (8003e98 <HAL_RCC_ClockConfig+0x1f4>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	4a09      	ldr	r2, [pc, #36]	@ (8003e9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1fc>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fe7d 	bl	8001b7c <HAL_InitTick>
 8003e82:	4603      	mov	r3, r0
 8003e84:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e86:	7afb      	ldrb	r3, [r7, #11]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40022000 	.word	0x40022000
 8003e94:	40021000 	.word	0x40021000
 8003e98:	0800ac78 	.word	0x0800ac78
 8003e9c:	20000010 	.word	0x20000010
 8003ea0:	20000014 	.word	0x20000014

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	@ 0x24
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d121      	bne.n	8003f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d11e      	bne.n	8003f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ed8:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee4:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e005      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f00:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d102      	bne.n	8003f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f1c:	4b25      	ldr	r3, [pc, #148]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e004      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f28:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d134      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d003      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0xac>
 8003f48:	e005      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f4c:	617b      	str	r3, [r7, #20]
      break;
 8003f4e:	e005      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f52:	617b      	str	r3, [r7, #20]
      break;
 8003f54:	e002      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	617b      	str	r3, [r7, #20]
      break;
 8003f5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f5c:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	3301      	adds	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	fb03 f202 	mul.w	r2, r3, r2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f82:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	0e5b      	lsrs	r3, r3, #25
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3724      	adds	r7, #36	@ 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800ac90 	.word	0x0800ac90
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	007a1200 	.word	0x007a1200

08003fbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	@ (8003fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000010 	.word	0x20000010

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fd8:	f7ff fff0 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4904      	ldr	r1, [pc, #16]	@ (8003ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800ac88 	.word	0x0800ac88

08004000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004004:	f7ff ffda 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0adb      	lsrs	r3, r3, #11
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4904      	ldr	r1, [pc, #16]	@ (8004028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	0800ac88 	.word	0x0800ac88

0800402c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	220f      	movs	r2, #15
 800403a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800403c:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_RCC_GetClockConfig+0x5c>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0203 	and.w	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004048:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <HAL_RCC_GetClockConfig+0x5c>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004054:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <HAL_RCC_GetClockConfig+0x5c>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_GetClockConfig+0x5c>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800406e:	4b07      	ldr	r3, [pc, #28]	@ (800408c <HAL_RCC_GetClockConfig+0x60>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	40022000 	.word	0x40022000

08004090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800409c:	4b2a      	ldr	r3, [pc, #168]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a8:	f7ff f9bc 	bl	8003424 <HAL_PWREx_GetVoltageRange>
 80040ac:	6178      	str	r0, [r7, #20]
 80040ae:	e014      	b.n	80040da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	4b25      	ldr	r3, [pc, #148]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b4:	4a24      	ldr	r2, [pc, #144]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80040bc:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c8:	f7ff f9ac 	bl	8003424 <HAL_PWREx_GetVoltageRange>
 80040cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e0:	d10b      	bne.n	80040fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b80      	cmp	r3, #128	@ 0x80
 80040e6:	d919      	bls.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80040ec:	d902      	bls.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ee:	2302      	movs	r3, #2
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e013      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f4:	2301      	movs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	e010      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b80      	cmp	r3, #128	@ 0x80
 80040fe:	d902      	bls.n	8004106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004100:	2303      	movs	r3, #3
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e00a      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d102      	bne.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800410c:	2302      	movs	r3, #2
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e004      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b70      	cmp	r3, #112	@ 0x70
 8004116:	d101      	bne.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004118:	2301      	movs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800411c:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 0207 	bic.w	r2, r3, #7
 8004124:	4909      	ldr	r1, [pc, #36]	@ (800414c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800412c:	4b07      	ldr	r3, [pc, #28]	@ (800414c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d001      	beq.n	800413e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	40022000 	.word	0x40022000

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004158:	2300      	movs	r3, #0
 800415a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800415c:	2300      	movs	r3, #0
 800415e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004168:	2b00      	cmp	r3, #0
 800416a:	d041      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004170:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004174:	d02a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004176:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800417a:	d824      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800417c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004180:	d008      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004182:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004186:	d81e      	bhi.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800418c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004190:	d010      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004192:	e018      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004194:	4b86      	ldr	r3, [pc, #536]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a85      	ldr	r2, [pc, #532]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a0:	e015      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 facb 	bl	8004744 <RCCEx_PLLSAI1_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041b2:	e00c      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3320      	adds	r3, #32
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fbb6 	bl	800492c <RCCEx_PLLSAI2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	74fb      	strb	r3, [r7, #19]
      break;
 80041ca:	e000      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041d4:	4b76      	ldr	r3, [pc, #472]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e2:	4973      	ldr	r1, [pc, #460]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041ea:	e001      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d041      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004200:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004204:	d02a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004206:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800420a:	d824      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800420c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004210:	d008      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004216:	d81e      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800421c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004220:	d010      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004222:	e018      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004224:	4b62      	ldr	r3, [pc, #392]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a61      	ldr	r2, [pc, #388]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004230:	e015      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fa83 	bl	8004744 <RCCEx_PLLSAI1_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004242:	e00c      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3320      	adds	r3, #32
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb6e 	bl	800492c <RCCEx_PLLSAI2_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004254:	e003      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	74fb      	strb	r3, [r7, #19]
      break;
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800425c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004264:	4b52      	ldr	r3, [pc, #328]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004272:	494f      	ldr	r1, [pc, #316]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800427a:	e001      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a0 	beq.w	80043ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004292:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	4b41      	ldr	r3, [pc, #260]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	4a40      	ldr	r2, [pc, #256]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b4:	4b3e      	ldr	r3, [pc, #248]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c0:	2301      	movs	r3, #1
 80042c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3a      	ldr	r2, [pc, #232]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d0:	f7fd fd78 	bl	8001dc4 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042d6:	e009      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fd fd74 	bl	8001dc4 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d902      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	74fb      	strb	r3, [r7, #19]
        break;
 80042ea:	e005      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ec:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ef      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d15c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042fe:	4b2c      	ldr	r3, [pc, #176]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004308:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	429a      	cmp	r2, r3
 800431a:	d019      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800431c:	4b24      	ldr	r3, [pc, #144]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004328:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	4a20      	ldr	r2, [pc, #128]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004338:	4b1d      	ldr	r3, [pc, #116]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004348:	4a19      	ldr	r2, [pc, #100]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd fd33 	bl	8001dc4 <HAL_GetTick>
 800435e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004360:	e00b      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fd fd2f 	bl	8001dc4 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004370:	4293      	cmp	r3, r2
 8004372:	d902      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	74fb      	strb	r3, [r7, #19]
            break;
 8004378:	e006      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437a:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ec      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439e:	4904      	ldr	r1, [pc, #16]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043a6:	e009      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
 80043ac:	e006      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043bc:	7c7b      	ldrb	r3, [r7, #17]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c2:	4b9e      	ldr	r3, [pc, #632]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c6:	4a9d      	ldr	r2, [pc, #628]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043da:	4b98      	ldr	r3, [pc, #608]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e0:	f023 0203 	bic.w	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e8:	4994      	ldr	r1, [pc, #592]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043fc:	4b8f      	ldr	r3, [pc, #572]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	f023 020c 	bic.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440a:	498c      	ldr	r1, [pc, #560]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800441e:	4b87      	ldr	r3, [pc, #540]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004424:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	4983      	ldr	r1, [pc, #524]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004440:	4b7e      	ldr	r3, [pc, #504]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004446:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	497b      	ldr	r1, [pc, #492]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004462:	4b76      	ldr	r3, [pc, #472]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	4972      	ldr	r1, [pc, #456]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004484:	4b6d      	ldr	r3, [pc, #436]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004492:	496a      	ldr	r1, [pc, #424]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044a6:	4b65      	ldr	r3, [pc, #404]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b4:	4961      	ldr	r1, [pc, #388]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044c8:	4b5c      	ldr	r3, [pc, #368]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d6:	4959      	ldr	r1, [pc, #356]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ea:	4b54      	ldr	r3, [pc, #336]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f8:	4950      	ldr	r1, [pc, #320]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800450c:	4b4b      	ldr	r3, [pc, #300]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451a:	4948      	ldr	r1, [pc, #288]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800452e:	4b43      	ldr	r3, [pc, #268]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453c:	493f      	ldr	r1, [pc, #252]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d028      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004550:	4b3a      	ldr	r3, [pc, #232]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455e:	4937      	ldr	r1, [pc, #220]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800456e:	d106      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b32      	ldr	r3, [pc, #200]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a31      	ldr	r2, [pc, #196]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
 800457c:	e011      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004586:	d10c      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f8d8 	bl	8004744 <RCCEx_PLLSAI1_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d028      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045ae:	4b23      	ldr	r3, [pc, #140]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	491f      	ldr	r1, [pc, #124]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045cc:	d106      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ce:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4a1a      	ldr	r2, [pc, #104]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045d8:	60d3      	str	r3, [r2, #12]
 80045da:	e011      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045e4:	d10c      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2101      	movs	r1, #1
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f8a9 	bl	8004744 <RCCEx_PLLSAI1_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461a:	4908      	ldr	r1, [pc, #32]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d109      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a02      	ldr	r2, [pc, #8]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004636:	60d3      	str	r3, [r2, #12]
 8004638:	e014      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004644:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004648:	d10c      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f877 	bl	8004744 <RCCEx_PLLSAI1_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004670:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800467e:	4928      	ldr	r1, [pc, #160]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800468e:	d10d      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f854 	bl	8004744 <RCCEx_PLLSAI1_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d014      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	74bb      	strb	r3, [r7, #18]
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3320      	adds	r3, #32
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f935 	bl	800492c <RCCEx_PLLSAI2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046dc:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ea:	490d      	ldr	r1, [pc, #52]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046fe:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800470e:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004716:	7cbb      	ldrb	r3, [r7, #18]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000

08004724 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800472e:	f043 0304 	orr.w	r3, r3, #4
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000

08004744 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004752:	4b75      	ldr	r3, [pc, #468]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d018      	beq.n	8004790 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800475e:	4b72      	ldr	r3, [pc, #456]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0203 	and.w	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d10d      	bne.n	800478a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
       ||
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004776:	4b6c      	ldr	r3, [pc, #432]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
       ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d047      	beq.n	800481a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
 800478e:	e044      	b.n	800481a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d018      	beq.n	80047ca <RCCEx_PLLSAI1_Config+0x86>
 8004798:	2b03      	cmp	r3, #3
 800479a:	d825      	bhi.n	80047e8 <RCCEx_PLLSAI1_Config+0xa4>
 800479c:	2b01      	cmp	r3, #1
 800479e:	d002      	beq.n	80047a6 <RCCEx_PLLSAI1_Config+0x62>
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d009      	beq.n	80047b8 <RCCEx_PLLSAI1_Config+0x74>
 80047a4:	e020      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047a6:	4b60      	ldr	r3, [pc, #384]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d11d      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b6:	e01a      	b.n	80047ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d116      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c8:	e013      	b.n	80047f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ca:	4b57      	ldr	r3, [pc, #348]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047d6:	4b54      	ldr	r3, [pc, #336]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047e6:	e006      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      break;
 80047ec:	e004      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	430b      	orrs	r3, r1
 8004814:	4944      	ldr	r1, [pc, #272]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d17d      	bne.n	800491c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004820:	4b41      	ldr	r3, [pc, #260]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a40      	ldr	r2, [pc, #256]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800482a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482c:	f7fd faca 	bl	8001dc4 <HAL_GetTick>
 8004830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004832:	e009      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004834:	f7fd fac6 	bl	8001dc4 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d902      	bls.n	8004848 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	73fb      	strb	r3, [r7, #15]
        break;
 8004846:	e005      	b.n	8004854 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004848:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ef      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d160      	bne.n	800491c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d111      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004860:	4b31      	ldr	r3, [pc, #196]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6892      	ldr	r2, [r2, #8]
 8004870:	0211      	lsls	r1, r2, #8
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68d2      	ldr	r2, [r2, #12]
 8004876:	0912      	lsrs	r2, r2, #4
 8004878:	0452      	lsls	r2, r2, #17
 800487a:	430a      	orrs	r2, r1
 800487c:	492a      	ldr	r1, [pc, #168]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	610b      	str	r3, [r1, #16]
 8004882:	e027      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d112      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488a:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004892:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6892      	ldr	r2, [r2, #8]
 800489a:	0211      	lsls	r1, r2, #8
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6912      	ldr	r2, [r2, #16]
 80048a0:	0852      	lsrs	r2, r2, #1
 80048a2:	3a01      	subs	r2, #1
 80048a4:	0552      	lsls	r2, r2, #21
 80048a6:	430a      	orrs	r2, r1
 80048a8:	491f      	ldr	r1, [pc, #124]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]
 80048ae:	e011      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	0211      	lsls	r1, r2, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6952      	ldr	r2, [r2, #20]
 80048c6:	0852      	lsrs	r2, r2, #1
 80048c8:	3a01      	subs	r2, #1
 80048ca:	0652      	lsls	r2, r2, #25
 80048cc:	430a      	orrs	r2, r1
 80048ce:	4916      	ldr	r1, [pc, #88]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d4:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a13      	ldr	r2, [pc, #76]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd fa70 	bl	8001dc4 <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e6:	e009      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e8:	f7fd fa6c 	bl	8001dc4 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d902      	bls.n	80048fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	73fb      	strb	r3, [r7, #15]
          break;
 80048fa:	e005      	b.n	8004908 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	4904      	ldr	r1, [pc, #16]	@ (8004928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004946:	4b67      	ldr	r3, [pc, #412]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
       ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800495e:	4b61      	ldr	r3, [pc, #388]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
       ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d047      	beq.n	8004a02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e044      	b.n	8004a02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d018      	beq.n	80049b2 <RCCEx_PLLSAI2_Config+0x86>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d825      	bhi.n	80049d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <RCCEx_PLLSAI2_Config+0x62>
 8004988:	2b02      	cmp	r3, #2
 800498a:	d009      	beq.n	80049a0 <RCCEx_PLLSAI2_Config+0x74>
 800498c:	e020      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800498e:	4b55      	ldr	r3, [pc, #340]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11d      	bne.n	80049d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499e:	e01a      	b.n	80049d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a0:	4b50      	ldr	r3, [pc, #320]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b0:	e013      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049be:	4b49      	ldr	r3, [pc, #292]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ce:	e006      	b.n	80049de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      break;
 80049d4:	e004      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049de:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	430b      	orrs	r3, r1
 80049fc:	4939      	ldr	r1, [pc, #228]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d167      	bne.n	8004ad8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a08:	4b36      	ldr	r3, [pc, #216]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fd f9d6 	bl	8001dc4 <HAL_GetTick>
 8004a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1a:	e009      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a1c:	f7fd f9d2 	bl	8001dc4 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d902      	bls.n	8004a30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a2e:	e005      	b.n	8004a3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ef      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d14a      	bne.n	8004ad8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d111      	bne.n	8004a6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a48:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6892      	ldr	r2, [r2, #8]
 8004a58:	0211      	lsls	r1, r2, #8
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	0912      	lsrs	r2, r2, #4
 8004a60:	0452      	lsls	r2, r2, #17
 8004a62:	430a      	orrs	r2, r1
 8004a64:	491f      	ldr	r1, [pc, #124]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	614b      	str	r3, [r1, #20]
 8004a6a:	e011      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6912      	ldr	r2, [r2, #16]
 8004a82:	0852      	lsrs	r2, r2, #1
 8004a84:	3a01      	subs	r2, #1
 8004a86:	0652      	lsls	r2, r2, #25
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	4916      	ldr	r1, [pc, #88]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a90:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a13      	ldr	r2, [pc, #76]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fd f992 	bl	8001dc4 <HAL_GetTick>
 8004aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa2:	e009      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa4:	f7fd f98e 	bl	8001dc4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d902      	bls.n	8004ab8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab6:	e005      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	4904      	ldr	r1, [pc, #16]	@ (8004ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e049      	b.n	8004b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc ff7e 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fde4 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04f      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	@ (8004c5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d018      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_TIM_Base_Start_IT+0x76>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a19      	ldr	r2, [pc, #100]	@ (8004c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d115      	bne.n	8004c3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b17      	ldr	r3, [pc, #92]	@ (8004c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d015      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c26:	d011      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	e008      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40013400 	.word	0x40013400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	00010007 	.word	0x00010007

08004c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e049      	b.n	8004d1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f841 	bl	8004d26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f000 fd1c 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e03c      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e02f      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e022      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d109      	bne.n	8004dae <HAL_TIM_PWM_Start+0x72>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e015      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_PWM_Start+0x8c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e008      	b.n	8004dda <HAL_TIM_PWM_Start+0x9e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e09c      	b.n	8004f1c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xb6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	e023      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start+0xc6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	e01b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xd6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0xe6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xf6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xfe>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f860 	bl	8005f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <HAL_TIM_PWM_Start+0x1e8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a34      	ldr	r2, [pc, #208]	@ (8004f28 <HAL_TIM_PWM_Start+0x1ec>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <HAL_TIM_PWM_Start+0x1f0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a31      	ldr	r2, [pc, #196]	@ (8004f30 <HAL_TIM_PWM_Start+0x1f4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x13e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	@ (8004f34 <HAL_TIM_PWM_Start+0x1f8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_PWM_Start+0x142>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_PWM_Start+0x144>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a22      	ldr	r2, [pc, #136]	@ (8004f24 <HAL_TIM_PWM_Start+0x1e8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	d018      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <HAL_TIM_PWM_Start+0x1fc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_TIM_PWM_Start+0x200>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <HAL_TIM_PWM_Start+0x204>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	@ (8004f28 <HAL_TIM_PWM_Start+0x1ec>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIM_PWM_Start+0x19e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <HAL_TIM_PWM_Start+0x1f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d115      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <HAL_TIM_PWM_Start+0x208>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d015      	beq.n	8004f18 <HAL_TIM_PWM_Start+0x1dc>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef2:	d011      	beq.n	8004f18 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f04:	e008      	b.n	8004f18 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e000      	b.n	8004f1a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40013400 	.word	0x40013400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	00010007 	.word	0x00010007

08004f48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 ffd4 	bl	8005f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3e      	ldr	r2, [pc, #248]	@ (8005060 <HAL_TIM_PWM_Stop+0x118>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_TIM_PWM_Stop+0x4a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8005064 <HAL_TIM_PWM_Stop+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIM_PWM_Stop+0x4a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3b      	ldr	r2, [pc, #236]	@ (8005068 <HAL_TIM_PWM_Stop+0x120>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIM_PWM_Stop+0x4a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3a      	ldr	r2, [pc, #232]	@ (800506c <HAL_TIM_PWM_Stop+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIM_PWM_Stop+0x4a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a38      	ldr	r2, [pc, #224]	@ (8005070 <HAL_TIM_PWM_Stop+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_PWM_Stop+0x4e>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_TIM_PWM_Stop+0x50>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <HAL_TIM_PWM_Stop+0x84>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_PWM_Stop+0x84>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <HAL_TIM_PWM_Stop+0xb4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_PWM_Stop+0xb4>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <HAL_TIM_PWM_Stop+0xc4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800500a:	e023      	b.n	8005054 <HAL_TIM_PWM_Stop+0x10c>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b04      	cmp	r3, #4
 8005010:	d104      	bne.n	800501c <HAL_TIM_PWM_Stop+0xd4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800501a:	e01b      	b.n	8005054 <HAL_TIM_PWM_Stop+0x10c>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b08      	cmp	r3, #8
 8005020:	d104      	bne.n	800502c <HAL_TIM_PWM_Stop+0xe4>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502a:	e013      	b.n	8005054 <HAL_TIM_PWM_Stop+0x10c>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d104      	bne.n	800503c <HAL_TIM_PWM_Stop+0xf4>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503a:	e00b      	b.n	8005054 <HAL_TIM_PWM_Stop+0x10c>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b10      	cmp	r3, #16
 8005040:	d104      	bne.n	800504c <HAL_TIM_PWM_Stop+0x104>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504a:	e003      	b.n	8005054 <HAL_TIM_PWM_Stop+0x10c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40013400 	.word	0x40013400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0202 	mvn.w	r2, #2
 80050a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fac1 	bl	8005646 <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fab3 	bl	8005632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fac4 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d020      	beq.n	8005124 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01b      	beq.n	8005124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0204 	mvn.w	r2, #4
 80050f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa9b 	bl	8005646 <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa8d 	bl	8005632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fa9e 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d020      	beq.n	8005170 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0208 	mvn.w	r2, #8
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa75 	bl	8005646 <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa67 	bl	8005632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fa78 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d020      	beq.n	80051bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01b      	beq.n	80051bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0210 	mvn.w	r2, #16
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2208      	movs	r2, #8
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa4f 	bl	8005646 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa41 	bl	8005632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fa52 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fb08 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00c      	beq.n	8005204 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 ff3a 	bl	8006078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 ff32 	bl	800608c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00c      	beq.n	800524c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa11 	bl	800566e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00c      	beq.n	8005270 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0220 	mvn.w	r2, #32
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fefa 	bl	8006064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005292:	2302      	movs	r3, #2
 8005294:	e0ff      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b14      	cmp	r3, #20
 80052a2:	f200 80f0 	bhi.w	8005486 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052a6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	08005301 	.word	0x08005301
 80052b0:	08005487 	.word	0x08005487
 80052b4:	08005487 	.word	0x08005487
 80052b8:	08005487 	.word	0x08005487
 80052bc:	08005341 	.word	0x08005341
 80052c0:	08005487 	.word	0x08005487
 80052c4:	08005487 	.word	0x08005487
 80052c8:	08005487 	.word	0x08005487
 80052cc:	08005383 	.word	0x08005383
 80052d0:	08005487 	.word	0x08005487
 80052d4:	08005487 	.word	0x08005487
 80052d8:	08005487 	.word	0x08005487
 80052dc:	080053c3 	.word	0x080053c3
 80052e0:	08005487 	.word	0x08005487
 80052e4:	08005487 	.word	0x08005487
 80052e8:	08005487 	.word	0x08005487
 80052ec:	08005405 	.word	0x08005405
 80052f0:	08005487 	.word	0x08005487
 80052f4:	08005487 	.word	0x08005487
 80052f8:	08005487 	.word	0x08005487
 80052fc:	08005445 	.word	0x08005445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fa8e 	bl	8005828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0204 	bic.w	r2, r2, #4
 800532a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6999      	ldr	r1, [r3, #24]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	619a      	str	r2, [r3, #24]
      break;
 800533e:	e0a5      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fafe 	bl	8005948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800535a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800536a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6999      	ldr	r1, [r3, #24]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	021a      	lsls	r2, r3, #8
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	619a      	str	r2, [r3, #24]
      break;
 8005380:	e084      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fb67 	bl	8005a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0208 	orr.w	r2, r2, #8
 800539c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0204 	bic.w	r2, r2, #4
 80053ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69d9      	ldr	r1, [r3, #28]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	61da      	str	r2, [r3, #28]
      break;
 80053c0:	e064      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fbcf 	bl	8005b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69d9      	ldr	r1, [r3, #28]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	021a      	lsls	r2, r3, #8
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	61da      	str	r2, [r3, #28]
      break;
 8005402:	e043      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fc18 	bl	8005c40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005442:	e023      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fc5c 	bl	8005d08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005484:	e002      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	75fb      	strb	r3, [r7, #23]
      break;
 800548a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop

080054a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0x1c>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0b6      	b.n	800562a <HAL_TIM_ConfigClockSource+0x18a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f8:	d03e      	beq.n	8005578 <HAL_TIM_ConfigClockSource+0xd8>
 80054fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054fe:	f200 8087 	bhi.w	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005506:	f000 8086 	beq.w	8005616 <HAL_TIM_ConfigClockSource+0x176>
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550e:	d87f      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005510:	2b70      	cmp	r3, #112	@ 0x70
 8005512:	d01a      	beq.n	800554a <HAL_TIM_ConfigClockSource+0xaa>
 8005514:	2b70      	cmp	r3, #112	@ 0x70
 8005516:	d87b      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005518:	2b60      	cmp	r3, #96	@ 0x60
 800551a:	d050      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x11e>
 800551c:	2b60      	cmp	r3, #96	@ 0x60
 800551e:	d877      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005520:	2b50      	cmp	r3, #80	@ 0x50
 8005522:	d03c      	beq.n	800559e <HAL_TIM_ConfigClockSource+0xfe>
 8005524:	2b50      	cmp	r3, #80	@ 0x50
 8005526:	d873      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005528:	2b40      	cmp	r3, #64	@ 0x40
 800552a:	d058      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x13e>
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d86f      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005530:	2b30      	cmp	r3, #48	@ 0x30
 8005532:	d064      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x15e>
 8005534:	2b30      	cmp	r3, #48	@ 0x30
 8005536:	d86b      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d060      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x15e>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d867      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d05c      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x15e>
 8005544:	2b10      	cmp	r3, #16
 8005546:	d05a      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x15e>
 8005548:	e062      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	f000 fcb5 	bl	8005ec8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800556c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	609a      	str	r2, [r3, #8]
      break;
 8005576:	e04f      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	f000 fc9e 	bl	8005ec8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800559a:	609a      	str	r2, [r3, #8]
      break;
 800559c:	e03c      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 fc12 	bl	8005dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2150      	movs	r1, #80	@ 0x50
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fc6b 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e02c      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 fc31 	bl	8005e32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2160      	movs	r1, #96	@ 0x60
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fc5b 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e01c      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 fbf2 	bl	8005dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2140      	movs	r1, #64	@ 0x40
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fc4b 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 80055fc:	e00c      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f000 fc42 	bl	8005e92 <TIM_ITRx_SetConfig>
      break;
 800560e:	e003      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	e000      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(const TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <HAL_TIM_GetChannelState+0x1a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e023      	b.n	80056e4 <HAL_TIM_GetChannelState+0x62>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d104      	bne.n	80056ac <HAL_TIM_GetChannelState+0x2a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e01b      	b.n	80056e4 <HAL_TIM_GetChannelState+0x62>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d104      	bne.n	80056bc <HAL_TIM_GetChannelState+0x3a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	e013      	b.n	80056e4 <HAL_TIM_GetChannelState+0x62>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b0c      	cmp	r3, #12
 80056c0:	d104      	bne.n	80056cc <HAL_TIM_GetChannelState+0x4a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e00b      	b.n	80056e4 <HAL_TIM_GetChannelState+0x62>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d104      	bne.n	80056dc <HAL_TIM_GetChannelState+0x5a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e003      	b.n	80056e4 <HAL_TIM_GetChannelState+0x62>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a40      	ldr	r2, [pc, #256]	@ (8005808 <TIM_Base_SetConfig+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3d      	ldr	r2, [pc, #244]	@ (800580c <TIM_Base_SetConfig+0x118>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3c      	ldr	r2, [pc, #240]	@ (8005810 <TIM_Base_SetConfig+0x11c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3b      	ldr	r2, [pc, #236]	@ (8005814 <TIM_Base_SetConfig+0x120>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3a      	ldr	r2, [pc, #232]	@ (8005818 <TIM_Base_SetConfig+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2f      	ldr	r2, [pc, #188]	@ (8005808 <TIM_Base_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01f      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005754:	d01b      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2c      	ldr	r2, [pc, #176]	@ (800580c <TIM_Base_SetConfig+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d017      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2b      	ldr	r2, [pc, #172]	@ (8005810 <TIM_Base_SetConfig+0x11c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2a      	ldr	r2, [pc, #168]	@ (8005814 <TIM_Base_SetConfig+0x120>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a29      	ldr	r2, [pc, #164]	@ (8005818 <TIM_Base_SetConfig+0x124>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a28      	ldr	r2, [pc, #160]	@ (800581c <TIM_Base_SetConfig+0x128>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a27      	ldr	r2, [pc, #156]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <TIM_Base_SetConfig+0x130>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a10      	ldr	r2, [pc, #64]	@ (8005808 <TIM_Base_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a12      	ldr	r2, [pc, #72]	@ (8005818 <TIM_Base_SetConfig+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a11      	ldr	r2, [pc, #68]	@ (800581c <TIM_Base_SetConfig+0x128>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a10      	ldr	r2, [pc, #64]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005824 <TIM_Base_SetConfig+0x130>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0201 	bic.w	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f023 0302 	bic.w	r3, r3, #2
 8005874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a2c      	ldr	r2, [pc, #176]	@ (8005934 <TIM_OC1_SetConfig+0x10c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00f      	beq.n	80058a8 <TIM_OC1_SetConfig+0x80>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2b      	ldr	r2, [pc, #172]	@ (8005938 <TIM_OC1_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_OC1_SetConfig+0x80>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2a      	ldr	r2, [pc, #168]	@ (800593c <TIM_OC1_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_OC1_SetConfig+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a29      	ldr	r2, [pc, #164]	@ (8005940 <TIM_OC1_SetConfig+0x118>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_OC1_SetConfig+0x80>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a28      	ldr	r2, [pc, #160]	@ (8005944 <TIM_OC1_SetConfig+0x11c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10c      	bne.n	80058c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0308 	bic.w	r3, r3, #8
 80058ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <TIM_OC1_SetConfig+0x10c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <TIM_OC1_SetConfig+0xc2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005938 <TIM_OC1_SetConfig+0x110>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00b      	beq.n	80058ea <TIM_OC1_SetConfig+0xc2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a19      	ldr	r2, [pc, #100]	@ (800593c <TIM_OC1_SetConfig+0x114>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_OC1_SetConfig+0xc2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a18      	ldr	r2, [pc, #96]	@ (8005940 <TIM_OC1_SetConfig+0x118>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC1_SetConfig+0xc2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <TIM_OC1_SetConfig+0x11c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f023 0210 	bic.w	r2, r3, #16
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0320 	bic.w	r3, r3, #32
 8005996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a28      	ldr	r2, [pc, #160]	@ (8005a48 <TIM_OC2_SetConfig+0x100>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_OC2_SetConfig+0x6c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <TIM_OC2_SetConfig+0x104>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10d      	bne.n	80059d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a48 <TIM_OC2_SetConfig+0x100>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00f      	beq.n	80059f8 <TIM_OC2_SetConfig+0xb0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1c      	ldr	r2, [pc, #112]	@ (8005a4c <TIM_OC2_SetConfig+0x104>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_OC2_SetConfig+0xb0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a50 <TIM_OC2_SetConfig+0x108>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_OC2_SetConfig+0xb0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005a54 <TIM_OC2_SetConfig+0x10c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC2_SetConfig+0xb0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <TIM_OC2_SetConfig+0x110>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d113      	bne.n	8005a20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800

08005a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a27      	ldr	r2, [pc, #156]	@ (8005b58 <TIM_OC3_SetConfig+0xfc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_OC3_SetConfig+0x6a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	@ (8005b5c <TIM_OC3_SetConfig+0x100>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d10d      	bne.n	8005ae2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <TIM_OC3_SetConfig+0xfc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_OC3_SetConfig+0xae>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	@ (8005b5c <TIM_OC3_SetConfig+0x100>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_OC3_SetConfig+0xae>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b60 <TIM_OC3_SetConfig+0x104>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_OC3_SetConfig+0xae>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a19      	ldr	r2, [pc, #100]	@ (8005b64 <TIM_OC3_SetConfig+0x108>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0xae>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a18      	ldr	r2, [pc, #96]	@ (8005b68 <TIM_OC3_SetConfig+0x10c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d113      	bne.n	8005b32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	621a      	str	r2, [r3, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40013400 	.word	0x40013400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800

08005b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	031b      	lsls	r3, r3, #12
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a18      	ldr	r2, [pc, #96]	@ (8005c2c <TIM_OC4_SetConfig+0xc0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00f      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x84>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	@ (8005c30 <TIM_OC4_SetConfig+0xc4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x84>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	@ (8005c34 <TIM_OC4_SetConfig+0xc8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x84>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <TIM_OC4_SetConfig+0xcc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x84>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a14      	ldr	r2, [pc, #80]	@ (8005c3c <TIM_OC4_SetConfig+0xd0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d109      	bne.n	8005c04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	019b      	lsls	r3, r3, #6
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800

08005c40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a17      	ldr	r2, [pc, #92]	@ (8005cf4 <TIM_OC5_SetConfig+0xb4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <TIM_OC5_SetConfig+0x7a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a16      	ldr	r2, [pc, #88]	@ (8005cf8 <TIM_OC5_SetConfig+0xb8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <TIM_OC5_SetConfig+0x7a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <TIM_OC5_SetConfig+0xbc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d007      	beq.n	8005cba <TIM_OC5_SetConfig+0x7a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a14      	ldr	r2, [pc, #80]	@ (8005d00 <TIM_OC5_SetConfig+0xc0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_OC5_SetConfig+0x7a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a13      	ldr	r2, [pc, #76]	@ (8005d04 <TIM_OC5_SetConfig+0xc4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d109      	bne.n	8005cce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40013400 	.word	0x40013400
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800

08005d08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	051b      	lsls	r3, r3, #20
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <TIM_OC6_SetConfig+0xb8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00f      	beq.n	8005d84 <TIM_OC6_SetConfig+0x7c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a17      	ldr	r2, [pc, #92]	@ (8005dc4 <TIM_OC6_SetConfig+0xbc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <TIM_OC6_SetConfig+0x7c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a16      	ldr	r2, [pc, #88]	@ (8005dc8 <TIM_OC6_SetConfig+0xc0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d007      	beq.n	8005d84 <TIM_OC6_SetConfig+0x7c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a15      	ldr	r2, [pc, #84]	@ (8005dcc <TIM_OC6_SetConfig+0xc4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_OC6_SetConfig+0x7c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a14      	ldr	r2, [pc, #80]	@ (8005dd0 <TIM_OC6_SetConfig+0xc8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d109      	bne.n	8005d98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40013400 	.word	0x40013400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800

08005dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 0201 	bic.w	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 030a 	bic.w	r3, r3, #10
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b087      	sub	sp, #28
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f023 0210 	bic.w	r2, r3, #16
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	031b      	lsls	r3, r3, #12
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f043 0307 	orr.w	r3, r3, #7
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	609a      	str	r2, [r3, #8]
}
 8005efc:	bf00      	nop
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e068      	b.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2e      	ldr	r2, [pc, #184]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d018      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1a      	ldr	r2, [pc, #104]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a13      	ldr	r2, [pc, #76]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a14      	ldr	r2, [pc, #80]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10c      	bne.n	800602c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4313      	orrs	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40014000 	.word	0x40014000

08006064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e040      	b.n	8006134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb fcfe 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2224      	movs	r2, #36	@ 0x24
 80060cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fae0 	bl	80066ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f825 	bl	800613c <UART_SetConfig>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e01b      	b.n	8006134 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800610a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800611a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fb5f 	bl	80067f0 <UART_CheckIdleState>
 8006132:	4603      	mov	r3, r0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800613c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006140:	b08a      	sub	sp, #40	@ 0x28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	431a      	orrs	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	4313      	orrs	r3, r2
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4ba4      	ldr	r3, [pc, #656]	@ (80063fc <UART_SetConfig+0x2c0>)
 800616c:	4013      	ands	r3, r2
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006174:	430b      	orrs	r3, r1
 8006176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a99      	ldr	r2, [pc, #612]	@ (8006400 <UART_SetConfig+0x2c4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a4:	4313      	orrs	r3, r2
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a90      	ldr	r2, [pc, #576]	@ (8006404 <UART_SetConfig+0x2c8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d126      	bne.n	8006214 <UART_SetConfig+0xd8>
 80061c6:	4b90      	ldr	r3, [pc, #576]	@ (8006408 <UART_SetConfig+0x2cc>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d81b      	bhi.n	800620c <UART_SetConfig+0xd0>
 80061d4:	a201      	add	r2, pc, #4	@ (adr r2, 80061dc <UART_SetConfig+0xa0>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006205 	.word	0x08006205
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f2:	e116      	b.n	8006422 <UART_SetConfig+0x2e6>
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061fa:	e112      	b.n	8006422 <UART_SetConfig+0x2e6>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006202:	e10e      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800620a:	e10a      	b.n	8006422 <UART_SetConfig+0x2e6>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006212:	e106      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a7c      	ldr	r2, [pc, #496]	@ (800640c <UART_SetConfig+0x2d0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d138      	bne.n	8006290 <UART_SetConfig+0x154>
 800621e:	4b7a      	ldr	r3, [pc, #488]	@ (8006408 <UART_SetConfig+0x2cc>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d82d      	bhi.n	8006288 <UART_SetConfig+0x14c>
 800622c:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <UART_SetConfig+0xf8>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006269 	.word	0x08006269
 8006238:	08006289 	.word	0x08006289
 800623c:	08006289 	.word	0x08006289
 8006240:	08006289 	.word	0x08006289
 8006244:	08006279 	.word	0x08006279
 8006248:	08006289 	.word	0x08006289
 800624c:	08006289 	.word	0x08006289
 8006250:	08006289 	.word	0x08006289
 8006254:	08006271 	.word	0x08006271
 8006258:	08006289 	.word	0x08006289
 800625c:	08006289 	.word	0x08006289
 8006260:	08006289 	.word	0x08006289
 8006264:	08006281 	.word	0x08006281
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800626e:	e0d8      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006276:	e0d4      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627e:	e0d0      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006286:	e0cc      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628e:	e0c8      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a5e      	ldr	r2, [pc, #376]	@ (8006410 <UART_SetConfig+0x2d4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d125      	bne.n	80062e6 <UART_SetConfig+0x1aa>
 800629a:	4b5b      	ldr	r3, [pc, #364]	@ (8006408 <UART_SetConfig+0x2cc>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062a4:	2b30      	cmp	r3, #48	@ 0x30
 80062a6:	d016      	beq.n	80062d6 <UART_SetConfig+0x19a>
 80062a8:	2b30      	cmp	r3, #48	@ 0x30
 80062aa:	d818      	bhi.n	80062de <UART_SetConfig+0x1a2>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d00a      	beq.n	80062c6 <UART_SetConfig+0x18a>
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d814      	bhi.n	80062de <UART_SetConfig+0x1a2>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <UART_SetConfig+0x182>
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d008      	beq.n	80062ce <UART_SetConfig+0x192>
 80062bc:	e00f      	b.n	80062de <UART_SetConfig+0x1a2>
 80062be:	2300      	movs	r3, #0
 80062c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c4:	e0ad      	b.n	8006422 <UART_SetConfig+0x2e6>
 80062c6:	2302      	movs	r3, #2
 80062c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062cc:	e0a9      	b.n	8006422 <UART_SetConfig+0x2e6>
 80062ce:	2304      	movs	r3, #4
 80062d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d4:	e0a5      	b.n	8006422 <UART_SetConfig+0x2e6>
 80062d6:	2308      	movs	r3, #8
 80062d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062dc:	e0a1      	b.n	8006422 <UART_SetConfig+0x2e6>
 80062de:	2310      	movs	r3, #16
 80062e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e4:	e09d      	b.n	8006422 <UART_SetConfig+0x2e6>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006414 <UART_SetConfig+0x2d8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d125      	bne.n	800633c <UART_SetConfig+0x200>
 80062f0:	4b45      	ldr	r3, [pc, #276]	@ (8006408 <UART_SetConfig+0x2cc>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80062fc:	d016      	beq.n	800632c <UART_SetConfig+0x1f0>
 80062fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006300:	d818      	bhi.n	8006334 <UART_SetConfig+0x1f8>
 8006302:	2b80      	cmp	r3, #128	@ 0x80
 8006304:	d00a      	beq.n	800631c <UART_SetConfig+0x1e0>
 8006306:	2b80      	cmp	r3, #128	@ 0x80
 8006308:	d814      	bhi.n	8006334 <UART_SetConfig+0x1f8>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <UART_SetConfig+0x1d8>
 800630e:	2b40      	cmp	r3, #64	@ 0x40
 8006310:	d008      	beq.n	8006324 <UART_SetConfig+0x1e8>
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x1f8>
 8006314:	2300      	movs	r3, #0
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631a:	e082      	b.n	8006422 <UART_SetConfig+0x2e6>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006322:	e07e      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632a:	e07a      	b.n	8006422 <UART_SetConfig+0x2e6>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006332:	e076      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633a:	e072      	b.n	8006422 <UART_SetConfig+0x2e6>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a35      	ldr	r2, [pc, #212]	@ (8006418 <UART_SetConfig+0x2dc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d12a      	bne.n	800639c <UART_SetConfig+0x260>
 8006346:	4b30      	ldr	r3, [pc, #192]	@ (8006408 <UART_SetConfig+0x2cc>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006354:	d01a      	beq.n	800638c <UART_SetConfig+0x250>
 8006356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800635a:	d81b      	bhi.n	8006394 <UART_SetConfig+0x258>
 800635c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006360:	d00c      	beq.n	800637c <UART_SetConfig+0x240>
 8006362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006366:	d815      	bhi.n	8006394 <UART_SetConfig+0x258>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <UART_SetConfig+0x238>
 800636c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006370:	d008      	beq.n	8006384 <UART_SetConfig+0x248>
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x258>
 8006374:	2300      	movs	r3, #0
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800637a:	e052      	b.n	8006422 <UART_SetConfig+0x2e6>
 800637c:	2302      	movs	r3, #2
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006382:	e04e      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800638a:	e04a      	b.n	8006422 <UART_SetConfig+0x2e6>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006392:	e046      	b.n	8006422 <UART_SetConfig+0x2e6>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639a:	e042      	b.n	8006422 <UART_SetConfig+0x2e6>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a17      	ldr	r2, [pc, #92]	@ (8006400 <UART_SetConfig+0x2c4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d13a      	bne.n	800641c <UART_SetConfig+0x2e0>
 80063a6:	4b18      	ldr	r3, [pc, #96]	@ (8006408 <UART_SetConfig+0x2cc>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063b4:	d01a      	beq.n	80063ec <UART_SetConfig+0x2b0>
 80063b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063ba:	d81b      	bhi.n	80063f4 <UART_SetConfig+0x2b8>
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063c0:	d00c      	beq.n	80063dc <UART_SetConfig+0x2a0>
 80063c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063c6:	d815      	bhi.n	80063f4 <UART_SetConfig+0x2b8>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <UART_SetConfig+0x298>
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d0:	d008      	beq.n	80063e4 <UART_SetConfig+0x2a8>
 80063d2:	e00f      	b.n	80063f4 <UART_SetConfig+0x2b8>
 80063d4:	2300      	movs	r3, #0
 80063d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063da:	e022      	b.n	8006422 <UART_SetConfig+0x2e6>
 80063dc:	2302      	movs	r3, #2
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e2:	e01e      	b.n	8006422 <UART_SetConfig+0x2e6>
 80063e4:	2304      	movs	r3, #4
 80063e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ea:	e01a      	b.n	8006422 <UART_SetConfig+0x2e6>
 80063ec:	2308      	movs	r3, #8
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f2:	e016      	b.n	8006422 <UART_SetConfig+0x2e6>
 80063f4:	2310      	movs	r3, #16
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fa:	e012      	b.n	8006422 <UART_SetConfig+0x2e6>
 80063fc:	efff69f3 	.word	0xefff69f3
 8006400:	40008000 	.word	0x40008000
 8006404:	40013800 	.word	0x40013800
 8006408:	40021000 	.word	0x40021000
 800640c:	40004400 	.word	0x40004400
 8006410:	40004800 	.word	0x40004800
 8006414:	40004c00 	.word	0x40004c00
 8006418:	40005000 	.word	0x40005000
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a9f      	ldr	r2, [pc, #636]	@ (80066a4 <UART_SetConfig+0x568>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d17a      	bne.n	8006522 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800642c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006430:	2b08      	cmp	r3, #8
 8006432:	d824      	bhi.n	800647e <UART_SetConfig+0x342>
 8006434:	a201      	add	r2, pc, #4	@ (adr r2, 800643c <UART_SetConfig+0x300>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	08006461 	.word	0x08006461
 8006440:	0800647f 	.word	0x0800647f
 8006444:	08006469 	.word	0x08006469
 8006448:	0800647f 	.word	0x0800647f
 800644c:	0800646f 	.word	0x0800646f
 8006450:	0800647f 	.word	0x0800647f
 8006454:	0800647f 	.word	0x0800647f
 8006458:	0800647f 	.word	0x0800647f
 800645c:	08006477 	.word	0x08006477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fd fdb8 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8006464:	61f8      	str	r0, [r7, #28]
        break;
 8006466:	e010      	b.n	800648a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006468:	4b8f      	ldr	r3, [pc, #572]	@ (80066a8 <UART_SetConfig+0x56c>)
 800646a:	61fb      	str	r3, [r7, #28]
        break;
 800646c:	e00d      	b.n	800648a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646e:	f7fd fd19 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8006472:	61f8      	str	r0, [r7, #28]
        break;
 8006474:	e009      	b.n	800648a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647a:	61fb      	str	r3, [r7, #28]
        break;
 800647c:	e005      	b.n	800648a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006488:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80fb 	beq.w	8006688 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d305      	bcc.n	80064ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d903      	bls.n	80064b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80064b4:	e0e8      	b.n	8006688 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	2200      	movs	r2, #0
 80064ba:	461c      	mov	r4, r3
 80064bc:	4615      	mov	r5, r2
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	022b      	lsls	r3, r5, #8
 80064c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80064cc:	0222      	lsls	r2, r4, #8
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	6849      	ldr	r1, [r1, #4]
 80064d2:	0849      	lsrs	r1, r1, #1
 80064d4:	2000      	movs	r0, #0
 80064d6:	4688      	mov	r8, r1
 80064d8:	4681      	mov	r9, r0
 80064da:	eb12 0a08 	adds.w	sl, r2, r8
 80064de:	eb43 0b09 	adc.w	fp, r3, r9
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7f9 fe6c 	bl	80001d0 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4613      	mov	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006506:	d308      	bcc.n	800651a <UART_SetConfig+0x3de>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800650e:	d204      	bcs.n	800651a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	60da      	str	r2, [r3, #12]
 8006518:	e0b6      	b.n	8006688 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006520:	e0b2      	b.n	8006688 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800652a:	d15e      	bne.n	80065ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800652c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006530:	2b08      	cmp	r3, #8
 8006532:	d828      	bhi.n	8006586 <UART_SetConfig+0x44a>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <UART_SetConfig+0x400>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	08006587 	.word	0x08006587
 800654c:	08006577 	.word	0x08006577
 8006550:	08006587 	.word	0x08006587
 8006554:	08006587 	.word	0x08006587
 8006558:	08006587 	.word	0x08006587
 800655c:	0800657f 	.word	0x0800657f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006560:	f7fd fd38 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8006564:	61f8      	str	r0, [r7, #28]
        break;
 8006566:	e014      	b.n	8006592 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006568:	f7fd fd4a 	bl	8004000 <HAL_RCC_GetPCLK2Freq>
 800656c:	61f8      	str	r0, [r7, #28]
        break;
 800656e:	e010      	b.n	8006592 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006570:	4b4d      	ldr	r3, [pc, #308]	@ (80066a8 <UART_SetConfig+0x56c>)
 8006572:	61fb      	str	r3, [r7, #28]
        break;
 8006574:	e00d      	b.n	8006592 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006576:	f7fd fc95 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 800657a:	61f8      	str	r0, [r7, #28]
        break;
 800657c:	e009      	b.n	8006592 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006582:	61fb      	str	r3, [r7, #28]
        break;
 8006584:	e005      	b.n	8006592 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006590:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d077      	beq.n	8006688 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	005a      	lsls	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	441a      	add	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b0f      	cmp	r3, #15
 80065b2:	d916      	bls.n	80065e2 <UART_SetConfig+0x4a6>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ba:	d212      	bcs.n	80065e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f023 030f 	bic.w	r3, r3, #15
 80065c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	8afb      	ldrh	r3, [r7, #22]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	8afa      	ldrh	r2, [r7, #22]
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	e052      	b.n	8006688 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065e8:	e04e      	b.n	8006688 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d827      	bhi.n	8006642 <UART_SetConfig+0x506>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x4bc>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	08006643 	.word	0x08006643
 8006608:	08006633 	.word	0x08006633
 800660c:	08006643 	.word	0x08006643
 8006610:	08006643 	.word	0x08006643
 8006614:	08006643 	.word	0x08006643
 8006618:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fd fcda 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8006620:	61f8      	str	r0, [r7, #28]
        break;
 8006622:	e014      	b.n	800664e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006624:	f7fd fcec 	bl	8004000 <HAL_RCC_GetPCLK2Freq>
 8006628:	61f8      	str	r0, [r7, #28]
        break;
 800662a:	e010      	b.n	800664e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800662c:	4b1e      	ldr	r3, [pc, #120]	@ (80066a8 <UART_SetConfig+0x56c>)
 800662e:	61fb      	str	r3, [r7, #28]
        break;
 8006630:	e00d      	b.n	800664e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006632:	f7fd fc37 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8006636:	61f8      	str	r0, [r7, #28]
        break;
 8006638:	e009      	b.n	800664e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663e:	61fb      	str	r3, [r7, #28]
        break;
 8006640:	e005      	b.n	800664e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800664c:	bf00      	nop
    }

    if (pclk != 0U)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	085a      	lsrs	r2, r3, #1
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	441a      	add	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d909      	bls.n	8006682 <UART_SetConfig+0x546>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006674:	d205      	bcs.n	8006682 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60da      	str	r2, [r3, #12]
 8006680:	e002      	b.n	8006688 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006694:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006698:	4618      	mov	r0, r3
 800669a:	3728      	adds	r7, #40	@ 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a2:	bf00      	nop
 80066a4:	40008000 	.word	0x40008000
 80066a8:	00f42400 	.word	0x00f42400

080066ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067aa:	d10a      	bne.n	80067c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b098      	sub	sp, #96	@ 0x60
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006800:	f7fb fae0 	bl	8001dc4 <HAL_GetTick>
 8006804:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d12e      	bne.n	8006872 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681c:	2200      	movs	r2, #0
 800681e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f88c 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d021      	beq.n	8006872 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800683c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006842:	653b      	str	r3, [r7, #80]	@ 0x50
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800684c:	647b      	str	r3, [r7, #68]	@ 0x44
 800684e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e062      	b.n	8006938 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b04      	cmp	r3, #4
 800687e:	d149      	bne.n	8006914 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006888:	2200      	movs	r2, #0
 800688a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f856 	bl	8006940 <UART_WaitOnFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d03c      	beq.n	8006914 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	623b      	str	r3, [r7, #32]
   return(result);
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	60fb      	str	r3, [r7, #12]
   return(result);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	69b9      	ldr	r1, [r7, #24]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	617b      	str	r3, [r7, #20]
   return(result);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e5      	bne.n	80068cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e011      	b.n	8006938 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3758      	adds	r7, #88	@ 0x58
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	4613      	mov	r3, r2
 800694e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006950:	e049      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d045      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fb fa33 	bl	8001dc4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <UART_WaitOnFlagUntilTimeout+0x30>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e048      	b.n	8006a06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d031      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b08      	cmp	r3, #8
 800698e:	d110      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2208      	movs	r2, #8
 8006996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f838 	bl	8006a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2208      	movs	r2, #8
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e029      	b.n	8006a06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069c0:	d111      	bne.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f81e 	bl	8006a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e00f      	b.n	8006a06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4013      	ands	r3, r2
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d0a6      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b095      	sub	sp, #84	@ 0x54
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f023 0301 	bic.w	r3, r3, #1
 8006a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3308      	adds	r3, #8
 8006a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e5      	bne.n	8006a48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d118      	bne.n	8006ab6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f023 0310 	bic.w	r3, r3, #16
 8006a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6979      	ldr	r1, [r7, #20]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e6      	bne.n	8006a84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006aca:	bf00      	nop
 8006acc:	3754      	adds	r7, #84	@ 0x54
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006ae0:	4b05      	ldr	r3, [pc, #20]	@ (8006af8 <LL_EXTI_EnableIT_0_31+0x20>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4904      	ldr	r1, [pc, #16]	@ (8006af8 <LL_EXTI_EnableIT_0_31+0x20>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	600b      	str	r3, [r1, #0]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40010400 	.word	0x40010400

08006afc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <LL_EXTI_EnableIT_32_63+0x20>)
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	4904      	ldr	r1, [pc, #16]	@ (8006b1c <LL_EXTI_EnableIT_32_63+0x20>)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	620b      	str	r3, [r1, #32]
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40010400 	.word	0x40010400

08006b20 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006b28:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <LL_EXTI_DisableIT_0_31+0x24>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	4904      	ldr	r1, [pc, #16]	@ (8006b44 <LL_EXTI_DisableIT_0_31+0x24>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	600b      	str	r3, [r1, #0]
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010400 	.word	0x40010400

08006b48 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006b50:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <LL_EXTI_DisableIT_32_63+0x24>)
 8006b52:	6a1a      	ldr	r2, [r3, #32]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	4904      	ldr	r1, [pc, #16]	@ (8006b6c <LL_EXTI_DisableIT_32_63+0x24>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	620b      	str	r3, [r1, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40010400 	.word	0x40010400

08006b70 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006b78:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	4904      	ldr	r1, [pc, #16]	@ (8006b90 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	604b      	str	r3, [r1, #4]

}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40010400 	.word	0x40010400

08006b94 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ba0:	4904      	ldr	r1, [pc, #16]	@ (8006bb4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40010400 	.word	0x40010400

08006bb8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <LL_EXTI_DisableEvent_0_31+0x24>)
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	4904      	ldr	r1, [pc, #16]	@ (8006bdc <LL_EXTI_DisableEvent_0_31+0x24>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	604b      	str	r3, [r1, #4]
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010400 	.word	0x40010400

08006be0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006be8:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	4904      	ldr	r1, [pc, #16]	@ (8006c04 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010400 	.word	0x40010400

08006c08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	4904      	ldr	r1, [pc, #16]	@ (8006c28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	608b      	str	r3, [r1, #8]

}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40010400 	.word	0x40010400

08006c2c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006c34:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006c36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c38:	4904      	ldr	r1, [pc, #16]	@ (8006c4c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	40010400 	.word	0x40010400

08006c50 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006c58:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	4904      	ldr	r1, [pc, #16]	@ (8006c74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	608b      	str	r3, [r1, #8]

}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40010400 	.word	0x40010400

08006c78 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006c80:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006c82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	43db      	mvns	r3, r3
 8006c88:	4904      	ldr	r1, [pc, #16]	@ (8006c9c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	@ (8006cc0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	4904      	ldr	r1, [pc, #16]	@ (8006cc0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60cb      	str	r3, [r1, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	@ (8006ce4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd0:	4904      	ldr	r1, [pc, #16]	@ (8006ce4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40010400 	.word	0x40010400

08006ce8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006cf0:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	4904      	ldr	r1, [pc, #16]	@ (8006d0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	60cb      	str	r3, [r1, #12]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010400 	.word	0x40010400

08006d10 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006d18:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	4904      	ldr	r1, [pc, #16]	@ (8006d34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010400 	.word	0x40010400

08006d38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7a1b      	ldrb	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80d0 	beq.w	8006eee <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d063      	beq.n	8006e1e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7a5b      	ldrb	r3, [r3, #9]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d01c      	beq.n	8006d98 <LL_EXTI_Init+0x60>
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	dc25      	bgt.n	8006dae <LL_EXTI_Init+0x76>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <LL_EXTI_Init+0x34>
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d00b      	beq.n	8006d82 <LL_EXTI_Init+0x4a>
 8006d6a:	e020      	b.n	8006dae <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff ff21 	bl	8006bb8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff feac 	bl	8006ad8 <LL_EXTI_EnableIT_0_31>
          break;
 8006d80:	e018      	b.n	8006db4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff feca 	bl	8006b20 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff feed 	bl	8006b70 <LL_EXTI_EnableEvent_0_31>
          break;
 8006d96:	e00d      	b.n	8006db4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fe9b 	bl	8006ad8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fee2 	bl	8006b70 <LL_EXTI_EnableEvent_0_31>
          break;
 8006dac:	e002      	b.n	8006db4 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8006dae:	2301      	movs	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
          break;
 8006db2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7a9b      	ldrb	r3, [r3, #10]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d030      	beq.n	8006e1e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7a9b      	ldrb	r3, [r3, #10]
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d01c      	beq.n	8006dfe <LL_EXTI_Init+0xc6>
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	dc25      	bgt.n	8006e14 <LL_EXTI_Init+0xdc>
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d002      	beq.n	8006dd2 <LL_EXTI_Init+0x9a>
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d00b      	beq.n	8006de8 <LL_EXTI_Init+0xb0>
 8006dd0:	e020      	b.n	8006e14 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff ff86 	bl	8006ce8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff ff11 	bl	8006c08 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006de6:	e01a      	b.n	8006e1e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff ff2f 	bl	8006c50 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff ff52 	bl	8006ca0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006dfc:	e00f      	b.n	8006e1e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff ff00 	bl	8006c08 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff ff47 	bl	8006ca0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006e12:	e004      	b.n	8006e1e <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f043 0302 	orr.w	r3, r3, #2
 8006e1a:	60fb      	str	r3, [r7, #12]
            break;
 8006e1c:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d077      	beq.n	8006f16 <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7a5b      	ldrb	r3, [r3, #9]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d01c      	beq.n	8006e68 <LL_EXTI_Init+0x130>
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	dc25      	bgt.n	8006e7e <LL_EXTI_Init+0x146>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <LL_EXTI_Init+0x104>
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d00b      	beq.n	8006e52 <LL_EXTI_Init+0x11a>
 8006e3a:	e020      	b.n	8006e7e <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff fecd 	bl	8006be0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fe56 	bl	8006afc <LL_EXTI_EnableIT_32_63>
          break;
 8006e50:	e01a      	b.n	8006e88 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fe76 	bl	8006b48 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fe97 	bl	8006b94 <LL_EXTI_EnableEvent_32_63>
          break;
 8006e66:	e00f      	b.n	8006e88 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff fe45 	bl	8006afc <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fe8c 	bl	8006b94 <LL_EXTI_EnableEvent_32_63>
          break;
 8006e7c:	e004      	b.n	8006e88 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f043 0304 	orr.w	r3, r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]
          break;
 8006e86:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7a9b      	ldrb	r3, [r3, #10]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d042      	beq.n	8006f16 <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7a9b      	ldrb	r3, [r3, #10]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d01c      	beq.n	8006ed2 <LL_EXTI_Init+0x19a>
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	dc25      	bgt.n	8006ee8 <LL_EXTI_Init+0x1b0>
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d002      	beq.n	8006ea6 <LL_EXTI_Init+0x16e>
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d00b      	beq.n	8006ebc <LL_EXTI_Init+0x184>
 8006ea4:	e020      	b.n	8006ee8 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ff30 	bl	8006d10 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff feb9 	bl	8006c2c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8006eba:	e02c      	b.n	8006f16 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fed9 	bl	8006c78 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fefa 	bl	8006cc4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006ed0:	e021      	b.n	8006f16 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fea8 	bl	8006c2c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff feef 	bl	8006cc4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006ee6:	e016      	b.n	8006f16 <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
            break;
 8006eec:	e013      	b.n	8006f16 <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fe14 	bl	8006b20 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fe5b 	bl	8006bb8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff fe1e 	bl	8006b48 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff fe65 	bl	8006be0 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <LL_GPIO_SetPinMode>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	b08b      	sub	sp, #44	@ 0x2c
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	613b      	str	r3, [r7, #16]
  return result;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006f46:	2320      	movs	r3, #32
 8006f48:	e003      	b.n	8006f52 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	fab3 f383 	clz	r3, r3
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	2103      	movs	r1, #3
 8006f56:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	401a      	ands	r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	fa93 f3a3 	rbit	r3, r3
 8006f68:	61fb      	str	r3, [r7, #28]
  return result;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006f74:	2320      	movs	r3, #32
 8006f76:	e003      	b.n	8006f80 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	372c      	adds	r7, #44	@ 0x2c
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <LL_GPIO_SetPinOutputType>:
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	43db      	mvns	r3, r3
 8006fae:	401a      	ands	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	605a      	str	r2, [r3, #4]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <LL_GPIO_SetPinSpeed>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b08b      	sub	sp, #44	@ 0x2c
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	fa93 f3a3 	rbit	r3, r3
 8006fe4:	613b      	str	r3, [r7, #16]
  return result;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	e003      	b.n	8006ffc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	fab3 f383 	clz	r3, r3
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	2103      	movs	r1, #3
 8007000:	fa01 f303 	lsl.w	r3, r1, r3
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	fa93 f3a3 	rbit	r3, r3
 8007012:	61fb      	str	r3, [r7, #28]
  return result;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800701e:	2320      	movs	r3, #32
 8007020:	e003      	b.n	800702a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	fab3 f383 	clz	r3, r3
 8007028:	b2db      	uxtb	r3, r3
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	fa01 f303 	lsl.w	r3, r1, r3
 8007032:	431a      	orrs	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	609a      	str	r2, [r3, #8]
}
 8007038:	bf00      	nop
 800703a:	372c      	adds	r7, #44	@ 0x2c
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <LL_GPIO_SetPinPull>:
{
 8007044:	b480      	push	{r7}
 8007046:	b08b      	sub	sp, #44	@ 0x2c
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	fa93 f3a3 	rbit	r3, r3
 800705e:	613b      	str	r3, [r7, #16]
  return result;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800706a:	2320      	movs	r3, #32
 800706c:	e003      	b.n	8007076 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	fab3 f383 	clz	r3, r3
 8007074:	b2db      	uxtb	r3, r3
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	2103      	movs	r1, #3
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	401a      	ands	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	fa93 f3a3 	rbit	r3, r3
 800708c:	61fb      	str	r3, [r7, #28]
  return result;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007098:	2320      	movs	r3, #32
 800709a:	e003      	b.n	80070a4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	fab3 f383 	clz	r3, r3
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ac:	431a      	orrs	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	60da      	str	r2, [r3, #12]
}
 80070b2:	bf00      	nop
 80070b4:	372c      	adds	r7, #44	@ 0x2c
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <LL_GPIO_SetAFPin_0_7>:
{
 80070be:	b480      	push	{r7}
 80070c0:	b08b      	sub	sp, #44	@ 0x2c
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	fa93 f3a3 	rbit	r3, r3
 80070d8:	613b      	str	r3, [r7, #16]
  return result;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80070e4:	2320      	movs	r3, #32
 80070e6:	e003      	b.n	80070f0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	fab3 f383 	clz	r3, r3
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	210f      	movs	r1, #15
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	43db      	mvns	r3, r3
 80070fa:	401a      	ands	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	fa93 f3a3 	rbit	r3, r3
 8007106:	61fb      	str	r3, [r7, #28]
  return result;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007112:	2320      	movs	r3, #32
 8007114:	e003      	b.n	800711e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	fab3 f383 	clz	r3, r3
 800711c:	b2db      	uxtb	r3, r3
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	fa01 f303 	lsl.w	r3, r1, r3
 8007126:	431a      	orrs	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	372c      	adds	r7, #44	@ 0x2c
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <LL_GPIO_SetAFPin_8_15>:
{
 8007138:	b480      	push	{r7}
 800713a:	b08b      	sub	sp, #44	@ 0x2c
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	fa93 f3a3 	rbit	r3, r3
 8007154:	613b      	str	r3, [r7, #16]
  return result;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007160:	2320      	movs	r3, #32
 8007162:	e003      	b.n	800716c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	fab3 f383 	clz	r3, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	210f      	movs	r1, #15
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	43db      	mvns	r3, r3
 8007176:	401a      	ands	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	fa93 f3a3 	rbit	r3, r3
 8007184:	61fb      	str	r3, [r7, #28]
  return result;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007190:	2320      	movs	r3, #32
 8007192:	e003      	b.n	800719c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	fab3 f383 	clz	r3, r3
 800719a:	b2db      	uxtb	r3, r3
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	fa01 f303 	lsl.w	r3, r1, r3
 80071a4:	431a      	orrs	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80071aa:	bf00      	nop
 80071ac:	372c      	adds	r7, #44	@ 0x2c
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b088      	sub	sp, #32
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	fa93 f3a3 	rbit	r3, r3
 80071cc:	60fb      	str	r3, [r7, #12]
  return result;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <LL_GPIO_Init+0x26>
    return 32U;
 80071d8:	2320      	movs	r3, #32
 80071da:	e003      	b.n	80071e4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	fab3 f383 	clz	r3, r3
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80071e6:	e048      	b.n	800727a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	2101      	movs	r1, #1
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	fa01 f303 	lsl.w	r3, r1, r3
 80071f4:	4013      	ands	r3, r2
 80071f6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d03a      	beq.n	8007274 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d003      	beq.n	800720e <LL_GPIO_Init+0x58>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d10e      	bne.n	800722c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	461a      	mov	r2, r3
 8007214:	69b9      	ldr	r1, [r7, #24]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fed7 	bl	8006fca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	461a      	mov	r2, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff feb7 	bl	8006f9a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	461a      	mov	r2, r3
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff ff05 	bl	8007044 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d111      	bne.n	8007266 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2bff      	cmp	r3, #255	@ 0xff
 8007246:	d807      	bhi.n	8007258 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	461a      	mov	r2, r3
 800724e:	69b9      	ldr	r1, [r7, #24]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff ff34 	bl	80070be <LL_GPIO_SetAFPin_0_7>
 8007256:	e006      	b.n	8007266 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	461a      	mov	r2, r3
 800725e:	69b9      	ldr	r1, [r7, #24]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ff69 	bl	8007138 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	461a      	mov	r2, r3
 800726c:	69b9      	ldr	r1, [r7, #24]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fe56 	bl	8006f20 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	3301      	adds	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1af      	bne.n	80071e8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <__NVIC_SetPriority>:
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	6039      	str	r1, [r7, #0]
 800729e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	db0a      	blt.n	80072be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	490c      	ldr	r1, [pc, #48]	@ (80072e0 <__NVIC_SetPriority+0x4c>)
 80072ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b2:	0112      	lsls	r2, r2, #4
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	440b      	add	r3, r1
 80072b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072bc:	e00a      	b.n	80072d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	4908      	ldr	r1, [pc, #32]	@ (80072e4 <__NVIC_SetPriority+0x50>)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	3b04      	subs	r3, #4
 80072cc:	0112      	lsls	r2, r2, #4
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	440b      	add	r3, r1
 80072d2:	761a      	strb	r2, [r3, #24]
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	e000e100 	.word	0xe000e100
 80072e4:	e000ed00 	.word	0xe000ed00

080072e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80072ec:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <SysTick_Handler+0x1c>)
 80072ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80072f0:	f002 f986 	bl	8009600 <xTaskGetSchedulerState>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d001      	beq.n	80072fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80072fa:	f003 f87d 	bl	800a3f8 <xPortSysTickHandler>
  }
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	e000e010 	.word	0xe000e010

08007308 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800730c:	2100      	movs	r1, #0
 800730e:	f06f 0004 	mvn.w	r0, #4
 8007312:	f7ff ffbf 	bl	8007294 <__NVIC_SetPriority>
#endif
}
 8007316:	bf00      	nop
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007322:	f3ef 8305 	mrs	r3, IPSR
 8007326:	603b      	str	r3, [r7, #0]
  return(result);
 8007328:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800732e:	f06f 0305 	mvn.w	r3, #5
 8007332:	607b      	str	r3, [r7, #4]
 8007334:	e00c      	b.n	8007350 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007336:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <osKernelInitialize+0x44>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <osKernelInitialize+0x44>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007344:	2300      	movs	r3, #0
 8007346:	607b      	str	r3, [r7, #4]
 8007348:	e002      	b.n	8007350 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295
 800734e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007350:	687b      	ldr	r3, [r7, #4]
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200002e4 	.word	0x200002e4

08007364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736a:	f3ef 8305 	mrs	r3, IPSR
 800736e:	603b      	str	r3, [r7, #0]
  return(result);
 8007370:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007376:	f06f 0305 	mvn.w	r3, #5
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e010      	b.n	80073a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800737e:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <osKernelStart+0x48>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d109      	bne.n	800739a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007386:	f7ff ffbf 	bl	8007308 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800738a:	4b08      	ldr	r3, [pc, #32]	@ (80073ac <osKernelStart+0x48>)
 800738c:	2202      	movs	r2, #2
 800738e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007390:	f001 fce2 	bl	8008d58 <vTaskStartScheduler>
      stat = osOK;
 8007394:	2300      	movs	r3, #0
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e002      	b.n	80073a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073a0:	687b      	ldr	r3, [r7, #4]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	200002e4 	.word	0x200002e4

080073b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	@ 0x38
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c0:	f3ef 8305 	mrs	r3, IPSR
 80073c4:	617b      	str	r3, [r7, #20]
  return(result);
 80073c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d17e      	bne.n	80074ca <osThreadNew+0x11a>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d07b      	beq.n	80074ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073d2:	2380      	movs	r3, #128	@ 0x80
 80073d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073d6:	2318      	movs	r3, #24
 80073d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073de:	f04f 33ff 	mov.w	r3, #4294967295
 80073e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d045      	beq.n	8007476 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <osThreadNew+0x48>
        name = attr->name;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <osThreadNew+0x6e>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2b38      	cmp	r3, #56	@ 0x38
 8007410:	d805      	bhi.n	800741e <osThreadNew+0x6e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <osThreadNew+0x72>
        return (NULL);
 800741e:	2300      	movs	r3, #0
 8007420:	e054      	b.n	80074cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	089b      	lsrs	r3, r3, #2
 8007430:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00e      	beq.n	8007458 <osThreadNew+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007440:	d90a      	bls.n	8007458 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007446:	2b00      	cmp	r3, #0
 8007448:	d006      	beq.n	8007458 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <osThreadNew+0xa8>
        mem = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e010      	b.n	800747a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <osThreadNew+0xca>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d108      	bne.n	800747a <osThreadNew+0xca>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d104      	bne.n	800747a <osThreadNew+0xca>
          mem = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	e001      	b.n	800747a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d110      	bne.n	80074a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f001 fa6a 	bl	8008970 <xTaskCreateStatic>
 800749c:	4603      	mov	r3, r0
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	e013      	b.n	80074ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d110      	bne.n	80074ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f107 0310 	add.w	r3, r7, #16
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f001 fab8 	bl	8008a30 <xTaskCreate>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d001      	beq.n	80074ca <osThreadNew+0x11a>
            hTask = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074ca:	693b      	ldr	r3, [r7, #16]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3728      	adds	r7, #40	@ 0x28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074dc:	f3ef 8305 	mrs	r3, IPSR
 80074e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <osDelay+0x1c>
    stat = osErrorISR;
 80074e8:	f06f 0305 	mvn.w	r3, #5
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	e007      	b.n	8007500 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <osDelay+0x2c>
      vTaskDelay(ticks);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fbf6 	bl	8008cec <vTaskDelay>
    }
  }

  return (stat);
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800750a:	b580      	push	{r7, lr}
 800750c:	b08a      	sub	sp, #40	@ 0x28
 800750e:	af02      	add	r7, sp, #8
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800751a:	f3ef 8305 	mrs	r3, IPSR
 800751e:	613b      	str	r3, [r7, #16]
  return(result);
 8007520:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007522:	2b00      	cmp	r3, #0
 8007524:	d175      	bne.n	8007612 <osSemaphoreNew+0x108>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d072      	beq.n	8007612 <osSemaphoreNew+0x108>
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	429a      	cmp	r2, r3
 8007532:	d86e      	bhi.n	8007612 <osSemaphoreNew+0x108>
    mem = -1;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d015      	beq.n	800756c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d006      	beq.n	8007556 <osSemaphoreNew+0x4c>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b4f      	cmp	r3, #79	@ 0x4f
 800754e:	d902      	bls.n	8007556 <osSemaphoreNew+0x4c>
        mem = 1;
 8007550:	2301      	movs	r3, #1
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	e00c      	b.n	8007570 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d108      	bne.n	8007570 <osSemaphoreNew+0x66>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <osSemaphoreNew+0x66>
          mem = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e001      	b.n	8007570 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d04c      	beq.n	8007612 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d128      	bne.n	80075d0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d10a      	bne.n	800759a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2203      	movs	r2, #3
 800758a:	9200      	str	r2, [sp, #0]
 800758c:	2200      	movs	r2, #0
 800758e:	2100      	movs	r1, #0
 8007590:	2001      	movs	r0, #1
 8007592:	f000 fa2b 	bl	80079ec <xQueueGenericCreateStatic>
 8007596:	61f8      	str	r0, [r7, #28]
 8007598:	e005      	b.n	80075a6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800759a:	2203      	movs	r2, #3
 800759c:	2100      	movs	r1, #0
 800759e:	2001      	movs	r0, #1
 80075a0:	f000 faa1 	bl	8007ae6 <xQueueGenericCreate>
 80075a4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d022      	beq.n	80075f2 <osSemaphoreNew+0xe8>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01f      	beq.n	80075f2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075b2:	2300      	movs	r3, #0
 80075b4:	2200      	movs	r2, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	69f8      	ldr	r0, [r7, #28]
 80075ba:	f000 fb61 	bl	8007c80 <xQueueGenericSend>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d016      	beq.n	80075f2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80075c4:	69f8      	ldr	r0, [r7, #28]
 80075c6:	f000 ffff 	bl	80085c8 <vQueueDelete>
            hSemaphore = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	e010      	b.n	80075f2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d108      	bne.n	80075e8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	461a      	mov	r2, r3
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fadf 	bl	8007ba2 <xQueueCreateCountingSemaphoreStatic>
 80075e4:	61f8      	str	r0, [r7, #28]
 80075e6:	e004      	b.n	80075f2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fb12 	bl	8007c14 <xQueueCreateCountingSemaphore>
 80075f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <osSemaphoreNew+0xfc>
          name = attr->name;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e001      	b.n	800760a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	69f8      	ldr	r0, [r7, #28]
 800760e:	f001 f927 	bl	8008860 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007612:	69fb      	ldr	r3, [r7, #28]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3720      	adds	r7, #32
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d103      	bne.n	800763c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007634:	f06f 0303 	mvn.w	r3, #3
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	e039      	b.n	80076b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763c:	f3ef 8305 	mrs	r3, IPSR
 8007640:	60fb      	str	r3, [r7, #12]
  return(result);
 8007642:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007644:	2b00      	cmp	r3, #0
 8007646:	d022      	beq.n	800768e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800764e:	f06f 0303 	mvn.w	r3, #3
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e02c      	b.n	80076b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	461a      	mov	r2, r3
 8007660:	2100      	movs	r1, #0
 8007662:	6938      	ldr	r0, [r7, #16]
 8007664:	f000 ff2e 	bl	80084c4 <xQueueReceiveFromISR>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d003      	beq.n	8007676 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800766e:	f06f 0302 	mvn.w	r3, #2
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e01c      	b.n	80076b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d019      	beq.n	80076b0 <osSemaphoreAcquire+0x94>
 800767c:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <osSemaphoreAcquire+0xa0>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	e010      	b.n	80076b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6938      	ldr	r0, [r7, #16]
 8007692:	f000 fe07 	bl	80082a4 <xQueueSemaphoreTake>
 8007696:	4603      	mov	r3, r0
 8007698:	2b01      	cmp	r3, #1
 800769a:	d009      	beq.n	80076b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80076a2:	f06f 0301 	mvn.w	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e002      	b.n	80076b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80076aa:	f06f 0302 	mvn.w	r3, #2
 80076ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80076b0:	697b      	ldr	r3, [r7, #20]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80076d6:	f06f 0303 	mvn.w	r3, #3
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e02c      	b.n	8007738 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d01a      	beq.n	8007720 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	4619      	mov	r1, r3
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f000 fc63 	bl	8007fc0 <xQueueGiveFromISR>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d003      	beq.n	8007708 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007700:	f06f 0302 	mvn.w	r3, #2
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	e017      	b.n	8007738 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d014      	beq.n	8007738 <osSemaphoreRelease+0x78>
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <osSemaphoreRelease+0x84>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	e00b      	b.n	8007738 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007720:	2300      	movs	r3, #0
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	6938      	ldr	r0, [r7, #16]
 8007728:	f000 faaa 	bl	8007c80 <xQueueGenericSend>
 800772c:	4603      	mov	r3, r0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d002      	beq.n	8007738 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007732:	f06f 0302 	mvn.w	r3, #2
 8007736:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007738:	697b      	ldr	r3, [r7, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a07      	ldr	r2, [pc, #28]	@ (8007774 <vApplicationGetIdleTaskMemory+0x2c>)
 8007758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a06      	ldr	r2, [pc, #24]	@ (8007778 <vApplicationGetIdleTaskMemory+0x30>)
 800775e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2280      	movs	r2, #128	@ 0x80
 8007764:	601a      	str	r2, [r3, #0]
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200002e8 	.word	0x200002e8
 8007778:	20000390 	.word	0x20000390

0800777c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4a07      	ldr	r2, [pc, #28]	@ (80077a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800778c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a06      	ldr	r2, [pc, #24]	@ (80077ac <vApplicationGetTimerTaskMemory+0x30>)
 8007792:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800779a:	601a      	str	r2, [r3, #0]
}
 800779c:	bf00      	nop
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	20000590 	.word	0x20000590
 80077ac:	20000638 	.word	0x20000638

080077b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f103 0208 	add.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f103 0208 	add.w	r2, r3, #8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f103 0208 	add.w	r2, r3, #8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d103      	bne.n	8007872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e00c      	b.n	800788c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3308      	adds	r3, #8
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e002      	b.n	8007880 <vListInsert+0x2e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d2f6      	bcs.n	800787a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6892      	ldr	r2, [r2, #8]
 80078da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6852      	ldr	r2, [r2, #4]
 80078e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d103      	bne.n	80078f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	1e5a      	subs	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800793e:	bf00      	nop
 8007940:	bf00      	nop
 8007942:	e7fd      	b.n	8007940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007944:	f002 fcc8 	bl	800a2d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	68f9      	ldr	r1, [r7, #12]
 8007952:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007954:	fb01 f303 	mul.w	r3, r1, r3
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007974:	3b01      	subs	r3, #1
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800797a:	fb01 f303 	mul.w	r3, r1, r3
 800797e:	441a      	add	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	22ff      	movs	r2, #255	@ 0xff
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	22ff      	movs	r2, #255	@ 0xff
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d114      	bne.n	80079c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01a      	beq.n	80079d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3310      	adds	r3, #16
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fc74 	bl	8009294 <xTaskRemoveFromEventList>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d012      	beq.n	80079d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079b2:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <xQueueGenericReset+0xd0>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	e009      	b.n	80079d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3310      	adds	r3, #16
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fef1 	bl	80077b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3324      	adds	r3, #36	@ 0x24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff feec 	bl	80077b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079d8:	f002 fcb0 	bl	800a33c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079dc:	2301      	movs	r3, #1
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	@ 0x38
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	e7fd      	b.n	8007a32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <xQueueGenericCreateStatic+0x56>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <xQueueGenericCreateStatic+0x5a>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <xQueueGenericCreateStatic+0x5c>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10b      	bne.n	8007a64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	623b      	str	r3, [r7, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	e7fd      	b.n	8007a60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <xQueueGenericCreateStatic+0x84>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <xQueueGenericCreateStatic+0x88>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <xQueueGenericCreateStatic+0x8a>
 8007a74:	2300      	movs	r3, #0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	61fb      	str	r3, [r7, #28]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a92:	2350      	movs	r3, #80	@ 0x50
 8007a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b50      	cmp	r3, #80	@ 0x50
 8007a9a:	d00b      	beq.n	8007ab4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61bb      	str	r3, [r7, #24]
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ab4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00d      	beq.n	8007adc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ac8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f840 	bl	8007b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3730      	adds	r7, #48	@ 0x30
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b08a      	sub	sp, #40	@ 0x28
 8007aea:	af02      	add	r7, sp, #8
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	613b      	str	r3, [r7, #16]
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	e7fd      	b.n	8007b0e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	3350      	adds	r3, #80	@ 0x50
 8007b20:	4618      	mov	r0, r3
 8007b22:	f002 fcfb 	bl	800a51c <pvPortMalloc>
 8007b26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d011      	beq.n	8007b52 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3350      	adds	r3, #80	@ 0x50
 8007b36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b40:	79fa      	ldrb	r2, [r7, #7]
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4613      	mov	r3, r2
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f805 	bl	8007b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b52:	69bb      	ldr	r3, [r7, #24]
	}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e002      	b.n	8007b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	69b8      	ldr	r0, [r7, #24]
 8007b8e:	f7ff fec3 	bl	8007918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b08a      	sub	sp, #40	@ 0x28
 8007ba6:	af02      	add	r7, sp, #8
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61bb      	str	r3, [r7, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d90b      	bls.n	8007bec <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	617b      	str	r3, [r7, #20]
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007bec:	2302      	movs	r3, #2
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fef8 	bl	80079ec <xQueueGenericCreateStatic>
 8007bfc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
	}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	613b      	str	r3, [r7, #16]
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d90b      	bls.n	8007c5c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	60fb      	str	r3, [r7, #12]
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff ff40 	bl	8007ae6 <xQueueGenericCreate>
 8007c66:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c74:	697b      	ldr	r3, [r7, #20]
	}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	@ 0x38
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10b      	bne.n	8007cb4 <xQueueGenericSend+0x34>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	e7fd      	b.n	8007cb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <xQueueGenericSend+0x42>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <xQueueGenericSend+0x46>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <xQueueGenericSend+0x48>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10b      	bne.n	8007ce4 <xQueueGenericSend+0x64>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	e7fd      	b.n	8007ce0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d103      	bne.n	8007cf2 <xQueueGenericSend+0x72>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <xQueueGenericSend+0x76>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <xQueueGenericSend+0x78>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <xQueueGenericSend+0x94>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	623b      	str	r3, [r7, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d14:	f001 fc74 	bl	8009600 <xTaskGetSchedulerState>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d102      	bne.n	8007d24 <xQueueGenericSend+0xa4>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <xQueueGenericSend+0xa8>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <xQueueGenericSend+0xaa>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <xQueueGenericSend+0xc6>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	61fb      	str	r3, [r7, #28]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d46:	f002 fac7 	bl	800a2d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <xQueueGenericSend+0xdc>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d129      	bne.n	8007db0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d62:	f000 fc6d 	bl	8008640 <prvCopyDataToQueue>
 8007d66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d010      	beq.n	8007d92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	3324      	adds	r3, #36	@ 0x24
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fa8d 	bl	8009294 <xTaskRemoveFromEventList>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d013      	beq.n	8007da8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d80:	4b3f      	ldr	r3, [pc, #252]	@ (8007e80 <xQueueGenericSend+0x200>)
 8007d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	e00a      	b.n	8007da8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d98:	4b39      	ldr	r3, [pc, #228]	@ (8007e80 <xQueueGenericSend+0x200>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007da8:	f002 fac8 	bl	800a33c <vPortExitCritical>
				return pdPASS;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e063      	b.n	8007e78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007db6:	f002 fac1 	bl	800a33c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e05c      	b.n	8007e78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d106      	bne.n	8007dd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fac7 	bl	800935c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dd2:	f002 fab3 	bl	800a33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dd6:	f001 f82f 	bl	8008e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dda:	f002 fa7d 	bl	800a2d8 <vPortEnterCritical>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007de4:	b25b      	sxtb	r3, r3
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d103      	bne.n	8007df4 <xQueueGenericSend+0x174>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d103      	bne.n	8007e0a <xQueueGenericSend+0x18a>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e0a:	f002 fa97 	bl	800a33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e0e:	1d3a      	adds	r2, r7, #4
 8007e10:	f107 0314 	add.w	r3, r7, #20
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fab6 	bl	8009388 <xTaskCheckForTimeOut>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d124      	bne.n	8007e6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e24:	f000 fd04 	bl	8008830 <prvIsQueueFull>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	3310      	adds	r3, #16
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 f9da 	bl	80091f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e3e:	f000 fc8f 	bl	8008760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e42:	f001 f807 	bl	8008e54 <xTaskResumeAll>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f47f af7c 	bne.w	8007d46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e80 <xQueueGenericSend+0x200>)
 8007e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	e772      	b.n	8007d46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e62:	f000 fc7d 	bl	8008760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e66:	f000 fff5 	bl	8008e54 <xTaskResumeAll>
 8007e6a:	e76c      	b.n	8007d46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e6e:	f000 fc77 	bl	8008760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e72:	f000 ffef 	bl	8008e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3738      	adds	r7, #56	@ 0x38
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b090      	sub	sp, #64	@ 0x40
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d103      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x3e>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <xQueueGenericSendFromISR+0x42>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <xQueueGenericSendFromISR+0x44>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d103      	bne.n	8007ef2 <xQueueGenericSendFromISR+0x6e>
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <xQueueGenericSendFromISR+0x72>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <xQueueGenericSendFromISR+0x74>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	623b      	str	r3, [r7, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f14:	f002 fac0 	bl	800a498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f18:	f3ef 8211 	mrs	r2, BASEPRI
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	61fa      	str	r2, [r7, #28]
 8007f2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <xQueueGenericSendFromISR+0xc2>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d12f      	bne.n	8007fa6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f5c:	f000 fb70 	bl	8008640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d112      	bne.n	8007f90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	3324      	adds	r3, #36	@ 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f98c 	bl	8009294 <xTaskRemoveFromEventList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e007      	b.n	8007fa0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f94:	3301      	adds	r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	b25a      	sxtb	r2, r3
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007fa4:	e001      	b.n	8007faa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3740      	adds	r7, #64	@ 0x40
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	@ 0x38
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	e7fd      	b.n	8007fe8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	61fb      	str	r3, [r7, #28]
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <xQueueGiveFromISR+0x5c>
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <xQueueGiveFromISR+0x60>
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <xQueueGiveFromISR+0x62>
 8008020:	2300      	movs	r3, #0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	61bb      	str	r3, [r7, #24]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800803e:	f002 fa2b 	bl	800a498 <vPortValidateInterruptPriority>
	__asm volatile
 8008042:	f3ef 8211 	mrs	r2, BASEPRI
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	617a      	str	r2, [r7, #20]
 8008058:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800805a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800805c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800806a:	429a      	cmp	r2, r3
 800806c:	d22b      	bcs.n	80080c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008080:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d112      	bne.n	80080b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	d016      	beq.n	80080c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	3324      	adds	r3, #36	@ 0x24
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f8fc 	bl	8009294 <xTaskRemoveFromEventList>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00e      	beq.n	80080c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e007      	b.n	80080c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080b4:	3301      	adds	r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	b25a      	sxtb	r2, r3
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80080c0:	2301      	movs	r3, #1
 80080c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c4:	e001      	b.n	80080ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f383 8811 	msr	BASEPRI, r3
}
 80080d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3738      	adds	r7, #56	@ 0x38
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	@ 0x30
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <xQueueReceive+0x32>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	623b      	str	r3, [r7, #32]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d103      	bne.n	8008120 <xQueueReceive+0x40>
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <xQueueReceive+0x44>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <xQueueReceive+0x46>
 8008124:	2300      	movs	r3, #0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <xQueueReceive+0x62>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	61fb      	str	r3, [r7, #28]
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	e7fd      	b.n	800813e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008142:	f001 fa5d 	bl	8009600 <xTaskGetSchedulerState>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <xQueueReceive+0x72>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <xQueueReceive+0x76>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <xQueueReceive+0x78>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <xQueueReceive+0x94>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	61bb      	str	r3, [r7, #24]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008174:	f002 f8b0 	bl	800a2d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01f      	beq.n	80081c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008188:	f000 fac4 	bl	8008714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	1e5a      	subs	r2, r3, #1
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00f      	beq.n	80081bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	3310      	adds	r3, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 f877 	bl	8009294 <xTaskRemoveFromEventList>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d007      	beq.n	80081bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081ac:	4b3c      	ldr	r3, [pc, #240]	@ (80082a0 <xQueueReceive+0x1c0>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081bc:	f002 f8be 	bl	800a33c <vPortExitCritical>
				return pdPASS;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e069      	b.n	8008298 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d103      	bne.n	80081d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081ca:	f002 f8b7 	bl	800a33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081ce:	2300      	movs	r3, #0
 80081d0:	e062      	b.n	8008298 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 f8bd 	bl	800935c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081e2:	2301      	movs	r3, #1
 80081e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081e6:	f002 f8a9 	bl	800a33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081ea:	f000 fe25 	bl	8008e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ee:	f002 f873 	bl	800a2d8 <vPortEnterCritical>
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d103      	bne.n	8008208 <xQueueReceive+0x128>
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800820e:	b25b      	sxtb	r3, r3
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d103      	bne.n	800821e <xQueueReceive+0x13e>
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800821e:	f002 f88d 	bl	800a33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008222:	1d3a      	adds	r2, r7, #4
 8008224:	f107 0310 	add.w	r3, r7, #16
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f001 f8ac 	bl	8009388 <xTaskCheckForTimeOut>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d123      	bne.n	800827e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008238:	f000 fae4 	bl	8008804 <prvIsQueueEmpty>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d017      	beq.n	8008272 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	3324      	adds	r3, #36	@ 0x24
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f000 ffd0 	bl	80091f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008252:	f000 fa85 	bl	8008760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008256:	f000 fdfd 	bl	8008e54 <xTaskResumeAll>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d189      	bne.n	8008174 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008260:	4b0f      	ldr	r3, [pc, #60]	@ (80082a0 <xQueueReceive+0x1c0>)
 8008262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	e780      	b.n	8008174 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008274:	f000 fa74 	bl	8008760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008278:	f000 fdec 	bl	8008e54 <xTaskResumeAll>
 800827c:	e77a      	b.n	8008174 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800827e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008280:	f000 fa6e 	bl	8008760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008284:	f000 fde6 	bl	8008e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800828a:	f000 fabb 	bl	8008804 <prvIsQueueEmpty>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f43f af6f 	beq.w	8008174 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008296:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008298:	4618      	mov	r0, r3
 800829a:	3730      	adds	r7, #48	@ 0x30
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	@ 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	623b      	str	r3, [r7, #32]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61fb      	str	r3, [r7, #28]
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	e7fd      	b.n	80082f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f8:	f001 f982 	bl	8009600 <xTaskGetSchedulerState>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <xQueueSemaphoreTake+0x64>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <xQueueSemaphoreTake+0x68>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <xQueueSemaphoreTake+0x6a>
 800830c:	2300      	movs	r3, #0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	61bb      	str	r3, [r7, #24]
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop
 8008328:	e7fd      	b.n	8008326 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800832a:	f001 ffd5 	bl	800a2d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800832e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d024      	beq.n	8008384 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	1e5a      	subs	r2, r3, #1
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800834a:	f001 fad3 	bl	80098f4 <pvTaskIncrementMutexHeldCount>
 800834e:	4602      	mov	r2, r0
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00f      	beq.n	800837c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800835c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835e:	3310      	adds	r3, #16
 8008360:	4618      	mov	r0, r3
 8008362:	f000 ff97 	bl	8009294 <xTaskRemoveFromEventList>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d007      	beq.n	800837c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800836c:	4b54      	ldr	r3, [pc, #336]	@ (80084c0 <xQueueSemaphoreTake+0x21c>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800837c:	f001 ffde 	bl	800a33c <vPortExitCritical>
				return pdPASS;
 8008380:	2301      	movs	r3, #1
 8008382:	e098      	b.n	80084b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d112      	bne.n	80083b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	617b      	str	r3, [r7, #20]
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083a8:	f001 ffc8 	bl	800a33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e082      	b.n	80084b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ffce 	bl	800935c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083c4:	f001 ffba 	bl	800a33c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c8:	f000 fd36 	bl	8008e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083cc:	f001 ff84 	bl	800a2d8 <vPortEnterCritical>
 80083d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d103      	bne.n	80083e6 <xQueueSemaphoreTake+0x142>
 80083de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083ec:	b25b      	sxtb	r3, r3
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d103      	bne.n	80083fc <xQueueSemaphoreTake+0x158>
 80083f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083fc:	f001 ff9e 	bl	800a33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008400:	463a      	mov	r2, r7
 8008402:	f107 030c 	add.w	r3, r7, #12
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f000 ffbd 	bl	8009388 <xTaskCheckForTimeOut>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d132      	bne.n	800847a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008414:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008416:	f000 f9f5 	bl	8008804 <prvIsQueueEmpty>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d026      	beq.n	800846e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008428:	f001 ff56 	bl	800a2d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f001 f903 	bl	800963c <xTaskPriorityInherit>
 8008436:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008438:	f001 ff80 	bl	800a33c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	3324      	adds	r3, #36	@ 0x24
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fed3 	bl	80091f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800844a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800844c:	f000 f988 	bl	8008760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008450:	f000 fd00 	bl	8008e54 <xTaskResumeAll>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	f47f af67 	bne.w	800832a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800845c:	4b18      	ldr	r3, [pc, #96]	@ (80084c0 <xQueueSemaphoreTake+0x21c>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	e75d      	b.n	800832a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800846e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008470:	f000 f976 	bl	8008760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008474:	f000 fcee 	bl	8008e54 <xTaskResumeAll>
 8008478:	e757      	b.n	800832a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800847a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800847c:	f000 f970 	bl	8008760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008480:	f000 fce8 	bl	8008e54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008484:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008486:	f000 f9bd 	bl	8008804 <prvIsQueueEmpty>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	f43f af4c 	beq.w	800832a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00d      	beq.n	80084b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008498:	f001 ff1e 	bl	800a2d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800849c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800849e:	f000 f8b7 	bl	8008610 <prvGetDisinheritPriorityAfterTimeout>
 80084a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 f99e 	bl	80097ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084b0:	f001 ff44 	bl	800a33c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3738      	adds	r7, #56	@ 0x38
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08e      	sub	sp, #56	@ 0x38
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	623b      	str	r3, [r7, #32]
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	e7fd      	b.n	80084ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <xQueueReceiveFromISR+0x3c>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <xQueueReceiveFromISR+0x40>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <xQueueReceiveFromISR+0x42>
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10b      	bne.n	8008522 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	61fb      	str	r3, [r7, #28]
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	e7fd      	b.n	800851e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008522:	f001 ffb9 	bl	800a498 <vPortValidateInterruptPriority>
	__asm volatile
 8008526:	f3ef 8211 	mrs	r2, BASEPRI
 800852a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	61ba      	str	r2, [r7, #24]
 800853c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800853e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008540:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008546:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02f      	beq.n	80085ae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855c:	f000 f8da 	bl	8008714 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	1e5a      	subs	r2, r3, #1
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008568:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008570:	d112      	bne.n	8008598 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d016      	beq.n	80085a8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	3310      	adds	r3, #16
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fe88 	bl	8009294 <xTaskRemoveFromEventList>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00e      	beq.n	80085a8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	e007      	b.n	80085a8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800859c:	3301      	adds	r3, #1
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	b25a      	sxtb	r2, r3
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ac:	e001      	b.n	80085b2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f383 8811 	msr	BASEPRI, r3
}
 80085bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3738      	adds	r7, #56	@ 0x38
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <vQueueDelete+0x2a>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	60bb      	str	r3, [r7, #8]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 f95e 	bl	80088b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f002 f858 	bl	800a6b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	e001      	b.n	8008632 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008632:	68fb      	ldr	r3, [r7, #12]
	}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800864c:	2300      	movs	r3, #0
 800864e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10d      	bne.n	800867a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d14d      	bne.n	8008702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	4618      	mov	r0, r3
 800866c:	f001 f84e 	bl	800970c <xTaskPriorityDisinherit>
 8008670:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	e043      	b.n	8008702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d119      	bne.n	80086b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6858      	ldr	r0, [r3, #4]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008688:	461a      	mov	r2, r3
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	f002 f9b8 	bl	800aa00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	441a      	add	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d32b      	bcc.n	8008702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	e026      	b.n	8008702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68d8      	ldr	r0, [r3, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086bc:	461a      	mov	r2, r3
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	f002 f99e 	bl	800aa00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086cc:	425b      	negs	r3, r3
 80086ce:	441a      	add	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d207      	bcs.n	80086f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e8:	425b      	negs	r3, r3
 80086ea:	441a      	add	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d105      	bne.n	8008702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	3b01      	subs	r3, #1
 8008700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800870a:	697b      	ldr	r3, [r7, #20]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	d018      	beq.n	8008758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872e:	441a      	add	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	429a      	cmp	r2, r3
 800873e:	d303      	bcc.n	8008748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68d9      	ldr	r1, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008750:	461a      	mov	r2, r3
 8008752:	6838      	ldr	r0, [r7, #0]
 8008754:	f002 f954 	bl	800aa00 <memcpy>
	}
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008768:	f001 fdb6 	bl	800a2d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008774:	e011      	b.n	800879a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	d012      	beq.n	80087a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3324      	adds	r3, #36	@ 0x24
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fd86 	bl	8009294 <xTaskRemoveFromEventList>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800878e:	f000 fe5f 	bl	8009450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	3b01      	subs	r3, #1
 8008796:	b2db      	uxtb	r3, r3
 8008798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800879a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dce9      	bgt.n	8008776 <prvUnlockQueue+0x16>
 80087a2:	e000      	b.n	80087a6 <prvUnlockQueue+0x46>
					break;
 80087a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	22ff      	movs	r2, #255	@ 0xff
 80087aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80087ae:	f001 fdc5 	bl	800a33c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087b2:	f001 fd91 	bl	800a2d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087be:	e011      	b.n	80087e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d012      	beq.n	80087ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3310      	adds	r3, #16
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fd61 	bl	8009294 <xTaskRemoveFromEventList>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087d8:	f000 fe3a 	bl	8009450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
 80087de:	3b01      	subs	r3, #1
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dce9      	bgt.n	80087c0 <prvUnlockQueue+0x60>
 80087ec:	e000      	b.n	80087f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	22ff      	movs	r2, #255	@ 0xff
 80087f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087f8:	f001 fda0 	bl	800a33c <vPortExitCritical>
}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800880c:	f001 fd64 	bl	800a2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008818:	2301      	movs	r3, #1
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e001      	b.n	8008822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008822:	f001 fd8b 	bl	800a33c <vPortExitCritical>

	return xReturn;
 8008826:	68fb      	ldr	r3, [r7, #12]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008838:	f001 fd4e 	bl	800a2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008844:	429a      	cmp	r2, r3
 8008846:	d102      	bne.n	800884e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008848:	2301      	movs	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
 800884c:	e001      	b.n	8008852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008852:	f001 fd73 	bl	800a33c <vPortExitCritical>

	return xReturn;
 8008856:	68fb      	ldr	r3, [r7, #12]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	e014      	b.n	800889a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008870:	4a0f      	ldr	r2, [pc, #60]	@ (80088b0 <vQueueAddToRegistry+0x50>)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800887c:	490c      	ldr	r1, [pc, #48]	@ (80088b0 <vQueueAddToRegistry+0x50>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008886:	4a0a      	ldr	r2, [pc, #40]	@ (80088b0 <vQueueAddToRegistry+0x50>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4413      	add	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008892:	e006      	b.n	80088a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b07      	cmp	r3, #7
 800889e:	d9e7      	bls.n	8008870 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	20000a38 	.word	0x20000a38

080088b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e016      	b.n	80088f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088c2:	4a10      	ldr	r2, [pc, #64]	@ (8008904 <vQueueUnregisterQueue+0x50>)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	4413      	add	r3, r2
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d10b      	bne.n	80088ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008904 <vQueueUnregisterQueue+0x50>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2100      	movs	r1, #0
 80088d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088dc:	4a09      	ldr	r2, [pc, #36]	@ (8008904 <vQueueUnregisterQueue+0x50>)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	4413      	add	r3, r2
 80088e4:	2200      	movs	r2, #0
 80088e6:	605a      	str	r2, [r3, #4]
				break;
 80088e8:	e006      	b.n	80088f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b07      	cmp	r3, #7
 80088f4:	d9e5      	bls.n	80088c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	20000a38 	.word	0x20000a38

08008908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008918:	f001 fcde 	bl	800a2d8 <vPortEnterCritical>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008922:	b25b      	sxtb	r3, r3
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d103      	bne.n	8008932 <vQueueWaitForMessageRestricted+0x2a>
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008938:	b25b      	sxtb	r3, r3
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d103      	bne.n	8008948 <vQueueWaitForMessageRestricted+0x40>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008948:	f001 fcf8 	bl	800a33c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	3324      	adds	r3, #36	@ 0x24
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fc6d 	bl	800923c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008962:	6978      	ldr	r0, [r7, #20]
 8008964:	f7ff fefc 	bl	8008760 <prvUnlockQueue>
	}
 8008968:	bf00      	nop
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	@ 0x38
 8008974:	af04      	add	r7, sp, #16
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800897e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10b      	bne.n	800899c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	623b      	str	r3, [r7, #32]
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	61fb      	str	r3, [r7, #28]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089ba:	23a8      	movs	r3, #168	@ 0xa8
 80089bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80089c2:	d00b      	beq.n	80089dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61bb      	str	r3, [r7, #24]
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01e      	beq.n	8008a22 <xTaskCreateStatic+0xb2>
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01b      	beq.n	8008a22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089fc:	2300      	movs	r3, #0
 80089fe:	9303      	str	r3, [sp, #12]
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	9302      	str	r3, [sp, #8]
 8008a04:	f107 0314 	add.w	r3, r7, #20
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f851 	bl	8008abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a1c:	f000 f8f6 	bl	8008c0c <prvAddNewTaskToReadyList>
 8008a20:	e001      	b.n	8008a26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a26:	697b      	ldr	r3, [r7, #20]
	}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3728      	adds	r7, #40	@ 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08c      	sub	sp, #48	@ 0x30
 8008a34:	af04      	add	r7, sp, #16
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 fd69 	bl	800a51c <pvPortMalloc>
 8008a4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00e      	beq.n	8008a70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a52:	20a8      	movs	r0, #168	@ 0xa8
 8008a54:	f001 fd62 	bl	800a51c <pvPortMalloc>
 8008a58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a66:	e005      	b.n	8008a74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a68:	6978      	ldr	r0, [r7, #20]
 8008a6a:	f001 fe25 	bl	800a6b8 <vPortFree>
 8008a6e:	e001      	b.n	8008a74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d017      	beq.n	8008aaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a82:	88fa      	ldrh	r2, [r7, #6]
 8008a84:	2300      	movs	r3, #0
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	9302      	str	r3, [sp, #8]
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f80f 	bl	8008abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a9e:	69f8      	ldr	r0, [r7, #28]
 8008aa0:	f000 f8b4 	bl	8008c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	61bb      	str	r3, [r7, #24]
 8008aa8:	e002      	b.n	8008ab0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008aae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
	}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3720      	adds	r7, #32
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	21a5      	movs	r1, #165	@ 0xa5
 8008ad6:	f001 ff0f 	bl	800a8f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f023 0307 	bic.w	r3, r3, #7
 8008af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	617b      	str	r3, [r7, #20]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01f      	beq.n	8008b5c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	e012      	b.n	8008b48 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	3334      	adds	r3, #52	@ 0x34
 8008b32:	460a      	mov	r2, r1
 8008b34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d006      	beq.n	8008b50 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	3301      	adds	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b0f      	cmp	r3, #15
 8008b4c:	d9e9      	bls.n	8008b22 <prvInitialiseNewTask+0x66>
 8008b4e:	e000      	b.n	8008b52 <prvInitialiseNewTask+0x96>
			{
				break;
 8008b50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b5a:	e003      	b.n	8008b64 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	2b37      	cmp	r3, #55	@ 0x37
 8008b68:	d901      	bls.n	8008b6e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b6a:	2337      	movs	r3, #55	@ 0x37
 8008b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fe33 	bl	80077f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fe2e 	bl	80077f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	3354      	adds	r3, #84	@ 0x54
 8008bbe:	224c      	movs	r2, #76	@ 0x4c
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 fe98 	bl	800a8f8 <memset>
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bca:	4a0d      	ldr	r2, [pc, #52]	@ (8008c00 <prvInitialiseNewTask+0x144>)
 8008bcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008c04 <prvInitialiseNewTask+0x148>)
 8008bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8008c08 <prvInitialiseNewTask+0x14c>)
 8008bd8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	68f9      	ldr	r1, [r7, #12]
 8008bde:	69b8      	ldr	r0, [r7, #24]
 8008be0:	f001 fa4a 	bl	800a078 <pxPortInitialiseStack>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000206c 	.word	0x2000206c
 8008c04:	200020d4 	.word	0x200020d4
 8008c08:	2000213c 	.word	0x2000213c

08008c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c14:	f001 fb60 	bl	800a2d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c18:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd0 <prvAddNewTaskToReadyList+0xc4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd0 <prvAddNewTaskToReadyList+0xc4>)
 8008c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c22:	4b2c      	ldr	r3, [pc, #176]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c30:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <prvAddNewTaskToReadyList+0xc4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d110      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c38:	f000 fc1e 	bl	8009478 <prvInitialiseTaskLists>
 8008c3c:	e00d      	b.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c3e:	4b26      	ldr	r3, [pc, #152]	@ (8008cd8 <prvAddNewTaskToReadyList+0xcc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c46:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d802      	bhi.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c54:	4a1f      	ldr	r2, [pc, #124]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c5a:	4b20      	ldr	r3, [pc, #128]	@ (8008cdc <prvAddNewTaskToReadyList+0xd0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	4a1e      	ldr	r2, [pc, #120]	@ (8008cdc <prvAddNewTaskToReadyList+0xd0>)
 8008c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c64:	4b1d      	ldr	r3, [pc, #116]	@ (8008cdc <prvAddNewTaskToReadyList+0xd0>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c70:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce0 <prvAddNewTaskToReadyList+0xd4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d903      	bls.n	8008c80 <prvAddNewTaskToReadyList+0x74>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ce0 <prvAddNewTaskToReadyList+0xd4>)
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ce4 <prvAddNewTaskToReadyList+0xd8>)
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f7fe fdb7 	bl	800780a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c9c:	f001 fb4e 	bl	800a33c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <prvAddNewTaskToReadyList+0xcc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00e      	beq.n	8008cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d207      	bcs.n	8008cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce8 <prvAddNewTaskToReadyList+0xdc>)
 8008cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000f4c 	.word	0x20000f4c
 8008cd4:	20000a78 	.word	0x20000a78
 8008cd8:	20000f58 	.word	0x20000f58
 8008cdc:	20000f68 	.word	0x20000f68
 8008ce0:	20000f54 	.word	0x20000f54
 8008ce4:	20000a7c 	.word	0x20000a7c
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d018      	beq.n	8008d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cfe:	4b14      	ldr	r3, [pc, #80]	@ (8008d50 <vTaskDelay+0x64>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00b      	beq.n	8008d1e <vTaskDelay+0x32>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	60bb      	str	r3, [r7, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d1e:	f000 f88b 	bl	8008e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d22:	2100      	movs	r1, #0
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fdf9 	bl	800991c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d2a:	f000 f893 	bl	8008e54 <xTaskResumeAll>
 8008d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d107      	bne.n	8008d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <vTaskDelay+0x68>)
 8008d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000f74 	.word	0x20000f74
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	@ 0x28
 8008d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d66:	463a      	mov	r2, r7
 8008d68:	1d39      	adds	r1, r7, #4
 8008d6a:	f107 0308 	add.w	r3, r7, #8
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fcea 	bl	8007748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	9202      	str	r2, [sp, #8]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	460a      	mov	r2, r1
 8008d86:	4924      	ldr	r1, [pc, #144]	@ (8008e18 <vTaskStartScheduler+0xc0>)
 8008d88:	4824      	ldr	r0, [pc, #144]	@ (8008e1c <vTaskStartScheduler+0xc4>)
 8008d8a:	f7ff fdf1 	bl	8008970 <xTaskCreateStatic>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4a23      	ldr	r2, [pc, #140]	@ (8008e20 <vTaskStartScheduler+0xc8>)
 8008d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d94:	4b22      	ldr	r3, [pc, #136]	@ (8008e20 <vTaskStartScheduler+0xc8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e001      	b.n	8008da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d102      	bne.n	8008db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dac:	f000 fe0a 	bl	80099c4 <xTimerCreateTimerTask>
 8008db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d11b      	bne.n	8008df0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
}
 8008dca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dcc:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <vTaskStartScheduler+0xcc>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3354      	adds	r3, #84	@ 0x54
 8008dd2:	4a15      	ldr	r2, [pc, #84]	@ (8008e28 <vTaskStartScheduler+0xd0>)
 8008dd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dd6:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <vTaskStartScheduler+0xd4>)
 8008dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ddc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dde:	4b14      	ldr	r3, [pc, #80]	@ (8008e30 <vTaskStartScheduler+0xd8>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008de4:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <vTaskStartScheduler+0xdc>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dea:	f001 f9d1 	bl	800a190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dee:	e00f      	b.n	8008e10 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d10b      	bne.n	8008e10 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	60fb      	str	r3, [r7, #12]
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <vTaskStartScheduler+0xb4>
}
 8008e10:	bf00      	nop
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	0800ab6c 	.word	0x0800ab6c
 8008e1c:	08009469 	.word	0x08009469
 8008e20:	20000f70 	.word	0x20000f70
 8008e24:	20000a78 	.word	0x20000a78
 8008e28:	20000020 	.word	0x20000020
 8008e2c:	20000f6c 	.word	0x20000f6c
 8008e30:	20000f58 	.word	0x20000f58
 8008e34:	20000f50 	.word	0x20000f50

08008e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e3c:	4b04      	ldr	r3, [pc, #16]	@ (8008e50 <vTaskSuspendAll+0x18>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3301      	adds	r3, #1
 8008e42:	4a03      	ldr	r2, [pc, #12]	@ (8008e50 <vTaskSuspendAll+0x18>)
 8008e44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e46:	bf00      	nop
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20000f74 	.word	0x20000f74

08008e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e62:	4b42      	ldr	r3, [pc, #264]	@ (8008f6c <xTaskResumeAll+0x118>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10b      	bne.n	8008e82 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	603b      	str	r3, [r7, #0]
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	e7fd      	b.n	8008e7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e82:	f001 fa29 	bl	800a2d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e86:	4b39      	ldr	r3, [pc, #228]	@ (8008f6c <xTaskResumeAll+0x118>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	4a37      	ldr	r2, [pc, #220]	@ (8008f6c <xTaskResumeAll+0x118>)
 8008e8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e90:	4b36      	ldr	r3, [pc, #216]	@ (8008f6c <xTaskResumeAll+0x118>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d162      	bne.n	8008f5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e98:	4b35      	ldr	r3, [pc, #212]	@ (8008f70 <xTaskResumeAll+0x11c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d05e      	beq.n	8008f5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea0:	e02f      	b.n	8008f02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea2:	4b34      	ldr	r3, [pc, #208]	@ (8008f74 <xTaskResumeAll+0x120>)
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3318      	adds	r3, #24
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fd08 	bl	80078c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fd03 	bl	80078c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f78 <xTaskResumeAll+0x124>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d903      	bls.n	8008ed2 <xTaskResumeAll+0x7e>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ece:	4a2a      	ldr	r2, [pc, #168]	@ (8008f78 <xTaskResumeAll+0x124>)
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a27      	ldr	r2, [pc, #156]	@ (8008f7c <xTaskResumeAll+0x128>)
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f7fe fc8e 	bl	800780a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef2:	4b23      	ldr	r3, [pc, #140]	@ (8008f80 <xTaskResumeAll+0x12c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d302      	bcc.n	8008f02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008efc:	4b21      	ldr	r3, [pc, #132]	@ (8008f84 <xTaskResumeAll+0x130>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f02:	4b1c      	ldr	r3, [pc, #112]	@ (8008f74 <xTaskResumeAll+0x120>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1cb      	bne.n	8008ea2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f10:	f000 fb56 	bl	80095c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f14:	4b1c      	ldr	r3, [pc, #112]	@ (8008f88 <xTaskResumeAll+0x134>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d010      	beq.n	8008f42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f20:	f000 f846 	bl	8008fb0 <xTaskIncrementTick>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008f2a:	4b16      	ldr	r3, [pc, #88]	@ (8008f84 <xTaskResumeAll+0x130>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f1      	bne.n	8008f20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008f3c:	4b12      	ldr	r3, [pc, #72]	@ (8008f88 <xTaskResumeAll+0x134>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f42:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <xTaskResumeAll+0x130>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d009      	beq.n	8008f5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f8c <xTaskResumeAll+0x138>)
 8008f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f5e:	f001 f9ed 	bl	800a33c <vPortExitCritical>

	return xAlreadyYielded;
 8008f62:	68bb      	ldr	r3, [r7, #8]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000f74 	.word	0x20000f74
 8008f70:	20000f4c 	.word	0x20000f4c
 8008f74:	20000f0c 	.word	0x20000f0c
 8008f78:	20000f54 	.word	0x20000f54
 8008f7c:	20000a7c 	.word	0x20000a7c
 8008f80:	20000a78 	.word	0x20000a78
 8008f84:	20000f60 	.word	0x20000f60
 8008f88:	20000f5c 	.word	0x20000f5c
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f96:	4b05      	ldr	r3, [pc, #20]	@ (8008fac <xTaskGetTickCount+0x1c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f9c:	687b      	ldr	r3, [r7, #4]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20000f50 	.word	0x20000f50

08008fb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fba:	4b4f      	ldr	r3, [pc, #316]	@ (80090f8 <xTaskIncrementTick+0x148>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f040 8090 	bne.w	80090e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80090fc <xTaskIncrementTick+0x14c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80090fc <xTaskIncrementTick+0x14c>)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d121      	bne.n	800901c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fd8:	4b49      	ldr	r3, [pc, #292]	@ (8009100 <xTaskIncrementTick+0x150>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00b      	beq.n	8008ffa <xTaskIncrementTick+0x4a>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	603b      	str	r3, [r7, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	e7fd      	b.n	8008ff6 <xTaskIncrementTick+0x46>
 8008ffa:	4b41      	ldr	r3, [pc, #260]	@ (8009100 <xTaskIncrementTick+0x150>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	4b40      	ldr	r3, [pc, #256]	@ (8009104 <xTaskIncrementTick+0x154>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a3e      	ldr	r2, [pc, #248]	@ (8009100 <xTaskIncrementTick+0x150>)
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	4a3e      	ldr	r2, [pc, #248]	@ (8009104 <xTaskIncrementTick+0x154>)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	4b3e      	ldr	r3, [pc, #248]	@ (8009108 <xTaskIncrementTick+0x158>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a3c      	ldr	r2, [pc, #240]	@ (8009108 <xTaskIncrementTick+0x158>)
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	f000 fad2 	bl	80095c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800901c:	4b3b      	ldr	r3, [pc, #236]	@ (800910c <xTaskIncrementTick+0x15c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	429a      	cmp	r2, r3
 8009024:	d349      	bcc.n	80090ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009026:	4b36      	ldr	r3, [pc, #216]	@ (8009100 <xTaskIncrementTick+0x150>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009030:	4b36      	ldr	r3, [pc, #216]	@ (800910c <xTaskIncrementTick+0x15c>)
 8009032:	f04f 32ff 	mov.w	r2, #4294967295
 8009036:	601a      	str	r2, [r3, #0]
					break;
 8009038:	e03f      	b.n	80090ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903a:	4b31      	ldr	r3, [pc, #196]	@ (8009100 <xTaskIncrementTick+0x150>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	429a      	cmp	r2, r3
 8009050:	d203      	bcs.n	800905a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009052:	4a2e      	ldr	r2, [pc, #184]	@ (800910c <xTaskIncrementTick+0x15c>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009058:	e02f      	b.n	80090ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	3304      	adds	r3, #4
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe fc30 	bl	80078c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009068:	2b00      	cmp	r3, #0
 800906a:	d004      	beq.n	8009076 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	3318      	adds	r3, #24
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fc27 	bl	80078c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907a:	4b25      	ldr	r3, [pc, #148]	@ (8009110 <xTaskIncrementTick+0x160>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d903      	bls.n	800908a <xTaskIncrementTick+0xda>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009086:	4a22      	ldr	r2, [pc, #136]	@ (8009110 <xTaskIncrementTick+0x160>)
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4a1f      	ldr	r2, [pc, #124]	@ (8009114 <xTaskIncrementTick+0x164>)
 8009098:	441a      	add	r2, r3
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	3304      	adds	r3, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f7fe fbb2 	bl	800780a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009118 <xTaskIncrementTick+0x168>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3b8      	bcc.n	8009026 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b8:	e7b5      	b.n	8009026 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090ba:	4b17      	ldr	r3, [pc, #92]	@ (8009118 <xTaskIncrementTick+0x168>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c0:	4914      	ldr	r1, [pc, #80]	@ (8009114 <xTaskIncrementTick+0x164>)
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d901      	bls.n	80090d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090d6:	4b11      	ldr	r3, [pc, #68]	@ (800911c <xTaskIncrementTick+0x16c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80090de:	2301      	movs	r3, #1
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e004      	b.n	80090ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009120 <xTaskIncrementTick+0x170>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009120 <xTaskIncrementTick+0x170>)
 80090ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090ee:	697b      	ldr	r3, [r7, #20]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20000f74 	.word	0x20000f74
 80090fc:	20000f50 	.word	0x20000f50
 8009100:	20000f04 	.word	0x20000f04
 8009104:	20000f08 	.word	0x20000f08
 8009108:	20000f64 	.word	0x20000f64
 800910c:	20000f6c 	.word	0x20000f6c
 8009110:	20000f54 	.word	0x20000f54
 8009114:	20000a7c 	.word	0x20000a7c
 8009118:	20000a78 	.word	0x20000a78
 800911c:	20000f60 	.word	0x20000f60
 8009120:	20000f5c 	.word	0x20000f5c

08009124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800912a:	4b2b      	ldr	r3, [pc, #172]	@ (80091d8 <vTaskSwitchContext+0xb4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009132:	4b2a      	ldr	r3, [pc, #168]	@ (80091dc <vTaskSwitchContext+0xb8>)
 8009134:	2201      	movs	r2, #1
 8009136:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009138:	e047      	b.n	80091ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800913a:	4b28      	ldr	r3, [pc, #160]	@ (80091dc <vTaskSwitchContext+0xb8>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009140:	4b27      	ldr	r3, [pc, #156]	@ (80091e0 <vTaskSwitchContext+0xbc>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	e011      	b.n	800916c <vTaskSwitchContext+0x48>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <vTaskSwitchContext+0x42>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <vTaskSwitchContext+0x3e>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3b01      	subs	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	491d      	ldr	r1, [pc, #116]	@ (80091e4 <vTaskSwitchContext+0xc0>)
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0e3      	beq.n	8009148 <vTaskSwitchContext+0x24>
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4a16      	ldr	r2, [pc, #88]	@ (80091e4 <vTaskSwitchContext+0xc0>)
 800918c:	4413      	add	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	3308      	adds	r3, #8
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d104      	bne.n	80091b0 <vTaskSwitchContext+0x8c>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	605a      	str	r2, [r3, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	4a0c      	ldr	r2, [pc, #48]	@ (80091e8 <vTaskSwitchContext+0xc4>)
 80091b8:	6013      	str	r3, [r2, #0]
 80091ba:	4a09      	ldr	r2, [pc, #36]	@ (80091e0 <vTaskSwitchContext+0xbc>)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091c0:	4b09      	ldr	r3, [pc, #36]	@ (80091e8 <vTaskSwitchContext+0xc4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3354      	adds	r3, #84	@ 0x54
 80091c6:	4a09      	ldr	r2, [pc, #36]	@ (80091ec <vTaskSwitchContext+0xc8>)
 80091c8:	6013      	str	r3, [r2, #0]
}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20000f74 	.word	0x20000f74
 80091dc:	20000f60 	.word	0x20000f60
 80091e0:	20000f54 	.word	0x20000f54
 80091e4:	20000a7c 	.word	0x20000a7c
 80091e8:	20000a78 	.word	0x20000a78
 80091ec:	20000020 	.word	0x20000020

080091f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <vTaskPlaceOnEventList+0x48>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3318      	adds	r3, #24
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7fe fb16 	bl	8007852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009226:	2101      	movs	r1, #1
 8009228:	6838      	ldr	r0, [r7, #0]
 800922a:	f000 fb77 	bl	800991c <prvAddCurrentTaskToDelayedList>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000a78 	.word	0x20000a78

0800923c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	617b      	str	r3, [r7, #20]
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009266:	4b0a      	ldr	r3, [pc, #40]	@ (8009290 <vTaskPlaceOnEventListRestricted+0x54>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3318      	adds	r3, #24
 800926c:	4619      	mov	r1, r3
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7fe facb 	bl	800780a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800927a:	f04f 33ff 	mov.w	r3, #4294967295
 800927e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	68b8      	ldr	r0, [r7, #8]
 8009284:	f000 fb4a 	bl	800991c <prvAddCurrentTaskToDelayedList>
	}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000a78 	.word	0x20000a78

08009294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10b      	bne.n	80092c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	60fb      	str	r3, [r7, #12]
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	e7fd      	b.n	80092be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	3318      	adds	r3, #24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fafc 	bl	80078c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009344 <xTaskRemoveFromEventList+0xb0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11d      	bne.n	8009310 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe faf3 	bl	80078c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e2:	4b19      	ldr	r3, [pc, #100]	@ (8009348 <xTaskRemoveFromEventList+0xb4>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d903      	bls.n	80092f2 <xTaskRemoveFromEventList+0x5e>
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	4a16      	ldr	r2, [pc, #88]	@ (8009348 <xTaskRemoveFromEventList+0xb4>)
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4a13      	ldr	r2, [pc, #76]	@ (800934c <xTaskRemoveFromEventList+0xb8>)
 8009300:	441a      	add	r2, r3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3304      	adds	r3, #4
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7fe fa7e 	bl	800780a <vListInsertEnd>
 800930e:	e005      	b.n	800931c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3318      	adds	r3, #24
 8009314:	4619      	mov	r1, r3
 8009316:	480e      	ldr	r0, [pc, #56]	@ (8009350 <xTaskRemoveFromEventList+0xbc>)
 8009318:	f7fe fa77 	bl	800780a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009320:	4b0c      	ldr	r3, [pc, #48]	@ (8009354 <xTaskRemoveFromEventList+0xc0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	429a      	cmp	r2, r3
 8009328:	d905      	bls.n	8009336 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800932e:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <xTaskRemoveFromEventList+0xc4>)
 8009330:	2201      	movs	r2, #1
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e001      	b.n	800933a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800933a:	697b      	ldr	r3, [r7, #20]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20000f74 	.word	0x20000f74
 8009348:	20000f54 	.word	0x20000f54
 800934c:	20000a7c 	.word	0x20000a7c
 8009350:	20000f0c 	.word	0x20000f0c
 8009354:	20000a78 	.word	0x20000a78
 8009358:	20000f60 	.word	0x20000f60

0800935c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009364:	4b06      	ldr	r3, [pc, #24]	@ (8009380 <vTaskInternalSetTimeOutState+0x24>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800936c:	4b05      	ldr	r3, [pc, #20]	@ (8009384 <vTaskInternalSetTimeOutState+0x28>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	605a      	str	r2, [r3, #4]
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000f64 	.word	0x20000f64
 8009384:	20000f50 	.word	0x20000f50

08009388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10b      	bne.n	80093b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	613b      	str	r3, [r7, #16]
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	e7fd      	b.n	80093ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10b      	bne.n	80093ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80093ce:	f000 ff83 	bl	800a2d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009448 <xTaskCheckForTimeOut+0xc0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ea:	d102      	bne.n	80093f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	e023      	b.n	800943a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b15      	ldr	r3, [pc, #84]	@ (800944c <xTaskCheckForTimeOut+0xc4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d007      	beq.n	800940e <xTaskCheckForTimeOut+0x86>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	429a      	cmp	r2, r3
 8009406:	d302      	bcc.n	800940e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e015      	b.n	800943a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	429a      	cmp	r2, r3
 8009416:	d20b      	bcs.n	8009430 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff ff99 	bl	800935c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e004      	b.n	800943a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800943a:	f000 ff7f 	bl	800a33c <vPortExitCritical>

	return xReturn;
 800943e:	69fb      	ldr	r3, [r7, #28]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3720      	adds	r7, #32
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000f50 	.word	0x20000f50
 800944c:	20000f64 	.word	0x20000f64

08009450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009454:	4b03      	ldr	r3, [pc, #12]	@ (8009464 <vTaskMissedYield+0x14>)
 8009456:	2201      	movs	r2, #1
 8009458:	601a      	str	r2, [r3, #0]
}
 800945a:	bf00      	nop
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20000f60 	.word	0x20000f60

08009468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009470:	f000 f842 	bl	80094f8 <prvCheckTasksWaitingTermination>
 8009474:	e7fc      	b.n	8009470 <prvIdleTask+0x8>
	...

08009478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800947e:	2300      	movs	r3, #0
 8009480:	607b      	str	r3, [r7, #4]
 8009482:	e00c      	b.n	800949e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4a12      	ldr	r2, [pc, #72]	@ (80094d8 <prvInitialiseTaskLists+0x60>)
 8009490:	4413      	add	r3, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe f98c 	bl	80077b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3301      	adds	r3, #1
 800949c:	607b      	str	r3, [r7, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b37      	cmp	r3, #55	@ 0x37
 80094a2:	d9ef      	bls.n	8009484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094a4:	480d      	ldr	r0, [pc, #52]	@ (80094dc <prvInitialiseTaskLists+0x64>)
 80094a6:	f7fe f983 	bl	80077b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094aa:	480d      	ldr	r0, [pc, #52]	@ (80094e0 <prvInitialiseTaskLists+0x68>)
 80094ac:	f7fe f980 	bl	80077b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094b0:	480c      	ldr	r0, [pc, #48]	@ (80094e4 <prvInitialiseTaskLists+0x6c>)
 80094b2:	f7fe f97d 	bl	80077b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094b6:	480c      	ldr	r0, [pc, #48]	@ (80094e8 <prvInitialiseTaskLists+0x70>)
 80094b8:	f7fe f97a 	bl	80077b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094bc:	480b      	ldr	r0, [pc, #44]	@ (80094ec <prvInitialiseTaskLists+0x74>)
 80094be:	f7fe f977 	bl	80077b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094c2:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <prvInitialiseTaskLists+0x78>)
 80094c4:	4a05      	ldr	r2, [pc, #20]	@ (80094dc <prvInitialiseTaskLists+0x64>)
 80094c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <prvInitialiseTaskLists+0x7c>)
 80094ca:	4a05      	ldr	r2, [pc, #20]	@ (80094e0 <prvInitialiseTaskLists+0x68>)
 80094cc:	601a      	str	r2, [r3, #0]
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000a7c 	.word	0x20000a7c
 80094dc:	20000edc 	.word	0x20000edc
 80094e0:	20000ef0 	.word	0x20000ef0
 80094e4:	20000f0c 	.word	0x20000f0c
 80094e8:	20000f20 	.word	0x20000f20
 80094ec:	20000f38 	.word	0x20000f38
 80094f0:	20000f04 	.word	0x20000f04
 80094f4:	20000f08 	.word	0x20000f08

080094f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094fe:	e019      	b.n	8009534 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009500:	f000 feea 	bl	800a2d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009504:	4b10      	ldr	r3, [pc, #64]	@ (8009548 <prvCheckTasksWaitingTermination+0x50>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3304      	adds	r3, #4
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe f9d7 	bl	80078c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009516:	4b0d      	ldr	r3, [pc, #52]	@ (800954c <prvCheckTasksWaitingTermination+0x54>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3b01      	subs	r3, #1
 800951c:	4a0b      	ldr	r2, [pc, #44]	@ (800954c <prvCheckTasksWaitingTermination+0x54>)
 800951e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009520:	4b0b      	ldr	r3, [pc, #44]	@ (8009550 <prvCheckTasksWaitingTermination+0x58>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3b01      	subs	r3, #1
 8009526:	4a0a      	ldr	r2, [pc, #40]	@ (8009550 <prvCheckTasksWaitingTermination+0x58>)
 8009528:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800952a:	f000 ff07 	bl	800a33c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f810 	bl	8009554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <prvCheckTasksWaitingTermination+0x58>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e1      	bne.n	8009500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800953c:	bf00      	nop
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000f20 	.word	0x20000f20
 800954c:	20000f4c 	.word	0x20000f4c
 8009550:	20000f34 	.word	0x20000f34

08009554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3354      	adds	r3, #84	@ 0x54
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f9d1 	bl	800a908 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800956c:	2b00      	cmp	r3, #0
 800956e:	d108      	bne.n	8009582 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009574:	4618      	mov	r0, r3
 8009576:	f001 f89f 	bl	800a6b8 <vPortFree>
				vPortFree( pxTCB );
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 f89c 	bl	800a6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009580:	e019      	b.n	80095b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009588:	2b01      	cmp	r3, #1
 800958a:	d103      	bne.n	8009594 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f893 	bl	800a6b8 <vPortFree>
	}
 8009592:	e010      	b.n	80095b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800959a:	2b02      	cmp	r3, #2
 800959c:	d00b      	beq.n	80095b6 <prvDeleteTCB+0x62>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	60fb      	str	r3, [r7, #12]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <prvDeleteTCB+0x5e>
	}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <prvResetNextTaskUnblockTime+0x38>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095d0:	4b0a      	ldr	r3, [pc, #40]	@ (80095fc <prvResetNextTaskUnblockTime+0x3c>)
 80095d2:	f04f 32ff 	mov.w	r2, #4294967295
 80095d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095d8:	e008      	b.n	80095ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095da:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <prvResetNextTaskUnblockTime+0x38>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	4a04      	ldr	r2, [pc, #16]	@ (80095fc <prvResetNextTaskUnblockTime+0x3c>)
 80095ea:	6013      	str	r3, [r2, #0]
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	20000f04 	.word	0x20000f04
 80095fc:	20000f6c 	.word	0x20000f6c

08009600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009606:	4b0b      	ldr	r3, [pc, #44]	@ (8009634 <xTaskGetSchedulerState+0x34>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800960e:	2301      	movs	r3, #1
 8009610:	607b      	str	r3, [r7, #4]
 8009612:	e008      	b.n	8009626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009614:	4b08      	ldr	r3, [pc, #32]	@ (8009638 <xTaskGetSchedulerState+0x38>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800961c:	2302      	movs	r3, #2
 800961e:	607b      	str	r3, [r7, #4]
 8009620:	e001      	b.n	8009626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009622:	2300      	movs	r3, #0
 8009624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009626:	687b      	ldr	r3, [r7, #4]
	}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	20000f58 	.word	0x20000f58
 8009638:	20000f74 	.word	0x20000f74

0800963c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d051      	beq.n	80096f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009656:	4b2a      	ldr	r3, [pc, #168]	@ (8009700 <xTaskPriorityInherit+0xc4>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965c:	429a      	cmp	r2, r3
 800965e:	d241      	bcs.n	80096e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	db06      	blt.n	8009676 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009668:	4b25      	ldr	r3, [pc, #148]	@ (8009700 <xTaskPriorityInherit+0xc4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6959      	ldr	r1, [r3, #20]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4a1f      	ldr	r2, [pc, #124]	@ (8009704 <xTaskPriorityInherit+0xc8>)
 8009688:	4413      	add	r3, r2
 800968a:	4299      	cmp	r1, r3
 800968c:	d122      	bne.n	80096d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	3304      	adds	r3, #4
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe f916 	bl	80078c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009698:	4b19      	ldr	r3, [pc, #100]	@ (8009700 <xTaskPriorityInherit+0xc4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a6:	4b18      	ldr	r3, [pc, #96]	@ (8009708 <xTaskPriorityInherit+0xcc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d903      	bls.n	80096b6 <xTaskPriorityInherit+0x7a>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b2:	4a15      	ldr	r2, [pc, #84]	@ (8009708 <xTaskPriorityInherit+0xcc>)
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4a10      	ldr	r2, [pc, #64]	@ (8009704 <xTaskPriorityInherit+0xc8>)
 80096c4:	441a      	add	r2, r3
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	3304      	adds	r3, #4
 80096ca:	4619      	mov	r1, r3
 80096cc:	4610      	mov	r0, r2
 80096ce:	f7fe f89c 	bl	800780a <vListInsertEnd>
 80096d2:	e004      	b.n	80096de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <xTaskPriorityInherit+0xc4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80096de:	2301      	movs	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e008      	b.n	80096f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096e8:	4b05      	ldr	r3, [pc, #20]	@ (8009700 <xTaskPriorityInherit+0xc4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d201      	bcs.n	80096f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80096f2:	2301      	movs	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096f6:	68fb      	ldr	r3, [r7, #12]
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	20000a78 	.word	0x20000a78
 8009704:	20000a7c 	.word	0x20000a7c
 8009708:	20000f54 	.word	0x20000f54

0800970c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d058      	beq.n	80097d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009722:	4b2f      	ldr	r3, [pc, #188]	@ (80097e0 <xTaskPriorityDisinherit+0xd4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d00b      	beq.n	8009744 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60fb      	str	r3, [r7, #12]
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	e7fd      	b.n	8009740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10b      	bne.n	8009764 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	60bb      	str	r3, [r7, #8]
}
 800975e:	bf00      	nop
 8009760:	bf00      	nop
 8009762:	e7fd      	b.n	8009760 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009776:	429a      	cmp	r2, r3
 8009778:	d02c      	beq.n	80097d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800977e:	2b00      	cmp	r3, #0
 8009780:	d128      	bne.n	80097d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	3304      	adds	r3, #4
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe f89c 	bl	80078c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a4:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <xTaskPriorityDisinherit+0xd8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d903      	bls.n	80097b4 <xTaskPriorityDisinherit+0xa8>
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	4a0c      	ldr	r2, [pc, #48]	@ (80097e4 <xTaskPriorityDisinherit+0xd8>)
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4a09      	ldr	r2, [pc, #36]	@ (80097e8 <xTaskPriorityDisinherit+0xdc>)
 80097c2:	441a      	add	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f7fe f81d 	bl	800780a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097d4:	697b      	ldr	r3, [r7, #20]
	}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000a78 	.word	0x20000a78
 80097e4:	20000f54 	.word	0x20000f54
 80097e8:	20000a7c 	.word	0x20000a7c

080097ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80097fa:	2301      	movs	r3, #1
 80097fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d06c      	beq.n	80098de <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10b      	bne.n	8009824 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	60fb      	str	r3, [r7, #12]
}
 800981e:	bf00      	nop
 8009820:	bf00      	nop
 8009822:	e7fd      	b.n	8009820 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d902      	bls.n	8009834 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	61fb      	str	r3, [r7, #28]
 8009832:	e002      	b.n	800983a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009838:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	429a      	cmp	r2, r3
 8009842:	d04c      	beq.n	80098de <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	429a      	cmp	r2, r3
 800984c:	d147      	bne.n	80098de <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800984e:	4b26      	ldr	r3, [pc, #152]	@ (80098e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	429a      	cmp	r2, r3
 8009856:	d10b      	bne.n	8009870 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	60bb      	str	r3, [r7, #8]
}
 800986a:	bf00      	nop
 800986c:	bf00      	nop
 800986e:	e7fd      	b.n	800986c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009874:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	db04      	blt.n	800988e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	6959      	ldr	r1, [r3, #20]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4a13      	ldr	r2, [pc, #76]	@ (80098ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800989e:	4413      	add	r3, r2
 80098a0:	4299      	cmp	r1, r3
 80098a2:	d11c      	bne.n	80098de <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fe f80b 	bl	80078c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b2:	4b0f      	ldr	r3, [pc, #60]	@ (80098f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d903      	bls.n	80098c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098be:	4a0c      	ldr	r2, [pc, #48]	@ (80098f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4a07      	ldr	r2, [pc, #28]	@ (80098ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80098d0:	441a      	add	r2, r3
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	3304      	adds	r3, #4
 80098d6:	4619      	mov	r1, r3
 80098d8:	4610      	mov	r0, r2
 80098da:	f7fd ff96 	bl	800780a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098de:	bf00      	nop
 80098e0:	3720      	adds	r7, #32
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20000a78 	.word	0x20000a78
 80098ec:	20000a7c 	.word	0x20000a7c
 80098f0:	20000f54 	.word	0x20000f54

080098f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80098f8:	4b07      	ldr	r3, [pc, #28]	@ (8009918 <pvTaskIncrementMutexHeldCount+0x24>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009900:	4b05      	ldr	r3, [pc, #20]	@ (8009918 <pvTaskIncrementMutexHeldCount+0x24>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009906:	3201      	adds	r2, #1
 8009908:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800990a:	4b03      	ldr	r3, [pc, #12]	@ (8009918 <pvTaskIncrementMutexHeldCount+0x24>)
 800990c:	681b      	ldr	r3, [r3, #0]
	}
 800990e:	4618      	mov	r0, r3
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20000a78 	.word	0x20000a78

0800991c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009926:	4b21      	ldr	r3, [pc, #132]	@ (80099ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800992c:	4b20      	ldr	r3, [pc, #128]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd ffc6 	bl	80078c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993e:	d10a      	bne.n	8009956 <prvAddCurrentTaskToDelayedList+0x3a>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009946:	4b1a      	ldr	r3, [pc, #104]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3304      	adds	r3, #4
 800994c:	4619      	mov	r1, r3
 800994e:	4819      	ldr	r0, [pc, #100]	@ (80099b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009950:	f7fd ff5b 	bl	800780a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009954:	e026      	b.n	80099a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4413      	add	r3, r2
 800995c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800995e:	4b14      	ldr	r3, [pc, #80]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	429a      	cmp	r2, r3
 800996c:	d209      	bcs.n	8009982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996e:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	4b0f      	ldr	r3, [pc, #60]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fd ff69 	bl	8007852 <vListInsert>
}
 8009980:	e010      	b.n	80099a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009982:	4b0e      	ldr	r3, [pc, #56]	@ (80099bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	4b0a      	ldr	r3, [pc, #40]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3304      	adds	r3, #4
 800998c:	4619      	mov	r1, r3
 800998e:	4610      	mov	r0, r2
 8009990:	f7fd ff5f 	bl	8007852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009994:	4b0a      	ldr	r3, [pc, #40]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	429a      	cmp	r2, r3
 800999c:	d202      	bcs.n	80099a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800999e:	4a08      	ldr	r2, [pc, #32]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6013      	str	r3, [r2, #0]
}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000f50 	.word	0x20000f50
 80099b0:	20000a78 	.word	0x20000a78
 80099b4:	20000f38 	.word	0x20000f38
 80099b8:	20000f08 	.word	0x20000f08
 80099bc:	20000f04 	.word	0x20000f04
 80099c0:	20000f6c 	.word	0x20000f6c

080099c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	@ 0x28
 80099c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099ce:	f000 fb13 	bl	8009ff8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a48 <xTimerCreateTimerTask+0x84>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d021      	beq.n	8009a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099e2:	1d3a      	adds	r2, r7, #4
 80099e4:	f107 0108 	add.w	r1, r7, #8
 80099e8:	f107 030c 	add.w	r3, r7, #12
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fd fec5 	bl	800777c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	9202      	str	r2, [sp, #8]
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	2302      	movs	r3, #2
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	2300      	movs	r3, #0
 8009a02:	460a      	mov	r2, r1
 8009a04:	4911      	ldr	r1, [pc, #68]	@ (8009a4c <xTimerCreateTimerTask+0x88>)
 8009a06:	4812      	ldr	r0, [pc, #72]	@ (8009a50 <xTimerCreateTimerTask+0x8c>)
 8009a08:	f7fe ffb2 	bl	8008970 <xTaskCreateStatic>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	4a11      	ldr	r2, [pc, #68]	@ (8009a54 <xTimerCreateTimerTask+0x90>)
 8009a10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a12:	4b10      	ldr	r3, [pc, #64]	@ (8009a54 <xTimerCreateTimerTask+0x90>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10b      	bne.n	8009a3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	613b      	str	r3, [r7, #16]
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	e7fd      	b.n	8009a38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a3c:	697b      	ldr	r3, [r7, #20]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000fa8 	.word	0x20000fa8
 8009a4c:	0800ab74 	.word	0x0800ab74
 8009a50:	08009b91 	.word	0x08009b91
 8009a54:	20000fac 	.word	0x20000fac

08009a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08a      	sub	sp, #40	@ 0x28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10b      	bne.n	8009a88 <xTimerGenericCommand+0x30>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	623b      	str	r3, [r7, #32]
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	e7fd      	b.n	8009a84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a88:	4b19      	ldr	r3, [pc, #100]	@ (8009af0 <xTimerGenericCommand+0x98>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02a      	beq.n	8009ae6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b05      	cmp	r3, #5
 8009aa0:	dc18      	bgt.n	8009ad4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009aa2:	f7ff fdad 	bl	8009600 <xTaskGetSchedulerState>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d109      	bne.n	8009ac0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009aac:	4b10      	ldr	r3, [pc, #64]	@ (8009af0 <xTimerGenericCommand+0x98>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	f107 0110 	add.w	r1, r7, #16
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab8:	f7fe f8e2 	bl	8007c80 <xQueueGenericSend>
 8009abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8009abe:	e012      	b.n	8009ae6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8009af0 <xTimerGenericCommand+0x98>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	f107 0110 	add.w	r1, r7, #16
 8009ac8:	2300      	movs	r3, #0
 8009aca:	2200      	movs	r2, #0
 8009acc:	f7fe f8d8 	bl	8007c80 <xQueueGenericSend>
 8009ad0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ad2:	e008      	b.n	8009ae6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ad4:	4b06      	ldr	r3, [pc, #24]	@ (8009af0 <xTimerGenericCommand+0x98>)
 8009ad6:	6818      	ldr	r0, [r3, #0]
 8009ad8:	f107 0110 	add.w	r1, r7, #16
 8009adc:	2300      	movs	r3, #0
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	f7fe f9d0 	bl	8007e84 <xQueueGenericSendFromISR>
 8009ae4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3728      	adds	r7, #40	@ 0x28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20000fa8 	.word	0x20000fa8

08009af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afe:	4b23      	ldr	r3, [pc, #140]	@ (8009b8c <prvProcessExpiredTimer+0x98>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fd fed9 	bl	80078c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d023      	beq.n	8009b68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	699a      	ldr	r2, [r3, #24]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	18d1      	adds	r1, r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	6978      	ldr	r0, [r7, #20]
 8009b2e:	f000 f8d5 	bl	8009cdc <prvInsertTimerInActiveList>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d020      	beq.n	8009b7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b38:	2300      	movs	r3, #0
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	2100      	movs	r1, #0
 8009b42:	6978      	ldr	r0, [r7, #20]
 8009b44:	f7ff ff88 	bl	8009a58 <xTimerGenericCommand>
 8009b48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d114      	bne.n	8009b7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	60fb      	str	r3, [r7, #12]
}
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	e7fd      	b.n	8009b64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	6978      	ldr	r0, [r7, #20]
 8009b80:	4798      	blx	r3
}
 8009b82:	bf00      	nop
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000fa0 	.word	0x20000fa0

08009b90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b98:	f107 0308 	add.w	r3, r7, #8
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f859 	bl	8009c54 <prvGetNextExpireTime>
 8009ba2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f805 	bl	8009bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bae:	f000 f8d7 	bl	8009d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bb2:	bf00      	nop
 8009bb4:	e7f0      	b.n	8009b98 <prvTimerTask+0x8>
	...

08009bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bc2:	f7ff f939 	bl	8008e38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f866 	bl	8009c9c <prvSampleTimeNow>
 8009bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d130      	bne.n	8009c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10a      	bne.n	8009bf4 <prvProcessTimerOrBlockTask+0x3c>
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d806      	bhi.n	8009bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009be6:	f7ff f935 	bl	8008e54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bea:	68f9      	ldr	r1, [r7, #12]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ff81 	bl	8009af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bf2:	e024      	b.n	8009c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d008      	beq.n	8009c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bfa:	4b13      	ldr	r3, [pc, #76]	@ (8009c48 <prvProcessTimerOrBlockTask+0x90>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <prvProcessTimerOrBlockTask+0x50>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <prvProcessTimerOrBlockTask+0x52>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c4c <prvProcessTimerOrBlockTask+0x94>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f7fe fe75 	bl	8008908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c1e:	f7ff f919 	bl	8008e54 <xTaskResumeAll>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c28:	4b09      	ldr	r3, [pc, #36]	@ (8009c50 <prvProcessTimerOrBlockTask+0x98>)
 8009c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	f3bf 8f6f 	isb	sy
}
 8009c38:	e001      	b.n	8009c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c3a:	f7ff f90b 	bl	8008e54 <xTaskResumeAll>
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000fa4 	.word	0x20000fa4
 8009c4c:	20000fa8 	.word	0x20000fa8
 8009c50:	e000ed04 	.word	0xe000ed04

08009c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <prvGetNextExpireTime+0x44>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <prvGetNextExpireTime+0x16>
 8009c66:	2201      	movs	r2, #1
 8009c68:	e000      	b.n	8009c6c <prvGetNextExpireTime+0x18>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d105      	bne.n	8009c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c78:	4b07      	ldr	r3, [pc, #28]	@ (8009c98 <prvGetNextExpireTime+0x44>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e001      	b.n	8009c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c88:	68fb      	ldr	r3, [r7, #12]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20000fa0 	.word	0x20000fa0

08009c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ca4:	f7ff f974 	bl	8008f90 <xTaskGetTickCount>
 8009ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009caa:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd8 <prvSampleTimeNow+0x3c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d205      	bcs.n	8009cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cb4:	f000 f93a 	bl	8009f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e002      	b.n	8009cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cc6:	4a04      	ldr	r2, [pc, #16]	@ (8009cd8 <prvSampleTimeNow+0x3c>)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000fb0 	.word	0x20000fb0

08009cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d812      	bhi.n	8009d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d302      	bcc.n	8009d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d10:	2301      	movs	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e01b      	b.n	8009d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d16:	4b10      	ldr	r3, [pc, #64]	@ (8009d58 <prvInsertTimerInActiveList+0x7c>)
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f7fd fd96 	bl	8007852 <vListInsert>
 8009d26:	e012      	b.n	8009d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d206      	bcs.n	8009d3e <prvInsertTimerInActiveList+0x62>
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e007      	b.n	8009d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d3e:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <prvInsertTimerInActiveList+0x80>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4619      	mov	r1, r3
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f7fd fd82 	bl	8007852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d4e:	697b      	ldr	r3, [r7, #20]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000fa4 	.word	0x20000fa4
 8009d5c:	20000fa0 	.word	0x20000fa0

08009d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08e      	sub	sp, #56	@ 0x38
 8009d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d66:	e0ce      	b.n	8009f06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	da19      	bge.n	8009da2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d6e:	1d3b      	adds	r3, r7, #4
 8009d70:	3304      	adds	r3, #4
 8009d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10b      	bne.n	8009d92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	61fb      	str	r3, [r7, #28]
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	e7fd      	b.n	8009d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d98:	6850      	ldr	r0, [r2, #4]
 8009d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d9c:	6892      	ldr	r2, [r2, #8]
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f2c0 80ae 	blt.w	8009f06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d004      	beq.n	8009dc0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	3304      	adds	r3, #4
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fd fd82 	bl	80078c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff ff6a 	bl	8009c9c <prvSampleTimeNow>
 8009dc8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b09      	cmp	r3, #9
 8009dce:	f200 8097 	bhi.w	8009f00 <prvProcessReceivedCommands+0x1a0>
 8009dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <prvProcessReceivedCommands+0x78>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009e77 	.word	0x08009e77
 8009de8:	08009e8b 	.word	0x08009e8b
 8009dec:	08009ed7 	.word	0x08009ed7
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e01 	.word	0x08009e01
 8009df8:	08009e77 	.word	0x08009e77
 8009dfc:	08009e8b 	.word	0x08009e8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e06:	f043 0301 	orr.w	r3, r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	18d1      	adds	r1, r2, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e20:	f7ff ff5c 	bl	8009cdc <prvInsertTimerInActiveList>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d06c      	beq.n	8009f04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d061      	beq.n	8009f04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	441a      	add	r2, r3
 8009e48:	2300      	movs	r3, #0
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e52:	f7ff fe01 	bl	8009a58 <xTimerGenericCommand>
 8009e56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d152      	bne.n	8009f04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	61bb      	str	r3, [r7, #24]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e7c:	f023 0301 	bic.w	r3, r3, #1
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e88:	e03d      	b.n	8009f06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e90:	f043 0301 	orr.w	r3, r3, #1
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10b      	bne.n	8009ec2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	617b      	str	r3, [r7, #20]
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	e7fd      	b.n	8009ebe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	18d1      	adds	r1, r2, r3
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ed0:	f7ff ff04 	bl	8009cdc <prvInsertTimerInActiveList>
					break;
 8009ed4:	e017      	b.n	8009f06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d103      	bne.n	8009eec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ee6:	f000 fbe7 	bl	800a6b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009eea:	e00c      	b.n	8009f06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ef2:	f023 0301 	bic.w	r3, r3, #1
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009efe:	e002      	b.n	8009f06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009f00:	bf00      	nop
 8009f02:	e000      	b.n	8009f06 <prvProcessReceivedCommands+0x1a6>
					break;
 8009f04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f06:	4b08      	ldr	r3, [pc, #32]	@ (8009f28 <prvProcessReceivedCommands+0x1c8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	1d39      	adds	r1, r7, #4
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe f8e6 	bl	80080e0 <xQueueReceive>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f47f af26 	bne.w	8009d68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f1c:	bf00      	nop
 8009f1e:	bf00      	nop
 8009f20:	3730      	adds	r7, #48	@ 0x30
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000fa8 	.word	0x20000fa8

08009f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b088      	sub	sp, #32
 8009f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f32:	e049      	b.n	8009fc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f34:	4b2e      	ldr	r3, [pc, #184]	@ (8009ff0 <prvSwitchTimerLists+0xc4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ff0 <prvSwitchTimerLists+0xc4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fd fcb9 	bl	80078c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d02f      	beq.n	8009fc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	4413      	add	r3, r2
 8009f70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d90e      	bls.n	8009f98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f86:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <prvSwitchTimerLists+0xc4>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fd fc5e 	bl	8007852 <vListInsert>
 8009f96:	e017      	b.n	8009fc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7ff fd58 	bl	8009a58 <xTimerGenericCommand>
 8009fa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10b      	bne.n	8009fc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	603b      	str	r3, [r7, #0]
}
 8009fc2:	bf00      	nop
 8009fc4:	bf00      	nop
 8009fc6:	e7fd      	b.n	8009fc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fc8:	4b09      	ldr	r3, [pc, #36]	@ (8009ff0 <prvSwitchTimerLists+0xc4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1b0      	bne.n	8009f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fd2:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <prvSwitchTimerLists+0xc4>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fd8:	4b06      	ldr	r3, [pc, #24]	@ (8009ff4 <prvSwitchTimerLists+0xc8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a04      	ldr	r2, [pc, #16]	@ (8009ff0 <prvSwitchTimerLists+0xc4>)
 8009fde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fe0:	4a04      	ldr	r2, [pc, #16]	@ (8009ff4 <prvSwitchTimerLists+0xc8>)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	6013      	str	r3, [r2, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000fa0 	.word	0x20000fa0
 8009ff4:	20000fa4 	.word	0x20000fa4

08009ff8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ffe:	f000 f96b 	bl	800a2d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a002:	4b15      	ldr	r3, [pc, #84]	@ (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d120      	bne.n	800a04c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a00a:	4814      	ldr	r0, [pc, #80]	@ (800a05c <prvCheckForValidListAndQueue+0x64>)
 800a00c:	f7fd fbd0 	bl	80077b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a010:	4813      	ldr	r0, [pc, #76]	@ (800a060 <prvCheckForValidListAndQueue+0x68>)
 800a012:	f7fd fbcd 	bl	80077b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a016:	4b13      	ldr	r3, [pc, #76]	@ (800a064 <prvCheckForValidListAndQueue+0x6c>)
 800a018:	4a10      	ldr	r2, [pc, #64]	@ (800a05c <prvCheckForValidListAndQueue+0x64>)
 800a01a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a01c:	4b12      	ldr	r3, [pc, #72]	@ (800a068 <prvCheckForValidListAndQueue+0x70>)
 800a01e:	4a10      	ldr	r2, [pc, #64]	@ (800a060 <prvCheckForValidListAndQueue+0x68>)
 800a020:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a022:	2300      	movs	r3, #0
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4b11      	ldr	r3, [pc, #68]	@ (800a06c <prvCheckForValidListAndQueue+0x74>)
 800a028:	4a11      	ldr	r2, [pc, #68]	@ (800a070 <prvCheckForValidListAndQueue+0x78>)
 800a02a:	2110      	movs	r1, #16
 800a02c:	200a      	movs	r0, #10
 800a02e:	f7fd fcdd 	bl	80079ec <xQueueGenericCreateStatic>
 800a032:	4603      	mov	r3, r0
 800a034:	4a08      	ldr	r2, [pc, #32]	@ (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a036:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a038:	4b07      	ldr	r3, [pc, #28]	@ (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a040:	4b05      	ldr	r3, [pc, #20]	@ (800a058 <prvCheckForValidListAndQueue+0x60>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	490b      	ldr	r1, [pc, #44]	@ (800a074 <prvCheckForValidListAndQueue+0x7c>)
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fc0a 	bl	8008860 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a04c:	f000 f976 	bl	800a33c <vPortExitCritical>
}
 800a050:	bf00      	nop
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000fa8 	.word	0x20000fa8
 800a05c:	20000f78 	.word	0x20000f78
 800a060:	20000f8c 	.word	0x20000f8c
 800a064:	20000fa0 	.word	0x20000fa0
 800a068:	20000fa4 	.word	0x20000fa4
 800a06c:	20001054 	.word	0x20001054
 800a070:	20000fb4 	.word	0x20000fb4
 800a074:	0800ab7c 	.word	0x0800ab7c

0800a078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3b04      	subs	r3, #4
 800a088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3b04      	subs	r3, #4
 800a096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f023 0201 	bic.w	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3b04      	subs	r3, #4
 800a0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0a8:	4a0c      	ldr	r2, [pc, #48]	@ (800a0dc <pxPortInitialiseStack+0x64>)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3b14      	subs	r3, #20
 800a0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3b04      	subs	r3, #4
 800a0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f06f 0202 	mvn.w	r2, #2
 800a0c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3b20      	subs	r3, #32
 800a0cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	0800a0e1 	.word	0x0800a0e1

0800a0e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0ea:	4b13      	ldr	r3, [pc, #76]	@ (800a138 <prvTaskExitError+0x58>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f2:	d00b      	beq.n	800a10c <prvTaskExitError+0x2c>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	60fb      	str	r3, [r7, #12]
}
 800a106:	bf00      	nop
 800a108:	bf00      	nop
 800a10a:	e7fd      	b.n	800a108 <prvTaskExitError+0x28>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	60bb      	str	r3, [r7, #8]
}
 800a11e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a120:	bf00      	nop
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0fc      	beq.n	800a122 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	2000001c 	.word	0x2000001c
 800a13c:	00000000 	.word	0x00000000

0800a140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a140:	4b07      	ldr	r3, [pc, #28]	@ (800a160 <pxCurrentTCBConst2>)
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	6808      	ldr	r0, [r1, #0]
 800a146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f380 8809 	msr	PSP, r0
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f04f 0000 	mov.w	r0, #0
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	4770      	bx	lr
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst2>:
 800a160:	20000a78 	.word	0x20000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a168:	4808      	ldr	r0, [pc, #32]	@ (800a18c <prvPortStartFirstTask+0x24>)
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f380 8808 	msr	MSP, r0
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8814 	msr	CONTROL, r0
 800a17a:	b662      	cpsie	i
 800a17c:	b661      	cpsie	f
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	df00      	svc	0
 800a188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a18a:	bf00      	nop
 800a18c:	e000ed08 	.word	0xe000ed08

0800a190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a196:	4b47      	ldr	r3, [pc, #284]	@ (800a2b4 <xPortStartScheduler+0x124>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a47      	ldr	r2, [pc, #284]	@ (800a2b8 <xPortStartScheduler+0x128>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d10b      	bne.n	800a1b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	613b      	str	r3, [r7, #16]
}
 800a1b2:	bf00      	nop
 800a1b4:	bf00      	nop
 800a1b6:	e7fd      	b.n	800a1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2b4 <xPortStartScheduler+0x124>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a2bc <xPortStartScheduler+0x12c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d10b      	bne.n	800a1da <xPortStartScheduler+0x4a>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60fb      	str	r3, [r7, #12]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1da:	4b39      	ldr	r3, [pc, #228]	@ (800a2c0 <xPortStartScheduler+0x130>)
 800a1dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	22ff      	movs	r2, #255	@ 0xff
 800a1ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	4b31      	ldr	r3, [pc, #196]	@ (800a2c4 <xPortStartScheduler+0x134>)
 800a200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a202:	4b31      	ldr	r3, [pc, #196]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a204:	2207      	movs	r2, #7
 800a206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a208:	e009      	b.n	800a21e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a20a:	4b2f      	ldr	r3, [pc, #188]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3b01      	subs	r3, #1
 800a210:	4a2d      	ldr	r2, [pc, #180]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	b2db      	uxtb	r3, r3
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a226:	2b80      	cmp	r3, #128	@ 0x80
 800a228:	d0ef      	beq.n	800a20a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a22a:	4b27      	ldr	r3, [pc, #156]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f1c3 0307 	rsb	r3, r3, #7
 800a232:	2b04      	cmp	r3, #4
 800a234:	d00b      	beq.n	800a24e <xPortStartScheduler+0xbe>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	60bb      	str	r3, [r7, #8]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a24e:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	4a1c      	ldr	r2, [pc, #112]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a258:	4b1b      	ldr	r3, [pc, #108]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a260:	4a19      	ldr	r2, [pc, #100]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	b2da      	uxtb	r2, r3
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a26c:	4b17      	ldr	r3, [pc, #92]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a16      	ldr	r2, [pc, #88]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a278:	4b14      	ldr	r3, [pc, #80]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a13      	ldr	r2, [pc, #76]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a27e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a284:	f000 f8da 	bl	800a43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a288:	4b11      	ldr	r3, [pc, #68]	@ (800a2d0 <xPortStartScheduler+0x140>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a28e:	f000 f8f9 	bl	800a484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a292:	4b10      	ldr	r3, [pc, #64]	@ (800a2d4 <xPortStartScheduler+0x144>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a0f      	ldr	r2, [pc, #60]	@ (800a2d4 <xPortStartScheduler+0x144>)
 800a298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a29c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a29e:	f7ff ff63 	bl	800a168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2a2:	f7fe ff3f 	bl	8009124 <vTaskSwitchContext>
	prvTaskExitError();
 800a2a6:	f7ff ff1b 	bl	800a0e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	e000ed00 	.word	0xe000ed00
 800a2b8:	410fc271 	.word	0x410fc271
 800a2bc:	410fc270 	.word	0x410fc270
 800a2c0:	e000e400 	.word	0xe000e400
 800a2c4:	200010a4 	.word	0x200010a4
 800a2c8:	200010a8 	.word	0x200010a8
 800a2cc:	e000ed20 	.word	0xe000ed20
 800a2d0:	2000001c 	.word	0x2000001c
 800a2d4:	e000ef34 	.word	0xe000ef34

0800a2d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2f2:	4b10      	ldr	r3, [pc, #64]	@ (800a334 <vPortEnterCritical+0x5c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a334 <vPortEnterCritical+0x5c>)
 800a2fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a334 <vPortEnterCritical+0x5c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d110      	bne.n	800a326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a304:	4b0c      	ldr	r3, [pc, #48]	@ (800a338 <vPortEnterCritical+0x60>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <vPortEnterCritical+0x4e>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	603b      	str	r3, [r7, #0]
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	e7fd      	b.n	800a322 <vPortEnterCritical+0x4a>
	}
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	2000001c 	.word	0x2000001c
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a342:	4b12      	ldr	r3, [pc, #72]	@ (800a38c <vPortExitCritical+0x50>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10b      	bne.n	800a362 <vPortExitCritical+0x26>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	607b      	str	r3, [r7, #4]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a362:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <vPortExitCritical+0x50>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3b01      	subs	r3, #1
 800a368:	4a08      	ldr	r2, [pc, #32]	@ (800a38c <vPortExitCritical+0x50>)
 800a36a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a36c:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <vPortExitCritical+0x50>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d105      	bne.n	800a380 <vPortExitCritical+0x44>
 800a374:	2300      	movs	r3, #0
 800a376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f383 8811 	msr	BASEPRI, r3
}
 800a37e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	2000001c 	.word	0x2000001c

0800a390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a390:	f3ef 8009 	mrs	r0, PSP
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	4b15      	ldr	r3, [pc, #84]	@ (800a3f0 <pxCurrentTCBConst>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f01e 0f10 	tst.w	lr, #16
 800a3a0:	bf08      	it	eq
 800a3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3b4:	f380 8811 	msr	BASEPRI, r0
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f7fe feb0 	bl	8009124 <vTaskSwitchContext>
 800a3c4:	f04f 0000 	mov.w	r0, #0
 800a3c8:	f380 8811 	msr	BASEPRI, r0
 800a3cc:	bc09      	pop	{r0, r3}
 800a3ce:	6819      	ldr	r1, [r3, #0]
 800a3d0:	6808      	ldr	r0, [r1, #0]
 800a3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d6:	f01e 0f10 	tst.w	lr, #16
 800a3da:	bf08      	it	eq
 800a3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3e0:	f380 8809 	msr	PSP, r0
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w

0800a3f0 <pxCurrentTCBConst>:
 800a3f0:	20000a78 	.word	0x20000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a412:	f7fe fdcd 	bl	8008fb0 <xTaskIncrementTick>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <xPortSysTickHandler+0x40>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	f383 8811 	msr	BASEPRI, r3
}
 800a42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a440:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a446:	4b0b      	ldr	r3, [pc, #44]	@ (800a474 <vPortSetupTimerInterrupt+0x38>)
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a44c:	4b0a      	ldr	r3, [pc, #40]	@ (800a478 <vPortSetupTimerInterrupt+0x3c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a0a      	ldr	r2, [pc, #40]	@ (800a47c <vPortSetupTimerInterrupt+0x40>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	099b      	lsrs	r3, r3, #6
 800a458:	4a09      	ldr	r2, [pc, #36]	@ (800a480 <vPortSetupTimerInterrupt+0x44>)
 800a45a:	3b01      	subs	r3, #1
 800a45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a45e:	4b04      	ldr	r3, [pc, #16]	@ (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a460:	2207      	movs	r2, #7
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	e000e010 	.word	0xe000e010
 800a474:	e000e018 	.word	0xe000e018
 800a478:	20000010 	.word	0x20000010
 800a47c:	10624dd3 	.word	0x10624dd3
 800a480:	e000e014 	.word	0xe000e014

0800a484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a494 <vPortEnableVFP+0x10>
 800a488:	6801      	ldr	r1, [r0, #0]
 800a48a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a48e:	6001      	str	r1, [r0, #0]
 800a490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a492:	bf00      	nop
 800a494:	e000ed88 	.word	0xe000ed88

0800a498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a49e:	f3ef 8305 	mrs	r3, IPSR
 800a4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d915      	bls.n	800a4d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4aa:	4a18      	ldr	r2, [pc, #96]	@ (800a50c <vPortValidateInterruptPriority+0x74>)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4b4:	4b16      	ldr	r3, [pc, #88]	@ (800a510 <vPortValidateInterruptPriority+0x78>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	7afa      	ldrb	r2, [r7, #11]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d20b      	bcs.n	800a4d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	607b      	str	r3, [r7, #4]
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	e7fd      	b.n	800a4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a514 <vPortValidateInterruptPriority+0x7c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a4de:	4b0e      	ldr	r3, [pc, #56]	@ (800a518 <vPortValidateInterruptPriority+0x80>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d90b      	bls.n	800a4fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	603b      	str	r3, [r7, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <vPortValidateInterruptPriority+0x62>
	}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	e000e3f0 	.word	0xe000e3f0
 800a510:	200010a4 	.word	0x200010a4
 800a514:	e000ed0c 	.word	0xe000ed0c
 800a518:	200010a8 	.word	0x200010a8

0800a51c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08a      	sub	sp, #40	@ 0x28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a528:	f7fe fc86 	bl	8008e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a52c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6a0 <pvPortMalloc+0x184>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a534:	f000 f924 	bl	800a780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a538:	4b5a      	ldr	r3, [pc, #360]	@ (800a6a4 <pvPortMalloc+0x188>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4013      	ands	r3, r2
 800a540:	2b00      	cmp	r3, #0
 800a542:	f040 8095 	bne.w	800a670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a54c:	2208      	movs	r2, #8
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d015      	beq.n	800a58a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f023 0307 	bic.w	r3, r3, #7
 800a564:	3308      	adds	r3, #8
 800a566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <pvPortMalloc+0x6e>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	617b      	str	r3, [r7, #20]
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	e7fd      	b.n	800a586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d06f      	beq.n	800a670 <pvPortMalloc+0x154>
 800a590:	4b45      	ldr	r3, [pc, #276]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d86a      	bhi.n	800a670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a59a:	4b44      	ldr	r3, [pc, #272]	@ (800a6ac <pvPortMalloc+0x190>)
 800a59c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a59e:	4b43      	ldr	r3, [pc, #268]	@ (800a6ac <pvPortMalloc+0x190>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5a4:	e004      	b.n	800a5b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d903      	bls.n	800a5c2 <pvPortMalloc+0xa6>
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1f1      	bne.n	800a5a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5c2:	4b37      	ldr	r3, [pc, #220]	@ (800a6a0 <pvPortMalloc+0x184>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d051      	beq.n	800a670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	4413      	add	r3, r2
 800a5d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	1ad2      	subs	r2, r2, r3
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d920      	bls.n	800a630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00b      	beq.n	800a618 <pvPortMalloc+0xfc>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
 800a614:	bf00      	nop
 800a616:	e7fd      	b.n	800a614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a62a:	69b8      	ldr	r0, [r7, #24]
 800a62c:	f000 f90a 	bl	800a844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a630:	4b1d      	ldr	r3, [pc, #116]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a63c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a63e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b0 <pvPortMalloc+0x194>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d203      	bcs.n	800a652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a64a:	4b17      	ldr	r3, [pc, #92]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a18      	ldr	r2, [pc, #96]	@ (800a6b0 <pvPortMalloc+0x194>)
 800a650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	4b13      	ldr	r3, [pc, #76]	@ (800a6a4 <pvPortMalloc+0x188>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a666:	4b13      	ldr	r3, [pc, #76]	@ (800a6b4 <pvPortMalloc+0x198>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3301      	adds	r3, #1
 800a66c:	4a11      	ldr	r2, [pc, #68]	@ (800a6b4 <pvPortMalloc+0x198>)
 800a66e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a670:	f7fe fbf0 	bl	8008e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00b      	beq.n	800a696 <pvPortMalloc+0x17a>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	60fb      	str	r3, [r7, #12]
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	e7fd      	b.n	800a692 <pvPortMalloc+0x176>
	return pvReturn;
 800a696:	69fb      	ldr	r3, [r7, #28]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3728      	adds	r7, #40	@ 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20002054 	.word	0x20002054
 800a6a4:	20002068 	.word	0x20002068
 800a6a8:	20002058 	.word	0x20002058
 800a6ac:	2000204c 	.word	0x2000204c
 800a6b0:	2000205c 	.word	0x2000205c
 800a6b4:	20002060 	.word	0x20002060

0800a6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d04f      	beq.n	800a76a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	425b      	negs	r3, r3
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b25      	ldr	r3, [pc, #148]	@ (800a774 <vPortFree+0xbc>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <vPortFree+0x46>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	60fb      	str	r3, [r7, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <vPortFree+0x66>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60bb      	str	r3, [r7, #8]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	4b14      	ldr	r3, [pc, #80]	@ (800a774 <vPortFree+0xbc>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4013      	ands	r3, r2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01e      	beq.n	800a76a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11a      	bne.n	800a76a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	4b0e      	ldr	r3, [pc, #56]	@ (800a774 <vPortFree+0xbc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	43db      	mvns	r3, r3
 800a73e:	401a      	ands	r2, r3
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a744:	f7fe fb78 	bl	8008e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <vPortFree+0xc0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4413      	add	r3, r2
 800a752:	4a09      	ldr	r2, [pc, #36]	@ (800a778 <vPortFree+0xc0>)
 800a754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a756:	6938      	ldr	r0, [r7, #16]
 800a758:	f000 f874 	bl	800a844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a75c:	4b07      	ldr	r3, [pc, #28]	@ (800a77c <vPortFree+0xc4>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3301      	adds	r3, #1
 800a762:	4a06      	ldr	r2, [pc, #24]	@ (800a77c <vPortFree+0xc4>)
 800a764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a766:	f7fe fb75 	bl	8008e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a76a:	bf00      	nop
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20002068 	.word	0x20002068
 800a778:	20002058 	.word	0x20002058
 800a77c:	20002064 	.word	0x20002064

0800a780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a786:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800a78a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a78c:	4b27      	ldr	r3, [pc, #156]	@ (800a82c <prvHeapInit+0xac>)
 800a78e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00c      	beq.n	800a7b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f023 0307 	bic.w	r3, r3, #7
 800a7a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a82c <prvHeapInit+0xac>)
 800a7b0:	4413      	add	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a830 <prvHeapInit+0xb0>)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7be:	4b1c      	ldr	r3, [pc, #112]	@ (800a830 <prvHeapInit+0xb0>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	1a9b      	subs	r3, r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f023 0307 	bic.w	r3, r3, #7
 800a7da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4a15      	ldr	r2, [pc, #84]	@ (800a834 <prvHeapInit+0xb4>)
 800a7e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7e2:	4b14      	ldr	r3, [pc, #80]	@ (800a834 <prvHeapInit+0xb4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7ea:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <prvHeapInit+0xb4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	1ad2      	subs	r2, r2, r3
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a800:	4b0c      	ldr	r3, [pc, #48]	@ (800a834 <prvHeapInit+0xb4>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	4a0a      	ldr	r2, [pc, #40]	@ (800a838 <prvHeapInit+0xb8>)
 800a80e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4a09      	ldr	r2, [pc, #36]	@ (800a83c <prvHeapInit+0xbc>)
 800a816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a818:	4b09      	ldr	r3, [pc, #36]	@ (800a840 <prvHeapInit+0xc0>)
 800a81a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a81e:	601a      	str	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	200010ac 	.word	0x200010ac
 800a830:	2000204c 	.word	0x2000204c
 800a834:	20002054 	.word	0x20002054
 800a838:	2000205c 	.word	0x2000205c
 800a83c:	20002058 	.word	0x20002058
 800a840:	20002068 	.word	0x20002068

0800a844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a84c:	4b28      	ldr	r3, [pc, #160]	@ (800a8f0 <prvInsertBlockIntoFreeList+0xac>)
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e002      	b.n	800a858 <prvInsertBlockIntoFreeList+0x14>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d8f7      	bhi.n	800a852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d108      	bne.n	800a886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	441a      	add	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	441a      	add	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d118      	bne.n	800a8cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4b15      	ldr	r3, [pc, #84]	@ (800a8f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d00d      	beq.n	800a8c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	441a      	add	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	e008      	b.n	800a8d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	e003      	b.n	800a8d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d002      	beq.n	800a8e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	2000204c 	.word	0x2000204c
 800a8f4:	20002054 	.word	0x20002054

0800a8f8 <memset>:
 800a8f8:	4402      	add	r2, r0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d100      	bne.n	800a902 <memset+0xa>
 800a900:	4770      	bx	lr
 800a902:	f803 1b01 	strb.w	r1, [r3], #1
 800a906:	e7f9      	b.n	800a8fc <memset+0x4>

0800a908 <_reclaim_reent>:
 800a908:	4b29      	ldr	r3, [pc, #164]	@ (800a9b0 <_reclaim_reent+0xa8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4283      	cmp	r3, r0
 800a90e:	b570      	push	{r4, r5, r6, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	d04b      	beq.n	800a9ac <_reclaim_reent+0xa4>
 800a914:	69c3      	ldr	r3, [r0, #28]
 800a916:	b1ab      	cbz	r3, 800a944 <_reclaim_reent+0x3c>
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	b16b      	cbz	r3, 800a938 <_reclaim_reent+0x30>
 800a91c:	2500      	movs	r5, #0
 800a91e:	69e3      	ldr	r3, [r4, #28]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	5959      	ldr	r1, [r3, r5]
 800a924:	2900      	cmp	r1, #0
 800a926:	d13b      	bne.n	800a9a0 <_reclaim_reent+0x98>
 800a928:	3504      	adds	r5, #4
 800a92a:	2d80      	cmp	r5, #128	@ 0x80
 800a92c:	d1f7      	bne.n	800a91e <_reclaim_reent+0x16>
 800a92e:	69e3      	ldr	r3, [r4, #28]
 800a930:	4620      	mov	r0, r4
 800a932:	68d9      	ldr	r1, [r3, #12]
 800a934:	f000 f872 	bl	800aa1c <_free_r>
 800a938:	69e3      	ldr	r3, [r4, #28]
 800a93a:	6819      	ldr	r1, [r3, #0]
 800a93c:	b111      	cbz	r1, 800a944 <_reclaim_reent+0x3c>
 800a93e:	4620      	mov	r0, r4
 800a940:	f000 f86c 	bl	800aa1c <_free_r>
 800a944:	6961      	ldr	r1, [r4, #20]
 800a946:	b111      	cbz	r1, 800a94e <_reclaim_reent+0x46>
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 f867 	bl	800aa1c <_free_r>
 800a94e:	69e1      	ldr	r1, [r4, #28]
 800a950:	b111      	cbz	r1, 800a958 <_reclaim_reent+0x50>
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f862 	bl	800aa1c <_free_r>
 800a958:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a95a:	b111      	cbz	r1, 800a962 <_reclaim_reent+0x5a>
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 f85d 	bl	800aa1c <_free_r>
 800a962:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a964:	b111      	cbz	r1, 800a96c <_reclaim_reent+0x64>
 800a966:	4620      	mov	r0, r4
 800a968:	f000 f858 	bl	800aa1c <_free_r>
 800a96c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a96e:	b111      	cbz	r1, 800a976 <_reclaim_reent+0x6e>
 800a970:	4620      	mov	r0, r4
 800a972:	f000 f853 	bl	800aa1c <_free_r>
 800a976:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a978:	b111      	cbz	r1, 800a980 <_reclaim_reent+0x78>
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 f84e 	bl	800aa1c <_free_r>
 800a980:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a982:	b111      	cbz	r1, 800a98a <_reclaim_reent+0x82>
 800a984:	4620      	mov	r0, r4
 800a986:	f000 f849 	bl	800aa1c <_free_r>
 800a98a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a98c:	b111      	cbz	r1, 800a994 <_reclaim_reent+0x8c>
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 f844 	bl	800aa1c <_free_r>
 800a994:	6a23      	ldr	r3, [r4, #32]
 800a996:	b14b      	cbz	r3, 800a9ac <_reclaim_reent+0xa4>
 800a998:	4620      	mov	r0, r4
 800a99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a99e:	4718      	bx	r3
 800a9a0:	680e      	ldr	r6, [r1, #0]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f83a 	bl	800aa1c <_free_r>
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	e7bb      	b.n	800a924 <_reclaim_reent+0x1c>
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000020 	.word	0x20000020

0800a9b4 <__libc_init_array>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a9ec <__libc_init_array+0x38>)
 800a9b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a9f0 <__libc_init_array+0x3c>)
 800a9ba:	1b64      	subs	r4, r4, r5
 800a9bc:	10a4      	asrs	r4, r4, #2
 800a9be:	2600      	movs	r6, #0
 800a9c0:	42a6      	cmp	r6, r4
 800a9c2:	d109      	bne.n	800a9d8 <__libc_init_array+0x24>
 800a9c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a9f4 <__libc_init_array+0x40>)
 800a9c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a9f8 <__libc_init_array+0x44>)
 800a9c8:	f000 f87e 	bl	800aac8 <_init>
 800a9cc:	1b64      	subs	r4, r4, r5
 800a9ce:	10a4      	asrs	r4, r4, #2
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	42a6      	cmp	r6, r4
 800a9d4:	d105      	bne.n	800a9e2 <__libc_init_array+0x2e>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9dc:	4798      	blx	r3
 800a9de:	3601      	adds	r6, #1
 800a9e0:	e7ee      	b.n	800a9c0 <__libc_init_array+0xc>
 800a9e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e6:	4798      	blx	r3
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	e7f2      	b.n	800a9d2 <__libc_init_array+0x1e>
 800a9ec:	0800acc8 	.word	0x0800acc8
 800a9f0:	0800acc8 	.word	0x0800acc8
 800a9f4:	0800acc8 	.word	0x0800acc8
 800a9f8:	0800accc 	.word	0x0800accc

0800a9fc <__retarget_lock_acquire_recursive>:
 800a9fc:	4770      	bx	lr

0800a9fe <__retarget_lock_release_recursive>:
 800a9fe:	4770      	bx	lr

0800aa00 <memcpy>:
 800aa00:	440a      	add	r2, r1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa08:	d100      	bne.n	800aa0c <memcpy+0xc>
 800aa0a:	4770      	bx	lr
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa16:	4291      	cmp	r1, r2
 800aa18:	d1f9      	bne.n	800aa0e <memcpy+0xe>
 800aa1a:	bd10      	pop	{r4, pc}

0800aa1c <_free_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4605      	mov	r5, r0
 800aa20:	2900      	cmp	r1, #0
 800aa22:	d041      	beq.n	800aaa8 <_free_r+0x8c>
 800aa24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa28:	1f0c      	subs	r4, r1, #4
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bfb8      	it	lt
 800aa2e:	18e4      	addlt	r4, r4, r3
 800aa30:	f000 f83e 	bl	800aab0 <__malloc_lock>
 800aa34:	4a1d      	ldr	r2, [pc, #116]	@ (800aaac <_free_r+0x90>)
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	b933      	cbnz	r3, 800aa48 <_free_r+0x2c>
 800aa3a:	6063      	str	r3, [r4, #4]
 800aa3c:	6014      	str	r4, [r2, #0]
 800aa3e:	4628      	mov	r0, r5
 800aa40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa44:	f000 b83a 	b.w	800aabc <__malloc_unlock>
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d908      	bls.n	800aa5e <_free_r+0x42>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	1821      	adds	r1, r4, r0
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf01      	itttt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	1809      	addeq	r1, r1, r0
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	e7ed      	b.n	800aa3a <_free_r+0x1e>
 800aa5e:	461a      	mov	r2, r3
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	b10b      	cbz	r3, 800aa68 <_free_r+0x4c>
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d9fa      	bls.n	800aa5e <_free_r+0x42>
 800aa68:	6811      	ldr	r1, [r2, #0]
 800aa6a:	1850      	adds	r0, r2, r1
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d10b      	bne.n	800aa88 <_free_r+0x6c>
 800aa70:	6820      	ldr	r0, [r4, #0]
 800aa72:	4401      	add	r1, r0
 800aa74:	1850      	adds	r0, r2, r1
 800aa76:	4283      	cmp	r3, r0
 800aa78:	6011      	str	r1, [r2, #0]
 800aa7a:	d1e0      	bne.n	800aa3e <_free_r+0x22>
 800aa7c:	6818      	ldr	r0, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	6053      	str	r3, [r2, #4]
 800aa82:	4408      	add	r0, r1
 800aa84:	6010      	str	r0, [r2, #0]
 800aa86:	e7da      	b.n	800aa3e <_free_r+0x22>
 800aa88:	d902      	bls.n	800aa90 <_free_r+0x74>
 800aa8a:	230c      	movs	r3, #12
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	e7d6      	b.n	800aa3e <_free_r+0x22>
 800aa90:	6820      	ldr	r0, [r4, #0]
 800aa92:	1821      	adds	r1, r4, r0
 800aa94:	428b      	cmp	r3, r1
 800aa96:	bf04      	itt	eq
 800aa98:	6819      	ldreq	r1, [r3, #0]
 800aa9a:	685b      	ldreq	r3, [r3, #4]
 800aa9c:	6063      	str	r3, [r4, #4]
 800aa9e:	bf04      	itt	eq
 800aaa0:	1809      	addeq	r1, r1, r0
 800aaa2:	6021      	streq	r1, [r4, #0]
 800aaa4:	6054      	str	r4, [r2, #4]
 800aaa6:	e7ca      	b.n	800aa3e <_free_r+0x22>
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	200021a8 	.word	0x200021a8

0800aab0 <__malloc_lock>:
 800aab0:	4801      	ldr	r0, [pc, #4]	@ (800aab8 <__malloc_lock+0x8>)
 800aab2:	f7ff bfa3 	b.w	800a9fc <__retarget_lock_acquire_recursive>
 800aab6:	bf00      	nop
 800aab8:	200021a4 	.word	0x200021a4

0800aabc <__malloc_unlock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	@ (800aac4 <__malloc_unlock+0x8>)
 800aabe:	f7ff bf9e 	b.w	800a9fe <__retarget_lock_release_recursive>
 800aac2:	bf00      	nop
 800aac4:	200021a4 	.word	0x200021a4

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
